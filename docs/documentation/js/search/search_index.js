var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.206,1,2.593]],["body/modules/AppModule.html",[0,1.825,1,5.218,2,1.552,3,1.552,4,1.737,5,1.737,6,1.552,7,1.737,8,2.411,9,3.031,10,3.031,11,4.246,12,0.019,13,4.246,14,4.246,15,4.246,16,4.246,17,4.246,18,4.246,19,2.411,20,1.737,21,1.737,22,0.177,23,0.157,24,0.157,25,2.705,26,2.561,27,0.528,28,0.706,29,1.845,30,1.04,31,3.526,32,3.526,33,3.526,34,3.526,35,3.526,36,3.526,37,3.526,38,3.526,39,1.327,40,2.705,41,3.031,42,3.526,43,3.526,44,3.526,45,1.552,46,3.526,47,3.526,48,3.526,49,3.526,50,3.526,51,0.177,52,0.205,53,0.012,54,0.012]],["title/classes/AppPaginatedResponse.html",[52,0.215,55,1.943]],["body/classes/AppPaginatedResponse.html",[12,0.019,22,0.144,23,0.127,24,0.127,27,0.314,28,0.575,51,0.295,52,0.321,53,0.012,54,0.01,55,2.209,56,0.604,57,1.843,58,1.858,59,2.723,60,0.443,61,1.627,62,2.892,63,1.791,64,3.903,65,3.139,66,3.903,67,3.903,68,3.646,69,1.963,70,2.867,71,2.824,72,4.448,73,1.214,74,4.222,75,0.931,76,0.493,77,1.063,78,3.498,79,2.867,80,2.867,81,2.867,82,2.867,83,2.867,84,2.867,85,2.947,86,1.843,87,1.262,88,1.196,89,1.334,90,0.519,91,1.5,92,2.001,93,2.001,94,2.001,95,2.001,96,2.001,97,2.001,98,2.001,99,1.843,100,2.001,101,2.001,102,2.947,103,0.887,104,1.843,105,2.08,106,2.001,107,1.712,108,2.001]],["title/classes/AppResponse.html",[52,0.215,59,1.83]],["body/classes/AppResponse.html",[12,0.019,22,0.166,23,0.147,24,0.147,27,0.348,28,0.662,51,0.312,52,0.342,53,0.013,54,0.011,55,1.729,56,0.696,57,2.125,58,1.454,59,2.675,60,0.51,61,1.763,62,2.447,63,1.527,64,3.524,65,2.908,66,3.524,67,3.524,68,3.709,69,2.176,71,2.734,72,4.643,73,0.891,75,1.073,76,0.568,77,0.999,78,2.307,85,3.265,86,2.125,87,1.454,88,1.379,89,1.537,90,0.598,91,1.729,92,3.265,93,2.307,94,2.307,95,2.307,96,2.307,97,2.307,98,2.307,99,2.125,100,2.307,101,2.307,102,3.265,103,1.022,104,2.125,105,2.304,106,2.307,107,1.973,108,2.307,109,4.678]],["title/classes/Comment.html",[52,0.215,110,1.943]],["body/classes/Comment.html",[12,0.019,22,0.182,23,0.161,24,0.161,27,0.457,30,1.068,39,1.363,45,2.931,51,0.286,52,0.21,53,0.012,54,0.012,56,0.763,60,0.559,61,1.619,73,1.171,77,1.09,90,0.903,105,3.174,110,3.484,111,2.529,112,4.375,113,5.704,114,3.424,115,5.704,116,3.371,117,1.995,118,3.981,119,3.667,120,4.073,121,3.623,122,3.481,123,3.623,124,3.623,125,2.329,126,3.623,127,1.785,128,3.593,129,2.02,130,2.609,131,1.685,132,1.594,133,2.779,134,3.114,135,2.02,136,3.981,137,3.114,138,2.529,139,3.114]],["title/controllers/CommentController.html",[140,1.33,141,2.593]],["body/controllers/CommentController.html",[12,0.019,22,0.167,23,0.148,24,0.148,27,0.441,28,0.669,51,0.167,52,0.194,53,0.011,54,0.011,60,0.516,63,1.667,73,1.192,75,1.925,76,1.02,77,0.916,90,1.254,103,1.935,110,1.747,117,2.031,140,1.195,141,3.289,142,1.195,143,2.87,144,1.861,145,1.773,146,1.263,147,2.232,148,1.773,149,1.773,150,1.773,151,2.87,152,3.875,153,3.044,154,3.339,155,2.239,156,3.339,157,1.256,158,2.627,159,3.339,160,2.324,161,1.256,162,2.627,163,3.339,164,1.256,165,4.38,166,2.627,167,3.339,168,2.627,169,1.861,170,1.861,171,1.861,172,3.259,173,2.87,174,1.256,175,3.614,176,1.256,177,3.339,178,2.33,179,1.553,180,2.33,181,3.339,182,3.339,183,1.861,184,3.339,185,2.561,186,3.339,187,1.861,188,3.339]],["title/modules/CommentModule.html",[0,1.206,11,2.388]],["body/modules/CommentModule.html",[0,2.046,2,1.947,3,1.947,4,2.179,5,2.179,6,1.947,7,3.105,8,2.179,11,4.533,12,0.019,19,2.807,20,2.179,21,2.179,22,0.222,23,0.196,24,0.196,26,2.314,27,0.512,28,0.886,29,2.314,30,1.304,51,0.222,52,0.257,53,0.014,54,0.014,76,0.76,110,2.314,127,1.584,138,3.977,141,4.399,142,2.04,172,4.209,173,3.802,189,3.802,190,3.802,191,4.424,192,4.424,193,4.424,194,2.466,195,4.424]],["title/injectables/CommentService.html",[172,2.217,196,1.33]],["body/injectables/CommentService.html",[12,0.019,22,0.177,23,0.157,24,0.157,27,0.418,28,0.708,51,0.177,52,0.205,53,0.012,54,0.012,60,0.546,63,1.71,71,2.641,73,1.217,75,1.974,76,1.045,77,0.939,90,1.157,103,1.976,110,3.342,145,1.846,146,1.314,147,2.289,148,1.846,149,1.846,150,1.846,151,4.215,152,3.813,155,2.427,157,1.846,160,2.366,161,1.846,164,1.846,165,4.358,172,2.927,174,1.33,175,3.762,176,1.33,196,1.756,197,1.849,198,3.039,199,3.535,200,3.535,201,3.535,202,3.535,203,3.535,204,4.459,205,2.468,206,1.644,207,2.468,208,2.468]],["title/classes/Composer.html",[52,0.215,209,2.071]],["body/classes/Composer.html",[12,0.019,22,0.137,23,0.121,24,0.121,27,0.362,30,0.807,39,1.03,45,3.238,51,0.244,52,0.159,53,0.01,54,0.01,56,0.576,60,0.423,61,1.324,73,1.298,77,1.087,90,1.309,105,1.348,114,2.662,117,2.211,118,1.91,119,1.759,120,4.161,122,3.771,125,4.035,127,1.46,128,3.845,129,1.526,130,2.134,131,1.273,132,1.204,133,2.099,135,1.526,136,1.91,209,2.718,210,1.91,211,4.191,212,4.191,213,2.145,214,4.191,215,4.191,216,4.191,217,4.191,218,4.191,219,4.191,220,4.875,221,4.191,222,2.737,223,2.737,224,2.737,225,2.847,226,4.645,227,3.506,228,2.737,229,2.737,230,2.737,231,2.737,232,3.129,233,3.506,234,3.506,235,2.737,236,2.737,237,2.737,238,3.129,239,2.352,240,2.737,241,1.91,242,2.847,243,2.352,244,1.91,245,2.352]],["title/controllers/ComposerController.html",[140,1.33,246,2.593]],["body/controllers/ComposerController.html",[12,0.019,22,0.166,23,0.147,24,0.147,27,0.44,28,0.666,51,0.166,52,0.193,53,0.011,54,0.011,60,0.513,63,1.664,73,1.19,75,1.921,76,1.017,77,0.914,90,1.253,103,1.931,117,2.027,140,1.189,142,1.189,144,1.852,145,1.767,146,1.258,147,2.227,148,1.767,149,1.767,150,2.049,153,3.036,155,2.235,157,1.25,158,2.618,160,2.32,161,1.25,162,2.618,164,1.25,166,2.618,168,2.618,169,1.852,170,1.852,171,1.852,174,1.25,176,1.25,178,2.319,179,1.545,180,2.319,183,1.852,187,1.852,209,1.852,246,3.277,247,2.855,248,2.855,249,3.868,250,3.322,251,3.322,252,3.322,253,3.322,254,4.374,255,3.322,256,3.25,257,2.855,258,3.601,259,3.322,260,3.322,261,3.322,262,3.322,263,2.319,264,3.322,265,3.322]],["title/modules/ComposerModule.html",[0,1.206,13,2.388]],["body/modules/ComposerModule.html",[0,2.046,2,1.947,3,1.947,4,2.179,5,2.179,6,1.947,7,3.105,8,2.179,12,0.019,13,4.533,19,2.807,20,2.179,21,2.179,22,0.222,23,0.196,24,0.196,26,2.314,27,0.512,28,0.886,29,2.314,30,1.304,51,0.222,52,0.257,53,0.014,54,0.014,76,0.76,127,1.584,142,2.04,194,2.466,209,2.466,244,3.977,246,4.399,256,4.209,257,3.802,266,3.802,267,3.802,268,4.424,269,4.424,270,4.424,271,4.424]],["title/injectables/ComposerService.html",[196,1.33,256,2.217]],["body/injectables/ComposerService.html",[12,0.019,22,0.177,23,0.157,24,0.157,27,0.418,28,0.708,51,0.177,52,0.205,53,0.012,54,0.012,60,0.546,63,1.71,71,2.641,73,1.217,75,1.974,76,1.045,77,0.939,90,1.157,103,1.976,145,1.846,146,1.314,147,2.289,148,1.846,149,1.846,150,1.846,155,2.427,157,1.846,160,2.366,161,1.846,164,1.846,174,1.33,176,1.33,196,1.756,197,1.849,204,4.459,205,2.468,206,1.644,207,2.468,208,2.468,209,3.562,248,4.215,249,3.813,254,4.358,256,2.927,258,3.762,272,3.039,273,3.535,274,3.535,275,3.535,276,3.535,277,3.535]],["title/controllers/CountriesController.html",[140,1.33,278,2.593]],["body/controllers/CountriesController.html",[12,0.019,22,0.104,23,0.092,24,0.092,27,0.422,28,0.415,39,2.039,51,0.104,52,0.12,53,0.008,54,0.008,55,1.084,59,1.02,60,0.32,62,1.722,63,1.523,64,1.964,65,2.903,66,1.964,67,1.964,68,3.02,69,0.963,71,2.431,73,1.032,75,1.759,76,0.931,77,0.837,87,0.911,88,0.864,90,1.17,103,1.999,117,1.759,140,0.741,142,0.741,144,1.155,145,1.238,146,1.097,147,1.541,148,1.238,149,1.238,150,1.541,153,2.283,155,1.939,157,0.779,158,1.835,160,1.939,161,0.779,162,1.835,164,0.779,166,1.835,168,2.283,169,1.155,170,1.155,171,1.155,174,0.779,176,0.779,179,1.53,183,1.155,187,1.155,206,2.169,213,0.911,263,1.446,278,2.297,279,1.78,280,1.78,281,4.121,282,2.632,283,1.78,284,3.233,285,2.071,286,3.602,287,1.446,288,3.788,289,2.071,290,2.071,291,2.071,292,1.331,293,2.524,294,2.071,295,1.964,296,3.788,297,2.071,298,1.589,299,1.236,300,1.78,301,2.444,302,1.78,303,2.524,304,1.236,305,1.589,306,1.589,307,2.071,308,2.071,309,1.964,310,1.589,311,1.589,312,3.79,313,4.155,314,4.772,315,2.071,316,2.829,317,2.829,318,2.829,319,2.829,320,2.071,321,2.829,322,2.829,323,2.829,324,2.829,325,2.829,326,2.829,327,1.78,328,2.071,329,2.071,330,2.071,331,2.071]],["title/modules/CountriesModule.html",[0,1.206,14,2.388]],["body/modules/CountriesModule.html",[0,1.974,2,1.807,3,1.807,4,2.023,5,2.023,6,1.807,7,2.995,8,2.023,12,0.019,14,4.442,19,2.674,20,2.023,21,2.023,22,0.206,23,0.182,24,0.182,26,2.149,27,0.532,28,0.823,29,2.149,30,1.211,51,0.206,52,0.238,53,0.013,54,0.013,76,0.706,127,1.47,142,1.943,194,2.29,213,1.807,278,4.244,301,4.125,302,3.53,305,3.15,332,3.53,333,3.53,334,4.107,335,4.107,336,3.789,337,3.489,338,4.107,339,4.664,340,3.789,341,2.64,342,3.489,343,2.452,344,4.107]],["title/injectables/CountriesService.html",[196,1.33,301,2.217]],["body/injectables/CountriesService.html",[12,0.019,22,0.101,23,0.089,24,0.089,27,0.417,28,0.403,30,0.593,39,2.113,45,0.885,51,0.101,52,0.117,53,0.008,54,0.008,60,0.311,62,1.682,63,1.578,65,2.872,69,1.495,71,2.413,73,1.07,75,1.822,76,1.06,77,0.867,88,0.839,89,0.935,90,1.161,91,1.052,103,1.948,107,1.919,132,0.885,145,1.21,146,0.862,147,1.21,148,1.21,149,1.21,150,1.511,155,1.914,157,1.21,160,2.01,161,1.21,164,0.757,174,0.757,176,0.757,179,1.867,196,1.151,197,1.052,206,1.495,213,1.415,280,2.763,281,4.158,282,2.581,283,2.763,284,2.993,286,3.575,287,2.244,288,3.964,292,1.293,295,2.738,296,3.749,299,1.201,301,1.919,303,2.466,304,1.201,305,1.543,309,2.397,312,3.886,345,1.729,346,2.011,347,3.518,348,3.452,349,3.08,350,2.011,351,3.215,352,2.011,353,2.011,354,2.011,355,2.011,356,2.011,357,2.011,358,1.729,359,1.543,360,2.011,361,1.729,362,1.543,363,1.543,364,2.011,365,1.543,366,1.404,367,2.763,368,2.763,369,3.943,370,4.587,371,2.763,372,2.011,373,3.215,374,2.466,375,2.763,376,2.763,377,2.763,378,2.466,379,1.729,380,1.729,381,1.543,382,1.729,383,4.311,384,1.543,385,1.543,386,4.016,387,1.201,388,1.543,389,1.543,390,2.763,391,2.011,392,3.08,393,2.011,394,2.011,395,2.011]],["title/classes/Country.html",[52,0.215,213,1.635]],["body/classes/Country.html",[12,0.019,22,0.206,23,0.183,24,0.183,27,0.404,30,1.215,39,1.55,45,2.85,51,0.305,52,0.239,53,0.013,54,0.013,56,0.867,60,0.636,61,1.766,73,1.234,76,1.047,77,1.04,90,1.296,117,2.103,127,1.947,128,3.932,129,2.297,130,2.846,132,1.813,135,2.297,213,2.68,225,3.797,242,3.797,336,2.876,387,3.635,388,4.671,389,4.671,396,2.876,397,4.12,398,4.12,399,4.12,400,4.12,401,3.541,402,3.541]],["title/classes/CreateCommentDto.html",[52,0.215,152,2.217]],["body/classes/CreateCommentDto.html",[12,0.017,22,0.286,23,0.253,24,0.253,51,0.286,52,0.331,53,0.016,54,0.016,56,1.201,152,3.976,403,4.903,404,4.375]],["title/classes/CreateComposerDto.html",[52,0.215,249,2.217]],["body/classes/CreateComposerDto.html",[12,0.017,22,0.286,23,0.253,24,0.253,51,0.286,52,0.331,53,0.016,54,0.016,56,1.201,249,3.976,405,4.903,406,4.375]],["title/classes/CreateCountryDto.html",[52,0.215,284,2.217]],["body/classes/CreateCountryDto.html",[12,0.018,22,0.189,23,0.167,24,0.167,27,0.28,51,0.189,52,0.297,53,0.012,54,0.012,56,0.793,60,0.582,61,1.663,73,1.19,76,1.185,77,0.965,89,3.263,90,1.325,117,2.028,284,3.058,387,4.116,388,5.289,389,5.289,407,5.616,408,2.89,409,4.792,410,4.792,411,6.031,412,3.767,413,3.767,414,3.767,415,3.767,416,5.012,417,5.012,418,2.63]],["title/classes/CreateGenreDto.html",[52,0.215,419,2.217]],["body/classes/CreateGenreDto.html",[12,0.018,22,0.246,23,0.218,24,0.218,27,0.364,51,0.246,52,0.353,53,0.015,54,0.015,56,1.032,60,0.757,61,1.973,73,0.934,76,1.262,77,0.757,89,2.827,90,1.196,117,1.591,120,3.628,409,3.758,410,3.758,416,4.662,417,4.662,418,3.42,419,3.628,420,5.224,421,3.758,422,4.9]],["title/classes/CreateLanguageDto.html",[52,0.215,423,2.217]],["body/classes/CreateLanguageDto.html",[12,0.018,22,0.212,23,0.188,24,0.188,27,0.314,51,0.212,52,0.321,53,0.013,54,0.013,56,0.89,60,0.653,61,1.795,73,1.054,76,1.22,77,0.854,89,3.239,90,1.261,117,1.795,387,4.345,409,4.242,410,4.242,411,5.3,416,4.729,417,4.729,418,2.949,423,3.301,424,5.3,425,3.241,426,4.225,427,5.622,428,5.531,429,5.3,430,4.225,431,4.225,432,4.225]],["title/classes/CreateSongDto.html",[52,0.215,433,2.217]],["body/classes/CreateSongDto.html",[12,0.017,22,0.286,23,0.253,24,0.253,51,0.286,52,0.331,53,0.016,54,0.016,56,1.201,433,3.976,434,4.903,435,4.375]],["title/classes/CreateUserDto.html",[52,0.215,436,2.217]],["body/classes/CreateUserDto.html",[12,0.017,22,0.286,23,0.253,24,0.253,51,0.286,52,0.331,53,0.016,54,0.016,56,1.201,436,3.976,437,4.903,438,4.375]],["title/classes/Genre.html",[52,0.215,439,2.071]],["body/classes/Genre.html",[12,0.018,22,0.238,23,0.211,24,0.211,27,0.443,30,1.403,39,1.791,45,2.626,51,0.327,52,0.276,53,0.014,54,0.014,56,1.002,60,0.735,61,1.937,73,0.907,76,1.121,77,0.922,90,1.081,117,1.545,120,2.84,125,3.059,127,2.137,128,3.328,129,2.653,130,3.122,132,2.094,135,2.653,439,3.636,440,3.321,441,4.758,442,4.09,443,3.321,444,4.09]],["title/controllers/GenreController.html",[140,1.33,445,2.593]],["body/controllers/GenreController.html",[12,0.019,22,0.118,23,0.104,24,0.104,27,0.443,28,0.471,39,2.15,51,0.118,52,0.136,53,0.009,54,0.009,59,1.158,60,0.363,63,1.519,68,3.186,69,1.094,73,1.089,75,1.755,76,0.929,77,0.835,87,1.035,88,0.981,90,1.207,103,2.063,117,1.855,140,0.842,142,0.842,144,1.311,145,1.368,146,1.191,147,1.881,148,1.368,149,1.368,150,1.672,153,2.477,155,2.046,157,0.885,158,2.027,160,2.046,161,0.885,162,2.027,164,0.885,166,2.027,168,2.477,169,1.311,170,1.311,171,1.311,174,0.885,176,0.885,179,1.691,183,1.311,187,1.311,263,1.641,281,4.117,282,2.337,286,3.717,292,1.512,293,2.788,295,2.17,298,1.804,299,1.404,304,1.404,306,1.804,309,2.17,310,1.804,311,1.804,312,3.411,313,4.383,314,5.114,419,3.411,439,2.027,445,2.537,446,2.021,447,2.021,448,2.352,449,2.352,450,2.352,451,2.352,452,2.352,453,3.956,454,2.352,455,2.652,456,2.021,457,2.788,458,1.804,459,2.352,460,2.352,461,2.352,462,2.352,463,2.352,464,2.352,465,2.352,466,2.352,467,2.352]],["title/modules/GenreModule.html",[0,1.206,15,2.388]],["body/modules/GenreModule.html",[0,2.001,2,1.859,3,1.859,4,2.081,5,2.081,6,1.859,7,3.037,8,2.081,12,0.019,15,4.477,19,2.724,20,2.081,21,2.081,22,0.212,23,0.188,24,0.188,26,2.211,27,0.527,28,0.847,29,2.211,30,1.246,51,0.212,52,0.245,53,0.013,54,0.013,76,0.726,127,1.513,142,1.98,194,2.356,337,3.555,339,4.242,342,3.555,343,2.522,439,2.356,443,3.86,445,4.303,455,4.157,456,3.632,458,3.241,468,3.632,469,3.632,470,4.225,471,4.225,472,2.716,473,4.225]],["title/injectables/GenreService.html",[196,1.33,455,2.217]],["body/injectables/GenreService.html",[12,0.019,22,0.137,23,0.121,24,0.121,27,0.466,28,0.548,30,0.807,39,1.03,45,1.204,51,0.137,52,0.159,53,0.01,54,0.01,60,0.423,63,1.703,69,1.897,73,1.155,75,1.967,76,1.079,77,0.936,78,1.91,88,1.142,89,1.897,90,1.249,103,1.996,132,1.204,145,1.535,146,1.093,147,1.535,148,1.535,149,1.535,150,1.535,155,2.069,157,1.535,160,2.247,161,1.535,164,1.535,174,1.03,176,1.03,179,1.897,196,1.46,197,1.432,206,1.273,213,1.204,281,3.935,286,3.378,295,2.91,299,1.633,304,1.633,309,2.434,312,3.225,347,4.145,349,3.74,359,2.099,362,2.099,363,2.099,365,2.099,366,1.91,374,2.099,378,2.099,384,2.099,385,2.099,392,3.74,419,3.449,439,2.274,447,3.506,453,4.147,455,2.434,457,3.129,458,2.099,474,2.352,475,2.737,476,2.737,477,4.079,478,2.737,479,4.079,480,2.737,481,2.737,482,2.737,483,2.737,484,2.737,485,2.737,486,2.737,487,2.737,488,2.737,489,2.737,490,2.737,491,2.352]],["title/classes/Language.html",[52,0.215,492,2.071]],["body/classes/Language.html",[12,0.018,22,0.219,23,0.194,24,0.194,27,0.42,30,1.287,39,1.643,45,3.092,51,0.314,52,0.253,53,0.014,54,0.014,56,0.919,60,0.674,61,1.834,73,1.076,76,1.077,77,0.967,90,1.199,117,1.834,127,2.022,128,3.492,129,2.434,130,2.955,132,1.921,135,2.434,225,3.943,242,3.943,387,3.738,427,4.856,429,4.856,492,3.492,493,3.047,494,5.649,495,4.365,496,4.365,497,3.752,498,3.047,499,3.752]],["title/controllers/LanguagesController.html",[140,1.33,500,2.593]],["body/controllers/LanguagesController.html",[12,0.019,22,0.094,23,0.083,24,0.083,27,0.423,28,0.377,39,1.952,51,0.094,52,0.109,53,0.009,54,0.007,55,1.593,59,2.173,60,0.29,61,0.61,62,1.593,63,1.458,64,1.817,65,2.801,66,1.817,67,1.817,68,2.892,69,0.874,71,2.369,73,0.988,75,1.684,76,0.892,77,0.954,86,1.208,87,0.827,88,0.784,90,1.14,103,1.947,104,1.208,105,0.926,117,1.684,119,1.208,127,1.09,131,0.874,140,0.673,142,0.673,144,1.048,145,1.146,146,1.028,147,1.444,148,1.146,149,1.146,150,1.444,153,1.697,155,1.857,157,0.707,158,1.697,160,1.955,161,0.707,162,1.697,164,0.707,166,1.697,168,2.139,169,1.048,170,1.048,171,1.048,174,0.707,176,0.707,179,1.416,183,1.048,187,1.048,206,2.051,241,1.312,263,1.312,281,4.045,282,2.466,286,3.509,287,1.312,288,3.656,292,1.208,293,1.442,295,1.817,298,1.442,299,1.122,300,1.616,304,1.122,306,1.442,309,1.817,310,1.442,311,1.442,312,3.096,313,3.979,314,4.63,316,2.617,317,2.617,318,2.617,319,2.617,321,2.617,322,2.617,323,2.617,324,2.617,325,2.617,326,2.617,327,1.616,366,2.125,423,3.096,492,2.139,500,2.125,501,1.616,502,1.88,503,1.616,504,1.88,505,3.044,506,1.88,507,1.88,508,1.88,509,1.88,510,1.88,511,1.88,512,3.656,513,1.88,514,2.29,515,1.616,516,2.335,517,1.442,518,1.88,519,3.044,520,1.88,521,5.187,522,0.983,523,1.122,524,1.88,525,1.88,526,1.442,527,1.88,528,1.88,529,1.88,530,1.88,531,1.88,532,1.88,533,1.88,534,1.88,535,1.88,536,1.88]],["title/modules/LanguagesModule.html",[0,1.206,16,2.388]],["body/modules/LanguagesModule.html",[0,1.974,2,1.807,3,1.807,4,2.023,5,2.023,6,1.807,7,2.995,8,2.023,12,0.019,16,4.442,19,2.674,20,2.023,21,2.023,22,0.206,23,0.182,24,0.182,26,2.149,27,0.532,28,0.823,29,2.149,30,1.211,51,0.206,52,0.238,53,0.013,54,0.013,76,0.706,127,1.47,142,1.943,194,2.29,337,3.489,339,4.664,340,3.789,341,2.64,342,3.489,343,2.452,472,2.64,492,2.29,498,3.789,500,4.244,514,4.125,515,3.53,517,3.15,537,3.53,538,3.53,539,4.107,540,4.107,541,4.107]],["title/injectables/LanguagesService.html",[196,1.33,514,2.217]],["body/injectables/LanguagesService.html",[12,0.019,22,0.101,23,0.09,24,0.09,27,0.418,28,0.404,30,0.595,39,2.015,45,0.888,51,0.101,52,0.117,53,0.008,54,0.008,60,0.312,62,1.686,63,1.58,65,2.876,69,1.499,71,2.415,73,1.071,75,1.825,76,1.083,77,0.868,88,0.842,89,1.499,90,1.162,91,1.055,103,1.95,107,1.924,132,0.888,145,1.213,146,0.864,147,1.213,148,1.213,149,1.213,150,1.514,155,1.917,157,1.213,160,2.09,161,1.213,164,0.759,174,0.759,176,0.759,179,1.871,196,1.154,197,1.055,206,1.499,213,0.888,281,4.16,282,2.587,286,3.441,287,2.249,288,3.967,292,1.297,295,2.743,299,1.204,304,1.204,309,2.402,312,3.889,347,3.525,348,3.459,349,3.086,358,1.734,359,1.548,361,1.734,362,1.548,363,1.548,365,1.548,366,1.408,367,2.77,368,2.77,369,3.95,371,2.77,374,2.472,375,2.77,376,2.77,377,2.77,378,2.472,379,1.734,380,1.734,381,1.548,382,1.734,383,4.317,384,1.548,385,1.548,387,1.924,390,3.95,392,3.086,423,2.998,491,1.734,492,1.797,503,2.77,512,3.753,514,1.924,516,2.472,517,1.548,542,1.734,543,2.017,544,2.017,545,3.223,546,2.017,547,2.017,548,2.017,549,2.017,550,2.017,551,2.017,552,2.017,553,2.017,554,2.017,555,4.595,556,2.017,557,3.223,558,2.017,559,2.017,560,2.017,561,2.017]],["title/classes/PageData.html",[52,0.215,91,1.943]],["body/classes/PageData.html",[12,0.019,22,0.156,23,0.138,24,0.138,27,0.333,28,0.625,51,0.305,52,0.334,53,0.013,54,0.011,55,1.631,56,0.656,57,2.004,58,1.372,59,2.21,60,0.482,61,1.707,62,3.008,63,1.617,64,3.788,65,3.126,66,3.788,67,3.788,68,3.538,69,1.45,71,2.782,72,4.253,73,1.209,77,1.069,85,3.132,86,2.004,87,1.372,88,1.301,89,1.45,90,0.565,91,2.348,92,2.176,93,2.176,94,2.176,95,2.176,96,2.176,97,2.176,98,2.176,99,2.004,100,2.176,101,2.176,102,3.132,103,0.965,104,2.004,105,2.21,106,2.176,107,1.861,108,2.176,562,3.118,563,3.118,564,3.118,565,3.118,566,3.118,567,3.118]],["title/classes/PostResponse.html",[52,0.215,88,1.55]],["body/classes/PostResponse.html",[12,0.019,22,0.172,23,0.152,24,0.152,27,0.357,28,0.688,51,0.317,52,0.348,53,0.013,54,0.012,55,1.797,56,0.723,57,2.208,58,1.511,59,2.367,60,0.53,61,1.8,62,2.514,64,3.585,65,2.958,66,3.585,67,3.585,68,3.348,69,1.597,71,2.75,72,4.192,73,0.654,77,0.976,85,3.354,86,2.208,87,1.511,88,2.005,89,2.578,90,0.87,91,1.797,92,2.397,93,2.397,94,2.397,95,2.397,96,2.397,97,2.397,98,2.397,99,2.208,100,2.397,101,2.397,102,3.354,103,1.062,104,2.208,105,2.367,106,2.397,107,2.05,108,2.397,568,3.434]],["title/classes/Song.html",[52,0.215,114,1.83]],["body/classes/Song.html",[12,0.019,22,0.116,23,0.103,24,0.103,27,0.398,30,0.681,39,0.869,45,2.922,51,0.22,52,0.134,53,0.009,54,0.009,56,0.486,60,0.357,61,1.164,63,1.913,71,1.349,73,1.297,77,1.116,90,1.232,105,2.916,110,2.299,114,2.164,116,3.287,117,2.209,118,3.742,119,3.446,120,4.228,122,4.84,125,4.039,127,1.284,128,3.832,129,1.288,130,1.876,131,1.075,132,1.017,134,1.986,135,1.288,136,3.742,209,2.761,213,1.934,238,2.751,439,3.3,492,2.45,569,1.613,570,4.394,571,4.394,572,4.394,573,3.777,574,4.394,575,4.394,576,4.394,577,4.394,578,4.394,579,4.394,580,4.394,581,2.31,582,2.31,583,2.31,584,2.31,585,2.31,586,2.31,587,2.31,588,2.31,589,2.31,590,2.31,591,2.31,592,2.31,593,2.31,594,2.31,595,2.31,596,2.31,597,1.986,598,1.613,599,1.986]],["title/controllers/SongController.html",[140,1.33,600,2.593]],["body/controllers/SongController.html",[12,0.019,22,0.167,23,0.148,24,0.148,27,0.441,28,0.669,51,0.167,52,0.194,53,0.011,54,0.011,60,0.516,63,1.667,73,1.192,75,1.925,76,1.02,77,0.916,90,1.254,103,1.935,114,1.645,117,2.031,140,1.195,142,1.195,144,1.861,145,1.773,146,1.263,147,2.232,148,1.773,149,1.773,150,1.773,153,3.044,155,2.239,157,1.256,158,2.627,160,2.324,161,1.256,162,2.627,164,1.256,166,2.627,168,2.627,169,1.861,170,1.861,171,1.861,174,1.256,176,1.256,178,2.33,179,1.553,180,2.33,183,1.861,185,2.561,187,1.861,433,3.875,600,3.289,601,2.87,602,2.87,603,3.339,604,3.339,605,3.339,606,3.339,607,4.38,608,3.339,609,3.259,610,2.87,611,3.614,612,3.339,613,3.339,614,3.339,615,3.339,616,3.339,617,3.339]],["title/modules/SongModule.html",[0,1.206,17,2.388]],["body/modules/SongModule.html",[0,2.046,2,1.947,3,1.947,4,2.179,5,2.179,6,1.947,7,3.105,8,2.179,12,0.019,17,4.533,19,2.807,20,2.179,21,2.179,22,0.222,23,0.196,24,0.196,26,2.314,27,0.512,28,0.886,29,2.314,30,1.304,51,0.222,52,0.257,53,0.014,54,0.014,76,0.76,114,2.179,127,1.584,142,2.04,194,2.466,598,3.977,600,4.399,609,4.209,610,3.802,618,3.802,619,3.802,620,4.424,621,4.424,622,4.424,623,4.424]],["title/injectables/SongService.html",[196,1.33,609,2.217]],["body/injectables/SongService.html",[12,0.019,22,0.177,23,0.157,24,0.157,27,0.418,28,0.708,51,0.177,52,0.205,53,0.012,54,0.012,60,0.546,63,1.71,71,2.641,73,1.217,75,1.974,76,1.045,77,0.939,90,1.157,103,1.976,114,3.147,145,1.846,146,1.314,147,2.289,148,1.846,149,1.846,150,1.846,155,2.427,157,1.846,160,2.366,161,1.846,164,1.846,174,1.33,176,1.33,196,1.756,197,1.849,204,4.459,205,2.468,206,1.644,207,2.468,208,2.468,433,3.813,602,4.215,607,4.358,609,2.927,611,3.762,624,3.039,625,3.535,626,3.535,627,3.535,628,3.535,629,3.535]],["title/classes/UpdateCommentDto.html",[52,0.215,165,2.388]],["body/classes/UpdateCommentDto.html",[12,0.018,22,0.267,23,0.237,24,0.237,27,0.476,51,0.267,52,0.309,53,0.016,54,0.016,56,1.123,58,2.817,131,2.481,146,1.43,152,3.184,165,4.115,175,4.092,404,4.092,522,2.791,523,3.184,630,4.586,631,6.402]],["title/classes/UpdateComposerDto.html",[52,0.215,254,2.388]],["body/classes/UpdateComposerDto.html",[12,0.018,22,0.267,23,0.237,24,0.237,27,0.476,51,0.267,52,0.309,53,0.016,54,0.016,56,1.123,58,2.817,131,2.481,146,1.43,249,3.184,254,4.115,258,4.092,406,4.092,522,2.791,523,3.184,632,4.586,633,6.402]],["title/classes/UpdateCountryDto.html",[52,0.215,296,2.388]],["body/classes/UpdateCountryDto.html",[12,0.018,22,0.268,23,0.238,24,0.238,27,0.477,51,0.268,52,0.311,53,0.016,54,0.016,56,1.128,58,2.824,87,2.357,146,1.436,284,3.197,296,4.125,303,4.109,408,4.109,522,2.802,634,4.605,635,6.418]],["title/classes/UpdateGenreDto.html",[52,0.215,453,2.388]],["body/classes/UpdateGenreDto.html",[12,0.018,22,0.268,23,0.238,24,0.238,27,0.477,51,0.268,52,0.311,53,0.016,54,0.016,56,1.128,58,2.824,87,2.357,146,1.436,419,3.197,421,4.109,453,4.125,457,4.109,522,2.802,636,4.605,637,6.418]],["title/classes/UpdateLanguageDto.html",[52,0.215,512,2.388]],["body/classes/UpdateLanguageDto.html",[12,0.018,22,0.268,23,0.238,24,0.238,27,0.477,51,0.268,52,0.311,53,0.016,54,0.016,56,1.128,58,2.824,87,2.357,146,1.436,423,3.197,425,4.109,512,4.125,516,4.109,522,2.802,638,4.605,639,6.418]],["title/classes/UpdateSongDto.html",[52,0.215,607,2.388]],["body/classes/UpdateSongDto.html",[12,0.018,22,0.267,23,0.237,24,0.237,27,0.476,51,0.267,52,0.309,53,0.016,54,0.016,56,1.123,58,2.817,131,2.481,146,1.43,433,3.184,435,4.092,522,2.791,523,3.184,607,4.115,611,4.092,640,4.586,641,6.402]],["title/classes/UpdateUserDto.html",[52,0.215,642,2.388]],["body/classes/UpdateUserDto.html",[12,0.018,22,0.267,23,0.237,24,0.237,27,0.476,51,0.267,52,0.309,53,0.016,54,0.016,56,1.123,58,2.817,131,2.481,146,1.43,436,3.184,438,4.092,522,2.791,523,3.184,642,4.115,643,4.586,644,6.402,645,4.092]],["title/classes/User.html",[52,0.215,116,1.943]],["body/classes/User.html",[12,0.019,22,0.117,23,0.104,24,0.104,27,0.329,30,0.689,39,0.879,45,3.221,51,0.222,52,0.135,53,0.009,54,0.009,56,0.492,60,0.361,61,1.174,63,1.016,73,1.313,77,1.102,90,1.292,105,1.781,110,2.314,114,2.453,116,2.314,117,2.236,118,2.523,119,2.324,120,4.18,122,4.495,125,3.82,127,1.294,128,3.874,129,1.302,130,1.891,131,1.086,132,1.028,133,1.791,135,1.302,136,2.523,211,3.802,212,3.802,213,1.947,214,3.802,215,3.802,216,3.802,217,3.802,218,3.802,219,3.802,221,3.802,225,3.088,226,4.281,227,3.107,232,2.773,233,3.107,234,3.107,238,4.371,239,3.802,241,3.088,242,3.088,573,3.802,646,1.63,647,4.424,648,4.424,649,4.424,650,4.424,651,2.335,652,2.335,653,2.335,654,2.335,655,2.335,656,2.335,657,2.335,658,2.335,659,2.335,660,2.335,661,2.335,662,2.335,663,2.335,664,2.335,665,2.335,666,2.007,667,1.63,668,2.007]],["title/controllers/UserController.html",[140,1.33,669,2.593]],["body/controllers/UserController.html",[12,0.019,22,0.167,23,0.148,24,0.148,27,0.441,28,0.669,51,0.167,52,0.194,53,0.011,54,0.011,60,0.516,63,1.667,73,1.192,75,1.925,76,1.02,77,0.916,90,1.254,103,1.935,116,1.747,117,2.031,140,1.195,142,1.195,144,1.861,145,1.773,146,1.263,147,2.232,148,1.773,149,1.773,150,1.773,153,3.044,155,2.239,157,1.256,158,2.627,160,2.324,161,1.256,162,2.627,164,1.256,166,2.627,168,2.627,169,1.861,170,1.861,171,1.861,174,1.256,176,1.256,178,2.33,179,1.553,180,2.33,183,1.861,185,2.561,187,1.861,436,3.875,642,4.38,645,3.614,669,3.289,670,2.87,671,2.87,672,3.339,673,3.339,674,3.339,675,3.339,676,3.339,677,3.259,678,2.87,679,3.339,680,3.339,681,3.339,682,3.339,683,3.339,684,3.339]],["title/modules/UserModule.html",[0,1.206,18,2.388]],["body/modules/UserModule.html",[0,2.046,2,1.947,3,1.947,4,2.179,5,2.179,6,1.947,7,3.105,8,2.179,12,0.019,18,4.533,19,2.807,20,2.179,21,2.179,22,0.222,23,0.196,24,0.196,26,2.314,27,0.512,28,0.886,29,2.314,30,1.304,51,0.222,52,0.257,53,0.014,54,0.014,76,0.76,116,2.314,127,1.584,142,2.04,194,2.466,667,3.977,669,4.399,677,4.209,678,3.802,685,3.802,686,3.802,687,4.424,688,4.424,689,4.424,690,4.424]],["title/injectables/UserService.html",[196,1.33,677,2.217]],["body/injectables/UserService.html",[12,0.019,22,0.177,23,0.157,24,0.157,27,0.418,28,0.708,51,0.177,52,0.205,53,0.012,54,0.012,60,0.546,63,1.71,71,2.641,73,1.217,75,1.974,76,1.045,77,0.939,90,1.157,103,1.976,116,3.342,145,1.846,146,1.314,147,2.289,148,1.846,149,1.846,150,1.846,155,2.427,157,1.846,160,2.366,161,1.846,164,1.846,174,1.33,176,1.33,196,1.756,197,1.849,204,4.459,205,2.468,206,1.644,207,2.468,208,2.468,436,3.813,642,4.358,645,3.762,671,4.215,677,2.927,691,3.039,692,3.535,693,3.535,694,3.535,695,3.535,696,3.535]],["title/coverage.html",[697,3.892]],["body/coverage.html",[6,1.013,12,0.019,24,0.102,25,1.766,40,1.766,52,0.422,53,0.009,54,0.009,55,1.205,57,3.178,59,1.134,77,0.356,88,0.96,91,1.205,99,3.178,110,1.205,111,2.496,114,1.134,116,1.205,138,1.607,140,2.116,141,1.607,143,1.979,152,1.374,165,1.48,172,1.374,196,2.116,198,1.979,206,1.071,209,1.284,210,2.496,213,1.013,232,5.87,244,1.607,246,1.607,247,1.979,249,1.374,254,1.48,256,1.374,272,1.979,278,1.607,279,1.979,284,1.374,296,1.48,301,1.374,336,1.607,337,1.48,340,1.607,341,2.299,342,1.48,343,2.134,345,1.979,396,2.496,403,1.979,404,2.743,405,1.979,406,2.743,407,1.979,408,2.743,419,1.374,420,1.979,421,2.743,423,1.374,424,1.979,425,2.743,433,1.374,434,1.979,435,2.743,436,1.374,437,1.979,438,2.743,439,1.284,440,2.496,443,1.607,445,1.607,446,1.979,453,1.48,455,1.374,472,2.299,474,1.979,492,1.284,493,2.496,498,1.607,500,1.607,501,1.979,512,1.48,514,1.374,542,1.979,569,2.496,598,1.607,600,1.607,601,1.979,607,1.48,609,1.374,624,1.979,630,1.979,632,1.979,634,1.979,636,1.979,638,1.979,640,1.979,642,1.48,643,1.979,646,2.496,667,1.607,669,1.607,670,1.979,677,1.374,691,1.979,697,1.766,698,2.302,699,2.302,700,2.302,701,6.532,702,7.307,703,4.346,704,1.766,705,1.766,706,1.766,707,4.384,708,4.384,709,5.352,710,4.384,711,1.979,712,6.111,713,4.384,714,2.302,715,2.302,716,2.302,717,2.302,718,2.302]],["title/dependencies.html",[3,1.967,719,2.665]],["body/dependencies.html",[3,2.164,12,0.019,28,0.985,30,1.45,52,0.353,53,0.015,54,0.015,87,2.164,131,2.287,132,2.164,418,3.433,523,2.935,720,6.619,721,4.918,722,4.918,723,4.918,724,4.918,725,4.918,726,4.918,727,4.918,728,4.918,729,4.918,730,4.918,731,4.918,732,4.918,733,4.918,734,4.918,735,4.918,736,4.918,737,4.918,738,4.918,739,4.918,740,4.918]],["title/miscellaneous/functions.html",[741,1.85,742,3.841]],["body/miscellaneous/functions.html",[6,2.809,12,0.018,53,0.014,54,0.014,60,0.702,63,1.795,65,2.856,71,2.53,75,2.072,76,1.097,77,0.895,78,3.173,90,1.05,155,2.285,160,2.076,286,3.559,288,3.727,341,2.922,343,2.713,472,2.922,703,5.448,704,4.447,705,4.447,706,4.447,711,3.907,741,2.713,742,3.907,743,4.545,744,3.907,745,3.907,746,3.907,747,4.545,748,5.798,749,6.384,750,4.545,751,4.545]],["title/index.html",[60,0.479,752,3.1,753,3.1]],["body/index.html",[12,0.018,23,0.186,53,0.013,54,0.013,112,3.21,526,3.21,697,3.21,754,4.185,755,4.185,756,5.496,757,4.185,758,4.185,759,4.185,760,4.185,761,4.185,762,4.185,763,6.137,764,4.185,765,4.185,766,4.185,767,4.185,768,6.137,769,7.08,770,4.185,771,4.185,772,4.185,773,6.947,774,4.185,775,4.185,776,5.496,777,4.185,778,4.185,779,4.185,780,4.185,781,5.496,782,5.496,783,4.185,784,4.185,785,4.185,786,5.496,787,5.496,788,4.185,789,4.185,790,4.185,791,4.185,792,4.185,793,3.598,794,4.185,795,4.185,796,4.185,797,4.185,798,4.185,799,4.185,800,4.185,801,4.185,802,4.185,803,4.185,804,4.185,805,4.185,806,4.185,807,4.185,808,4.185,809,4.185,810,3.598]],["title/modules.html",[2,2.233]],["body/modules.html",[1,3.524,2,2.222,11,3.246,12,0.015,13,3.246,14,3.246,15,3.246,16,3.246,17,3.246,18,3.246,53,0.015,54,0.015,793,6.41,811,7.458,812,7.458,813,7.458]],["title/overview.html",[814,4.362]],["body/overview.html",[0,1.252,1,5.234,2,1.697,3,1.697,4,1.899,5,1.899,6,1.697,7,1.899,8,1.899,9,3.314,10,3.314,11,4.233,12,0.018,13,4.233,14,4.233,15,4.233,16,4.233,17,4.233,18,4.233,19,2.563,20,1.899,21,1.899,53,0.013,54,0.013,56,0.812,142,1.38,172,3.516,189,3.314,190,3.314,197,2.017,256,3.516,266,3.314,267,3.314,301,3.516,332,3.314,333,3.314,455,3.516,468,3.314,469,3.314,514,3.516,537,3.314,538,3.314,609,3.516,618,3.314,619,3.314,677,3.516,685,3.314,686,3.314,814,3.314,815,3.855,816,5.204,817,3.855]],["title/properties.html",[61,1.451,719,2.665]],["body/properties.html",[12,0.018,53,0.016,54,0.016,61,1.852,112,4.375,526,4.375,810,4.903,818,5.704,819,5.704,820,5.704]],["title/miscellaneous/typealiases.html",[741,1.85,821,4.469]],["body/miscellaneous/typealiases.html",[12,0.015,53,0.015,54,0.015,60,0.786,77,0.786,111,3.552,130,3.87,137,5.348,210,3.552,243,5.348,396,3.552,401,5.348,440,3.552,442,5.348,493,3.552,497,5.348,569,3.552,597,5.348,646,3.552,666,5.348,741,3.037,822,5.088,823,4.374,824,4.374,825,4.374,826,4.374,827,4.374,828,4.374,829,4.374]],["title/miscellaneous/variables.html",[741,1.85,830,3.841]],["body/miscellaneous/variables.html",[12,0.018,25,2.915,40,3.953,41,3.266,53,0.012,54,0.012,60,0.587,77,0.903,111,2.652,138,3.597,139,3.266,210,2.652,241,5.075,244,3.597,245,3.266,336,3.597,337,3.312,340,3.597,341,2.443,342,3.312,343,2.268,381,5.578,396,2.652,402,3.266,440,2.652,443,3.597,444,3.266,472,2.443,493,2.652,498,3.597,499,3.266,569,2.652,598,3.597,599,3.266,646,2.652,667,3.597,668,3.266,703,5.183,704,2.915,705,2.915,706,2.915,741,2.268,744,3.266,745,3.266,746,3.266,823,3.266,824,3.266,825,3.266,826,3.266,827,3.266,828,3.266,829,3.266,830,3.266,831,3.8,832,5.847,833,5.847,834,3.8,835,5.847,836,5.847,837,5.847,838,3.8,839,3.8]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":232,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{},"coverage.html":{}}}],["0.0.1",{"_index":819,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":369,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["10.0.0",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["16.3.1",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":817,"title":{},"body":{"overview.html":{}}}],["3",{"_index":427,"title":{},"body":{"classes/CreateLanguageDto.html":{},"classes/Language.html":{}}}],["5.9.1",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":816,"title":{},"body":{"overview.html":{}}}],["7.1.14",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["7.6.4",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":815,"title":{},"body":{"overview.html":{}}}],["9]{1,4}\\s)?[0",{"_index":233,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["9]{5,15}$/gi",{"_index":234,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["action",{"_index":204,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["added",{"_index":366,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["address",{"_index":211,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["adds",{"_index":205,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["admin",{"_index":647,"title":{},"body":{"classes/User.html":{}}}],["aliases",{"_index":822,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allof",{"_index":104,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["amazing",{"_index":794,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":518,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["apicreatedresponse",{"_index":519,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["apiextramodels",{"_index":520,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["apiextramodels(language",{"_index":534,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["apihideproperty",{"_index":85,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["apiokresponse",{"_index":521,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["apitags",{"_index":306,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["apitags(\"countries",{"_index":308,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apitags(\"genre",{"_index":460,"title":{},"body":{"controllers/GenreController.html":{}}}],["apitags('languages",{"_index":525,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["app",{"_index":771,"title":{},"body":{"index.html":{}}}],["appdb",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":762,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apppaginatedresponse",{"_index":55,"title":{"classes/AppPaginatedResponse.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"coverage.html":{}}}],["appresponse",{"_index":59,"title":{"classes/AppResponse.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"coverage.html":{}}}],["appresponse:19",{"_index":84,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["appresponseschema",{"_index":100,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["approved",{"_index":570,"title":{},"body":{"classes/Song.html":{}}}],["approver",{"_index":571,"title":{},"body":{"classes/Song.html":{}}}],["array",{"_index":102,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["async",{"_index":281,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["audiofile",{"_index":572,"title":{},"body":{"classes/Song.html":{}}}],["author",{"_index":112,"title":{},"body":{"classes/Comment.html":{},"index.html":{},"properties.html":{}}}],["await",{"_index":312,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["b[\\w\\d\\w\\d]+(?:@(?:[\\w\\d\\w\\d]+(?:\\.(?:[\\w\\d\\w\\d]+))))\\b/gi",{"_index":227,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["backers",{"_index":795,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":358,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["badrequestexception('query",{"_index":380,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["base",{"_index":101,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["body",{"_index":168,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":238,"title":{},"body":{"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":813,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":811,"title":{},"body":{"modules.html":{}}}],["building",{"_index":757,"title":{},"body":{"index.html":{}}}],["characters",{"_index":428,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["city",{"_index":212,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["class",{"_index":52,"title":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":56,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_commentmodule",{"_index":189,"title":{},"body":{"modules/CommentModule.html":{},"overview.html":{}}}],["cluster_commentmodule_providers",{"_index":190,"title":{},"body":{"modules/CommentModule.html":{},"overview.html":{}}}],["cluster_composermodule",{"_index":266,"title":{},"body":{"modules/ComposerModule.html":{},"overview.html":{}}}],["cluster_composermodule_providers",{"_index":267,"title":{},"body":{"modules/ComposerModule.html":{},"overview.html":{}}}],["cluster_countriesmodule",{"_index":332,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_providers",{"_index":333,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_genremodule",{"_index":468,"title":{},"body":{"modules/GenreModule.html":{},"overview.html":{}}}],["cluster_genremodule_providers",{"_index":469,"title":{},"body":{"modules/GenreModule.html":{},"overview.html":{}}}],["cluster_languagesmodule",{"_index":537,"title":{},"body":{"modules/LanguagesModule.html":{},"overview.html":{}}}],["cluster_languagesmodule_providers",{"_index":538,"title":{},"body":{"modules/LanguagesModule.html":{},"overview.html":{}}}],["cluster_songmodule",{"_index":618,"title":{},"body":{"modules/SongModule.html":{},"overview.html":{}}}],["cluster_songmodule_providers",{"_index":619,"title":{},"body":{"modules/SongModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":685,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":686,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":387,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Language.html":{},"injectables/LanguagesService.html":{}}}],["collection",{"_index":135,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["comment",{"_index":110,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Song.html":{},"classes/User.html":{},"coverage.html":{}}}],["comment.controller",{"_index":192,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.dto",{"_index":175,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/UpdateCommentDto.html":{}}}],["comment.dto.ts",{"_index":404,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["comment.name",{"_index":195,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.service",{"_index":173,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{}}}],["commentcontroller",{"_index":141,"title":{"controllers/CommentController.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"coverage.html":{}}}],["commentdocument",{"_index":137,"title":{},"body":{"classes/Comment.html":{},"miscellaneous/typealiases.html":{}}}],["commentmodule",{"_index":11,"title":{"modules/CommentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules.html":{},"overview.html":{}}}],["comments",{"_index":573,"title":{},"body":{"classes/Song.html":{},"classes/User.html":{}}}],["commentschema",{"_index":138,"title":{},"body":{"classes/Comment.html":{},"modules/CommentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commentservice",{"_index":172,"title":{"injectables/CommentService.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"coverage.html":{},"overview.html":{}}}],["components/factory/controller",{"_index":338,"title":{},"body":{"modules/CountriesModule.html":{}}}],["composer",{"_index":209,"title":{"classes/Composer.html":{}},"body":{"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"classes/Song.html":{},"coverage.html":{}}}],["composer.controller",{"_index":269,"title":{},"body":{"modules/ComposerModule.html":{}}}],["composer.dto",{"_index":258,"title":{},"body":{"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"classes/UpdateComposerDto.html":{}}}],["composer.dto.ts",{"_index":406,"title":{},"body":{"classes/CreateComposerDto.html":{},"classes/UpdateComposerDto.html":{},"coverage.html":{}}}],["composer.name",{"_index":271,"title":{},"body":{"modules/ComposerModule.html":{}}}],["composer.service",{"_index":257,"title":{},"body":{"controllers/ComposerController.html":{},"modules/ComposerModule.html":{}}}],["composercontroller",{"_index":246,"title":{"controllers/ComposerController.html":{}},"body":{"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"coverage.html":{}}}],["composerdocument",{"_index":243,"title":{},"body":{"classes/Composer.html":{},"miscellaneous/typealiases.html":{}}}],["composermodule",{"_index":13,"title":{"modules/ComposerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ComposerModule.html":{},"modules.html":{},"overview.html":{}}}],["composers",{"_index":574,"title":{},"body":{"classes/Song.html":{}}}],["composerschema",{"_index":244,"title":{},"body":{"classes/Composer.html":{},"modules/ComposerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["composerservice",{"_index":256,"title":{"injectables/ComposerService.html":{}},"body":{"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"coverage.html":{},"overview.html":{}}}],["conditions",{"_index":386,"title":{},"body":{"injectables/CountriesService.html":{}}}],["const",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["constructor",{"_index":69,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["constructor(countrymodel",{"_index":346,"title":{},"body":{"injectables/CountriesService.html":{}}}],["constructor(data",{"_index":92,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["constructor(genremodel",{"_index":475,"title":{},"body":{"injectables/GenreService.html":{}}}],["constructor(languagemodel",{"_index":543,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["constructor(page",{"_index":70,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["constructor(private",{"_index":178,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["contributions",{"_index":648,"title":{},"body":{"classes/User.html":{}}}],["contributor",{"_index":575,"title":{},"body":{"classes/Song.html":{}}}],["controller",{"_index":140,"title":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('comment",{"_index":177,"title":{},"body":{"controllers/CommentController.html":{}}}],["controller('composer",{"_index":259,"title":{},"body":{"controllers/ComposerController.html":{}}}],["controller('countries",{"_index":307,"title":{},"body":{"controllers/CountriesController.html":{}}}],["controller('genre",{"_index":459,"title":{},"body":{"controllers/GenreController.html":{}}}],["controller('languages",{"_index":524,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["controller('song",{"_index":612,"title":{},"body":{"controllers/SongController.html":{}}}],["controller('user",{"_index":679,"title":{},"body":{"controllers/UserController.html":{}}}],["controller_method_wrapper",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controllermethodprovider",{"_index":337,"title":{},"body":{"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controllermethodwrapper",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["controllermethodwrapper(method",{"_index":747,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controllers",{"_index":142,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["count",{"_index":62,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["countries",{"_index":280,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["countries.controller",{"_index":335,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countries.service",{"_index":302,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["countriescontroller",{"_index":278,"title":{"controllers/CountriesController.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{}}}],["countriesmodule",{"_index":14,"title":{"modules/CountriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules.html":{},"overview.html":{}}}],["countriesservice",{"_index":301,"title":{"injectables/CountriesService.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"coverage.html":{},"overview.html":{}}}],["country",{"_index":213,"title":{"classes/Country.html":{}},"body":{"classes/Composer.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"classes/User.html":{},"coverage.html":{}}}],["country.dto",{"_index":303,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/UpdateCountryDto.html":{}}}],["country.dto.ts",{"_index":408,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["country.dto.ts:10",{"_index":414,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:14",{"_index":415,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:18",{"_index":413,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:6",{"_index":412,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.name",{"_index":344,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countrycount",{"_index":370,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countrydocument",{"_index":401,"title":{},"body":{"classes/Country.html":{},"miscellaneous/typealiases.html":{}}}],["countrymodel",{"_index":351,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countryschema",{"_index":336,"title":{},"body":{"modules/CountriesModule.html":{},"classes/Country.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":697,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":146,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":180,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["create(createcommentdto",{"_index":151,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["create(createcomposerdto",{"_index":248,"title":{},"body":{"controllers/ComposerController.html":{},"injectables/ComposerService.html":{}}}],["create(createcountrydto",{"_index":283,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["create(creategenredto",{"_index":447,"title":{},"body":{"controllers/GenreController.html":{},"injectables/GenreService.html":{}}}],["create(createlanguagedto",{"_index":503,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["create(createsongdto",{"_index":602,"title":{},"body":{"controllers/SongController.html":{},"injectables/SongService.html":{}}}],["create(createuserdto",{"_index":671,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createcommentdto",{"_index":152,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["createcomposerdto",{"_index":249,"title":{"classes/CreateComposerDto.html":{}},"body":{"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"classes/CreateComposerDto.html":{},"classes/UpdateComposerDto.html":{},"coverage.html":{}}}],["createcountrydto",{"_index":284,"title":{"classes/CreateCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["created",{"_index":505,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["creategenredto",{"_index":419,"title":{"classes/CreateGenreDto.html":{}},"body":{"classes/CreateGenreDto.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/UpdateGenreDto.html":{},"coverage.html":{}}}],["createlanguagedto",{"_index":423,"title":{"classes/CreateLanguageDto.html":{}},"body":{"classes/CreateLanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["createsongdto",{"_index":433,"title":{"classes/CreateSongDto.html":{}},"body":{"classes/CreateSongDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":436,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["data",{"_index":68,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["dbname",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":117,"title":{},"body":{"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":241,"title":{},"body":{"classes/Composer.html":{},"controllers/LanguagesController.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":300,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["defaultvaluepipe(1",{"_index":317,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["defaultvaluepipe(20",{"_index":319,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["defined",{"_index":73,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":171,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":162,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":491,"title":{},"body":{"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":526,"title":{},"body":{"controllers/LanguagesController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":772,"title":{},"body":{"index.html":{}}}],["dial_code",{"_index":389,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["doc",{"_index":363,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["doc.save",{"_index":365,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["documentation",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["dotenv/config",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/create",{"_index":174,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":176,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":783,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":758,"title":{},"body":{"index.html":{}}}],["email",{"_index":214,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["emoji",{"_index":388,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["empty",{"_index":411,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{}}}],["empty'})@length(3",{"_index":426,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["entities/comment.entity",{"_index":193,"title":{},"body":{"modules/CommentModule.html":{}}}],["entities/composer.entity",{"_index":270,"title":{},"body":{"modules/ComposerModule.html":{}}}],["entities/country.entity",{"_index":305,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{}}}],["entities/genre.entity",{"_index":458,"title":{},"body":{"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{}}}],["entities/language.entity",{"_index":517,"title":{},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{}}}],["entities/song.entity",{"_index":622,"title":{},"body":{"modules/SongModule.html":{}}}],["entities/user.entity",{"_index":689,"title":{},"body":{"modules/UserModule.html":{}}}],["env",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errormessage",{"_index":748,"title":{},"body":{"miscellaneous/functions.html":{}}}],["example",{"_index":768,"title":{},"body":{"index.html":{}}}],["exec",{"_index":378,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["export",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":58,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{}}}],["false",{"_index":122,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["file",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filter",{"_index":383,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["find",{"_index":374,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["findall",{"_index":147,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(page",{"_index":287,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["findall(q",{"_index":479,"title":{},"body":{"injectables/GenreService.html":{}}}],["findone",{"_index":148,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":183,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":157,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["firstname",{"_index":215,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["framework",{"_index":756,"title":{},"body":{"index.html":{}}}],["function",{"_index":99,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"coverage.html":{}}}],["functions",{"_index":742,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["genre",{"_index":439,"title":{"classes/Genre.html":{}},"body":{"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Song.html":{},"coverage.html":{}}}],["genre.controller",{"_index":471,"title":{},"body":{"modules/GenreModule.html":{}}}],["genre.dto",{"_index":457,"title":{},"body":{"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/UpdateGenreDto.html":{}}}],["genre.dto.ts",{"_index":421,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/UpdateGenreDto.html":{},"coverage.html":{}}}],["genre.dto.ts:6",{"_index":422,"title":{},"body":{"classes/CreateGenreDto.html":{}}}],["genre.name",{"_index":473,"title":{},"body":{"modules/GenreModule.html":{}}}],["genre.service",{"_index":456,"title":{},"body":{"controllers/GenreController.html":{},"modules/GenreModule.html":{}}}],["genrecontroller",{"_index":445,"title":{"controllers/GenreController.html":{}},"body":{"controllers/GenreController.html":{},"modules/GenreModule.html":{},"coverage.html":{}}}],["genredocument",{"_index":442,"title":{},"body":{"classes/Genre.html":{},"miscellaneous/typealiases.html":{}}}],["genremodel",{"_index":477,"title":{},"body":{"injectables/GenreService.html":{}}}],["genremodule",{"_index":15,"title":{"modules/GenreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GenreModule.html":{},"modules.html":{},"overview.html":{}}}],["genreschema",{"_index":443,"title":{},"body":{"classes/Genre.html":{},"modules/GenreModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["genreservice",{"_index":455,"title":{"injectables/GenreService.html":{}},"body":{"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"coverage.html":{},"overview.html":{}}}],["get(':id",{"_index":158,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["get('search",{"_index":293,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["get('search')@apiokresponse",{"_index":510,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["getschemapath",{"_index":86,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["getschemapath(appresponse",{"_index":527,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["getschemapath(array",{"_index":108,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["getschemapath(base",{"_index":106,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["getschemapath(postresponse",{"_index":529,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["getting",{"_index":752,"title":{"index.html":{}},"body":{}}],["grow",{"_index":790,"title":{},"body":{"index.html":{}}}],["here",{"_index":801,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":807,"title":{},"body":{"index.html":{}}}],["hydrateddocument",{"_index":130,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":160,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["id_method_wrapper",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["idmethodprovider",{"_index":342,"title":{},"body":{"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["idmethodwrapper",{"_index":705,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["idmethodwrapper(method",{"_index":750,"title":{},"body":{"miscellaneous/functions.html":{}}}],["idrequest",{"_index":349,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["import",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":60,"title":{"index.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":83,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["inject",{"_index":299,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["inject('controller_method_wrapper",{"_index":310,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["inject('id_method_wrapper",{"_index":362,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["inject('paginated_method_wrapper",{"_index":361,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["injectable",{"_index":196,"title":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":197,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":359,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["injectmodel(country.name",{"_index":360,"title":{},"body":{"injectables/CountriesService.html":{}}}],["injectmodel(genre.name",{"_index":484,"title":{},"body":{"injectables/GenreService.html":{}}}],["injectmodel(language.name",{"_index":553,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["installation",{"_index":767,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":770,"title":{},"body":{"index.html":{}}}],["isnotempty",{"_index":417,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{}}}],["isstring",{"_index":416,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{}}}],["isstring({message",{"_index":409,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{}}}],["items",{"_index":107,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["join",{"_index":797,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":804,"title":{},"body":{"index.html":{}}}],["langauages",{"_index":390,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["language",{"_index":492,"title":{"classes/Language.html":{}},"body":{"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"coverage.html":{}}}],["language.dto",{"_index":516,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{}}}],["language.dto.ts",{"_index":425,"title":{},"body":{"classes/CreateLanguageDto.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["language.dto.ts:11",{"_index":431,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["language.dto.ts:7",{"_index":430,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["language.name",{"_index":541,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["languagecount",{"_index":555,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["languagedocument",{"_index":497,"title":{},"body":{"classes/Language.html":{},"miscellaneous/typealiases.html":{}}}],["languagemodel",{"_index":545,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["languages",{"_index":502,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["languages.controller",{"_index":540,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["languages.service",{"_index":515,"title":{},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{}}}],["languageschema",{"_index":498,"title":{},"body":{"classes/Language.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["languagescontroller",{"_index":500,"title":{"controllers/LanguagesController.html":{}},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"coverage.html":{}}}],["languagesmodule",{"_index":16,"title":{"modules/LanguagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LanguagesModule.html":{},"modules.html":{},"overview.html":{}}}],["languagesservice",{"_index":514,"title":{"injectables/LanguagesService.html":{}},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"coverage.html":{},"overview.html":{}}}],["lastname",{"_index":216,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":429,"title":{},"body":{"classes/CreateLanguageDto.html":{},"classes/Language.html":{}}}],["length(3",{"_index":432,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["license",{"_index":810,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":787,"title":{},"body":{"index.html":{}}}],["limit",{"_index":288,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"miscellaneous/functions.html":{}}}],["limit(limit",{"_index":375,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["lowercase",{"_index":494,"title":{},"body":{"classes/Language.html":{}}}],["lyrics",{"_index":576,"title":{},"body":{"classes/Song.html":{}}}],["majority",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["match",{"_index":226,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["matching",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":89,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"injectables/CountriesService.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["metadata",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":749,"title":{},"body":{"miscellaneous/functions.html":{}}}],["method.factory",{"_index":339,"title":{},"body":{"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{}}}],["method.factory.ts",{"_index":703,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":145,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["methodwrapper",{"_index":311,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["miscellaneous",{"_index":741,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":786,"title":{},"body":{"index.html":{}}}],["mode",{"_index":776,"title":{},"body":{"index.html":{}}}],["model",{"_index":347,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/comment/comment.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/composer/composer.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/countries/countries.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/genre/genre.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/languages/languages.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/song/song.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["mongodb",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["mongodb+srv://${env.mongo_user_name}:${env.mongo_password}@theopaeanceserverless.sauq3qs.mongodb.net",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":132,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/Genre.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"classes/User.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":194,"title":{},"body":{"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":800,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":805,"title":{},"body":{"index.html":{}}}],["name",{"_index":76,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":763,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":809,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":523,"title":{},"body":{"controllers/LanguagesController.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"modules/CommentModule.html":{},"classes/Composer.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/Genre.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"modules/SongModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":87,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"dependencies.html":{}}}],["new",{"_index":206,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":64,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["node.js",{"_index":755,"title":{},"body":{"index.html":{}}}],["npm",{"_index":769,"title":{},"body":{"index.html":{}}}],["number",{"_index":71,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["object",{"_index":528,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["open",{"_index":788,"title":{},"body":{"index.html":{}}}],["optional",{"_index":63,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":385,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["out",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":814,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":719,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":65,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"miscellaneous/functions.html":{}}}],["pagedata",{"_index":91,"title":{"classes/PageData.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"coverage.html":{}}}],["pages",{"_index":66,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["paginated_method_wrapper",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paginatedmethodprovider",{"_index":340,"title":{},"body":{"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginatedmethodwrapper",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["paginatedmethodwrapper(method",{"_index":751,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginatedrequest",{"_index":348,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["param",{"_index":170,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":263,"title":{},"body":{"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["parameters",{"_index":75,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["partialtype",{"_index":522,"title":{},"body":{"controllers/LanguagesController.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcommentdto",{"_index":631,"title":{},"body":{"classes/UpdateCommentDto.html":{}}}],["partialtype(createcomposerdto",{"_index":633,"title":{},"body":{"classes/UpdateComposerDto.html":{}}}],["partialtype(createcountrydto",{"_index":635,"title":{},"body":{"classes/UpdateCountryDto.html":{}}}],["partialtype(creategenredto",{"_index":637,"title":{},"body":{"classes/UpdateGenreDto.html":{}}}],["partialtype(createlanguagedto",{"_index":639,"title":{},"body":{"classes/UpdateLanguageDto.html":{}}}],["partialtype(createsongdto",{"_index":641,"title":{},"body":{"classes/UpdateSongDto.html":{}}}],["partialtype(createuserdto",{"_index":644,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":217,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["patch",{"_index":169,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":166,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["phone",{"_index":218,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["please",{"_index":798,"title":{},"body":{"index.html":{}}}],["post",{"_index":153,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["post()@apicreatedresponse({description",{"_index":504,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["postresponse",{"_index":88,"title":{"classes/PostResponse.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"coverage.html":{}}}],["prefix",{"_index":144,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["previous",{"_index":67,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["private",{"_index":309,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["process.env",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":778,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":754,"title":{},"body":{"index.html":{}}}],["project",{"_index":789,"title":{},"body":{"index.html":{}}}],["promise",{"_index":286,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":371,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["prop",{"_index":128,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["prop({default",{"_index":239,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["prop({required",{"_index":125,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Genre.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["prop({type",{"_index":118,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["prop({unique",{"_index":225,"title":{},"body":{"classes/Composer.html":{},"classes/Country.html":{},"classes/Language.html":{},"classes/User.html":{}}}],["properties",{"_index":61,"title":{"properties.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":382,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["provider",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["province",{"_index":219,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["q",{"_index":295,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["query",{"_index":298,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["query('limit",{"_index":318,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["query('page",{"_index":316,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["query('q",{"_index":327,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["read",{"_index":799,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":179,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["ref",{"_index":105,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"controllers/LanguagesController.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["reflect",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":384,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["remove",{"_index":149,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":187,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":161,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removes",{"_index":208,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["replies",{"_index":113,"title":{},"body":{"classes/Comment.html":{}}}],["repository",{"_index":766,"title":{},"body":{"index.html":{}}}],["required",{"_index":120,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/CreateGenreDto.html":{},"classes/Genre.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["reset",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":314,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["response.count",{"_index":326,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.data",{"_index":321,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.next",{"_index":325,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.page",{"_index":324,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.pages",{"_index":322,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.previous",{"_index":323,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["results",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrywrites",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["return",{"_index":103,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":155,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["run",{"_index":773,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":759,"title":{},"body":{"index.html":{}}}],["schema",{"_index":127,"title":{},"body":{"classes/Comment.html":{},"modules/CommentModule.html":{},"classes/Composer.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/Genre.html":{},"modules/GenreModule.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"classes/Song.html":{},"modules/SongModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":129,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(comment",{"_index":139,"title":{},"body":{"classes/Comment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(composer",{"_index":245,"title":{},"body":{"classes/Composer.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(country",{"_index":402,"title":{},"body":{"classes/Country.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(genre",{"_index":444,"title":{},"body":{"classes/Genre.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(language",{"_index":499,"title":{},"body":{"classes/Language.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(song",{"_index":599,"title":{},"body":{"classes/Song.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":668,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope.request",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":282,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["search(@query('q",{"_index":463,"title":{},"body":{"controllers/GenreController.html":{}}}],["search(q",{"_index":292,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["server",{"_index":760,"title":{},"body":{"index.html":{}}}],["side",{"_index":761,"title":{},"body":{"index.html":{}}}],["skip",{"_index":368,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["skip(skip",{"_index":376,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["song",{"_index":114,"title":{"classes/Song.html":{}},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/User.html":{},"coverage.html":{}}}],["song.controller",{"_index":621,"title":{},"body":{"modules/SongModule.html":{}}}],["song.dto",{"_index":611,"title":{},"body":{"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{}}}],["song.dto.ts",{"_index":435,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["song.name",{"_index":623,"title":{},"body":{"modules/SongModule.html":{}}}],["song.service",{"_index":610,"title":{},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{}}}],["songcontroller",{"_index":600,"title":{"controllers/SongController.html":{}},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{},"coverage.html":{}}}],["songdocument",{"_index":597,"title":{},"body":{"classes/Song.html":{},"miscellaneous/typealiases.html":{}}}],["songmodule",{"_index":17,"title":{"modules/SongModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SongModule.html":{},"modules.html":{},"overview.html":{}}}],["songs",{"_index":220,"title":{},"body":{"classes/Composer.html":{}}}],["songschema",{"_index":598,"title":{},"body":{"classes/Song.html":{},"modules/SongModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["songservice",{"_index":609,"title":{"injectables/SongService.html":{}},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"coverage.html":{},"overview.html":{}}}],["sort",{"_index":377,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["source",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":792,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../comment.entity.ts",{"_index":823,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../composer.entity.ts",{"_index":824,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../controller",{"_index":744,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../country.entity.ts",{"_index":825,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../genre.entity.ts",{"_index":826,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../id",{"_index":745,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../language.entity.ts",{"_index":827,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":743,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../paginated",{"_index":746,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../song.entity.ts",{"_index":828,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":829,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/factory/controller",{"_index":472,"title":{},"body":{"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/components/factory/id",{"_index":343,"title":{},"body":{"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/components/factory/paginated",{"_index":341,"title":{},"body":{"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/components/schemas/response.schema",{"_index":304,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["src/components/schemas/response.schema.ts",{"_index":57,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"coverage.html":{}}}],["src/components/schemas/response.schema.ts:10",{"_index":566,"title":{},"body":{"classes/PageData.html":{}}}],["src/components/schemas/response.schema.ts:11",{"_index":562,"title":{},"body":{"classes/PageData.html":{}}}],["src/components/schemas/response.schema.ts:12",{"_index":567,"title":{},"body":{"classes/PageData.html":{}}}],["src/components/schemas/response.schema.ts:13",{"_index":564,"title":{},"body":{"classes/PageData.html":{}}}],["src/components/schemas/response.schema.ts:14",{"_index":563,"title":{},"body":{"classes/PageData.html":{}}}],["src/components/schemas/response.schema.ts:19",{"_index":109,"title":{},"body":{"classes/AppResponse.html":{}}}],["src/components/schemas/response.schema.ts:27",{"_index":80,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/components/schemas/response.schema.ts:28",{"_index":81,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/components/schemas/response.schema.ts:29",{"_index":79,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/components/schemas/response.schema.ts:30",{"_index":82,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/components/schemas/response.schema.ts:31",{"_index":74,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/components/schemas/response.schema.ts:5",{"_index":568,"title":{},"body":{"classes/PostResponse.html":{}}}],["src/components/schemas/response.schema.ts:9",{"_index":565,"title":{},"body":{"classes/PageData.html":{}}}],["src/main.ts",{"_index":711,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/comment/comment.controller.ts",{"_index":143,"title":{},"body":{"controllers/CommentController.html":{},"coverage.html":{}}}],["src/modules/comment/comment.controller.ts:19",{"_index":154,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:24",{"_index":156,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:29",{"_index":159,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:34",{"_index":167,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:39",{"_index":163,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.module.ts",{"_index":191,"title":{},"body":{"modules/CommentModule.html":{}}}],["src/modules/comment/comment.service.ts",{"_index":198,"title":{},"body":{"injectables/CommentService.html":{},"coverage.html":{}}}],["src/modules/comment/comment.service.ts:11",{"_index":200,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:15",{"_index":201,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:19",{"_index":203,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:23",{"_index":202,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:7",{"_index":199,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/dto/create",{"_index":403,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/modules/comment/dto/update",{"_index":630,"title":{},"body":{"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["src/modules/comment/entities/comment.entity.ts",{"_index":111,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/comment/entities/comment.entity.ts:12",{"_index":126,"title":{},"body":{"classes/Comment.html":{}}}],["src/modules/comment/entities/comment.entity.ts:15",{"_index":124,"title":{},"body":{"classes/Comment.html":{}}}],["src/modules/comment/entities/comment.entity.ts:18",{"_index":123,"title":{},"body":{"classes/Comment.html":{}}}],["src/modules/comment/entities/comment.entity.ts:9",{"_index":121,"title":{},"body":{"classes/Comment.html":{}}}],["src/modules/composer/composer.controller.ts",{"_index":247,"title":{},"body":{"controllers/ComposerController.html":{},"coverage.html":{}}}],["src/modules/composer/composer.controller.ts:19",{"_index":250,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.controller.ts:24",{"_index":251,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.controller.ts:29",{"_index":252,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.controller.ts:34",{"_index":255,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.controller.ts:42",{"_index":253,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.module.ts",{"_index":268,"title":{},"body":{"modules/ComposerModule.html":{}}}],["src/modules/composer/composer.service.ts",{"_index":272,"title":{},"body":{"injectables/ComposerService.html":{},"coverage.html":{}}}],["src/modules/composer/composer.service.ts:11",{"_index":274,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/composer.service.ts:15",{"_index":275,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/composer.service.ts:19",{"_index":277,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/composer.service.ts:23",{"_index":276,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/composer.service.ts:7",{"_index":273,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/dto/create",{"_index":405,"title":{},"body":{"classes/CreateComposerDto.html":{},"coverage.html":{}}}],["src/modules/composer/dto/update",{"_index":632,"title":{},"body":{"classes/UpdateComposerDto.html":{},"coverage.html":{}}}],["src/modules/composer/entities/composer.entity",{"_index":595,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/composer/entities/composer.entity.ts",{"_index":210,"title":{},"body":{"classes/Composer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/composer/entities/composer.entity.ts:11",{"_index":230,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:14",{"_index":240,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:21",{"_index":228,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:28",{"_index":235,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:31",{"_index":231,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:34",{"_index":224,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:37",{"_index":222,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:40",{"_index":223,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:43",{"_index":236,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:46",{"_index":237,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:8",{"_index":229,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/countries/countries.controller.ts",{"_index":279,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["src/modules/countries/countries.controller.ts:106",{"_index":291,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:34",{"_index":285,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:46",{"_index":289,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:64",{"_index":294,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:83",{"_index":290,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:93",{"_index":297,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.module.ts",{"_index":334,"title":{},"body":{"modules/CountriesModule.html":{}}}],["src/modules/countries/countries.service.ts",{"_index":345,"title":{},"body":{"injectables/CountriesService.html":{},"coverage.html":{}}}],["src/modules/countries/countries.service.ts:10",{"_index":350,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:102",{"_index":355,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:19",{"_index":352,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:25",{"_index":353,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:48",{"_index":356,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:85",{"_index":354,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:91",{"_index":357,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/dto/create",{"_index":407,"title":{},"body":{"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/dto/update",{"_index":634,"title":{},"body":{"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/entities/country.entity.ts",{"_index":396,"title":{},"body":{"classes/Country.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/countries/entities/country.entity.ts:10",{"_index":399,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/entities/country.entity.ts:13",{"_index":400,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/entities/country.entity.ts:16",{"_index":398,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/entities/country.entity.ts:7",{"_index":397,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/genre/dto/create",{"_index":420,"title":{},"body":{"classes/CreateGenreDto.html":{},"coverage.html":{}}}],["src/modules/genre/dto/update",{"_index":636,"title":{},"body":{"classes/UpdateGenreDto.html":{},"coverage.html":{}}}],["src/modules/genre/entities/genre.entity",{"_index":596,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/genre/entities/genre.entity.ts",{"_index":440,"title":{},"body":{"classes/Genre.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/genre/entities/genre.entity.ts:7",{"_index":441,"title":{},"body":{"classes/Genre.html":{}}}],["src/modules/genre/genre.controller.ts",{"_index":446,"title":{},"body":{"controllers/GenreController.html":{},"coverage.html":{}}}],["src/modules/genre/genre.controller.ts:29",{"_index":448,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:41",{"_index":449,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:51",{"_index":452,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:61",{"_index":450,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:71",{"_index":454,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:84",{"_index":451,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.module.ts",{"_index":470,"title":{},"body":{"modules/GenreModule.html":{}}}],["src/modules/genre/genre.service.ts",{"_index":474,"title":{},"body":{"injectables/GenreService.html":{},"coverage.html":{}}}],["src/modules/genre/genre.service.ts:10",{"_index":476,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:17",{"_index":478,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:23",{"_index":480,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:32",{"_index":481,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:36",{"_index":483,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:44",{"_index":482,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/languages/dto/create",{"_index":424,"title":{},"body":{"classes/CreateLanguageDto.html":{},"coverage.html":{}}}],["src/modules/languages/dto/update",{"_index":638,"title":{},"body":{"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["src/modules/languages/entities/language.entity.ts",{"_index":493,"title":{},"body":{"classes/Language.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/languages/entities/language.entity.ts:10",{"_index":496,"title":{},"body":{"classes/Language.html":{}}}],["src/modules/languages/entities/language.entity.ts:7",{"_index":495,"title":{},"body":{"classes/Language.html":{}}}],["src/modules/languages/languages.controller.ts",{"_index":501,"title":{},"body":{"controllers/LanguagesController.html":{},"coverage.html":{}}}],["src/modules/languages/languages.controller.ts:102",{"_index":508,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:115",{"_index":513,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:132",{"_index":509,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:50",{"_index":506,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:63",{"_index":507,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:82",{"_index":511,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.module.ts",{"_index":539,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["src/modules/languages/languages.service.ts",{"_index":542,"title":{},"body":{"injectables/LanguagesService.html":{},"coverage.html":{}}}],["src/modules/languages/languages.service.ts:10",{"_index":544,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:19",{"_index":546,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:25",{"_index":548,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:48",{"_index":551,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:81",{"_index":549,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:87",{"_index":552,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:98",{"_index":550,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/song/dto/create",{"_index":434,"title":{},"body":{"classes/CreateSongDto.html":{},"coverage.html":{}}}],["src/modules/song/dto/update",{"_index":640,"title":{},"body":{"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["src/modules/song/entities/song.entity",{"_index":133,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/User.html":{}}}],["src/modules/song/entities/song.entity.ts",{"_index":569,"title":{},"body":{"classes/Song.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/song/entities/song.entity.ts:10",{"_index":586,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:13",{"_index":584,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:16",{"_index":585,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:19",{"_index":592,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:22",{"_index":590,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:25",{"_index":593,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:28",{"_index":581,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:31",{"_index":582,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:34",{"_index":589,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:37",{"_index":587,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:40",{"_index":594,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:43",{"_index":588,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:46",{"_index":591,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:49",{"_index":583,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/song.controller.ts",{"_index":601,"title":{},"body":{"controllers/SongController.html":{},"coverage.html":{}}}],["src/modules/song/song.controller.ts:19",{"_index":603,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.controller.ts:24",{"_index":604,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.controller.ts:29",{"_index":605,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.controller.ts:34",{"_index":608,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.controller.ts:39",{"_index":606,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.module.ts",{"_index":620,"title":{},"body":{"modules/SongModule.html":{}}}],["src/modules/song/song.service.ts",{"_index":624,"title":{},"body":{"injectables/SongService.html":{},"coverage.html":{}}}],["src/modules/song/song.service.ts:11",{"_index":626,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/song/song.service.ts:15",{"_index":627,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/song/song.service.ts:19",{"_index":629,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/song/song.service.ts:23",{"_index":628,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/song/song.service.ts:7",{"_index":625,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/user/dto/create",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/update",{"_index":643,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity",{"_index":134,"title":{},"body":{"classes/Comment.html":{},"classes/Song.html":{}}}],["src/modules/user/entities/user.entity.ts",{"_index":646,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/user/entities/user.entity.ts:11",{"_index":659,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:14",{"_index":663,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:17",{"_index":664,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:24",{"_index":657,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:31",{"_index":661,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:34",{"_index":660,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:37",{"_index":656,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:40",{"_index":651,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:43",{"_index":653,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:46",{"_index":662,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:49",{"_index":654,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:52",{"_index":665,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:55",{"_index":652,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:58",{"_index":655,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:8",{"_index":658,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/user.controller.ts",{"_index":670,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:19",{"_index":672,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:24",{"_index":673,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:29",{"_index":674,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:34",{"_index":676,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:39",{"_index":675,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":687,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":691,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:11",{"_index":693,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:15",{"_index":694,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:19",{"_index":696,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:23",{"_index":695,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:7",{"_index":692,"title":{},"body":{"injectables/UserService.html":{}}}],["srtfile",{"_index":577,"title":{},"body":{"classes/Song.html":{}}}],["start",{"_index":774,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":777,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":779,"title":{},"body":{"index.html":{}}}],["started",{"_index":753,"title":{"index.html":{}},"body":{}}],["starter",{"_index":765,"title":{},"body":{"index.html":{}}}],["statements",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":802,"title":{},"body":{"index.html":{}}}],["string",{"_index":90,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["string'})@isnotempty({message",{"_index":410,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{}}}],["super(data",{"_index":94,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["support",{"_index":793,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":812,"title":{},"body":{"modules.html":{}}}],["t",{"_index":72,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["table",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":782,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":785,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":784,"title":{},"body":{"index.html":{}}}],["tests",{"_index":781,"title":{},"body":{"index.html":{}}}],["text",{"_index":115,"title":{},"body":{"classes/Comment.html":{}}}],["thanks",{"_index":791,"title":{},"body":{"index.html":{}}}],["this.commentservice.create(createcommentdto",{"_index":181,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.findall",{"_index":182,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.findone(+id",{"_index":184,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.remove(+id",{"_index":188,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.update(+id",{"_index":186,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.composerservice.create(createcomposerdto",{"_index":260,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.composerservice.findall",{"_index":261,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.composerservice.findone(+id",{"_index":262,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.composerservice.remove(+id",{"_index":265,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.composerservice.update(+id",{"_index":264,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.countriesservice.create(createcountrydto",{"_index":315,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findall(page",{"_index":320,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findone(id",{"_index":329,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.remove(id",{"_index":331,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.search(q",{"_index":328,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.update(id",{"_index":330,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countrymodel",{"_index":373,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.count",{"_index":391,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.countdocuments().exec",{"_index":372,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.create(createcountrydto",{"_index":364,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.findbyid(id",{"_index":393,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.findbyidandremove(id",{"_index":395,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.findbyidandupdate(id",{"_index":394,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.data",{"_index":93,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["this.genremodel",{"_index":486,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.create(creategenredto",{"_index":485,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.find().exec",{"_index":487,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.findbyid(id",{"_index":488,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.findbyidandremove(id",{"_index":490,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.findbyidandupdate(id",{"_index":489,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genreservice.create(creategenredto",{"_index":461,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.findall",{"_index":462,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.findall(q",{"_index":464,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.findone(id",{"_index":465,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.remove(id",{"_index":467,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.update(id",{"_index":466,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.idrequest(async",{"_index":392,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["this.languagemodel",{"_index":557,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.count",{"_index":558,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.countdocuments().exec",{"_index":556,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.create(createlanguagedto",{"_index":554,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.findbyid(id",{"_index":559,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.findbyidandremove(id",{"_index":561,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.findbyidandupdate(id",{"_index":560,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagesservice.create(createlanguagedto",{"_index":530,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.findall(page",{"_index":531,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.findone(id",{"_index":533,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.remove(id",{"_index":536,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.search(q",{"_index":532,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.update",{"_index":535,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.methodwrapper(async",{"_index":313,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["this.next",{"_index":98,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["this.page",{"_index":95,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["this.pages",{"_index":96,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["this.paginatedrequest",{"_index":367,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["this.previous",{"_index":97,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{}}}],["this.songservice.create(createsongdto",{"_index":613,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.findall",{"_index":614,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.findone(+id",{"_index":615,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.remove(+id",{"_index":617,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.update(+id",{"_index":616,"title":{},"body":{"controllers/SongController.html":{}}}],["this.userservice.create(createuserdto",{"_index":680,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":681,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(+id",{"_index":682,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(+id",{"_index":684,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(+id",{"_index":683,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":379,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["title",{"_index":578,"title":{},"body":{"classes/Song.html":{}}}],["tonicsolfa",{"_index":579,"title":{},"body":{"classes/Song.html":{}}}],["touch",{"_index":803,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/Genre.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["twitter",{"_index":808,"title":{},"body":{"index.html":{}}}],["type",{"_index":77,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/PageData.html":{},"classes/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":821,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["types",{"_index":131,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"controllers/LanguagesController.html":{},"classes/Song.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":136,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["typescript",{"_index":764,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":119,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"controllers/LanguagesController.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["unique",{"_index":242,"title":{},"body":{"classes/Composer.html":{},"classes/Country.html":{},"classes/Language.html":{},"classes/User.html":{}}}],["unit",{"_index":780,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":547,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["unlicensed",{"_index":820,"title":{},"body":{"properties.html":{}}}],["update",{"_index":150,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":185,"title":{},"body":{"controllers/CommentController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":164,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatecommentdto",{"_index":165,"title":{"classes/UpdateCommentDto.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["updatecomposerdto",{"_index":254,"title":{"classes/UpdateComposerDto.html":{}},"body":{"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"classes/UpdateComposerDto.html":{},"coverage.html":{}}}],["updatecountrydto",{"_index":296,"title":{"classes/UpdateCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["updategenredto",{"_index":453,"title":{"classes/UpdateGenreDto.html":{}},"body":{"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/UpdateGenreDto.html":{},"coverage.html":{}}}],["updatelanguagedto",{"_index":512,"title":{"classes/UpdateLanguageDto.html":{}},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["updates",{"_index":207,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["updatesongdto",{"_index":607,"title":{"classes/UpdateSongDto.html":{}},"body":{"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":642,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user",{"_index":116,"title":{"classes/User.html":{}},"body":{"classes/Comment.html":{},"classes/Song.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":688,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":645,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.name",{"_index":690,"title":{},"body":{"modules/UserModule.html":{}}}],["user.service",{"_index":678,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercontroller",{"_index":669,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":666,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["usermodule",{"_index":18,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":649,"title":{},"body":{"classes/User.html":{}}}],["userschema",{"_index":667,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":677,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":418,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"dependencies.html":{}}}],["value",{"_index":381,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":830,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":221,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["version",{"_index":818,"title":{},"body":{"properties.html":{}}}],["vetter",{"_index":650,"title":{},"body":{"classes/User.html":{}}}],["w",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["watch",{"_index":775,"title":{},"body":{"index.html":{}}}],["website",{"_index":806,"title":{},"body":{"index.html":{}}}],["writeconcern",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["yearcomposed",{"_index":580,"title":{},"body":{"classes/Song.html":{}}}],["yes",{"_index":78,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"injectables/GenreService.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":796,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCommentModule\n\nCommentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nComposerModule\n\nComposerModule\n\nAppModule -->\n\nComposerModule->AppModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nAppModule -->\n\nCountriesModule->AppModule\n\n\n\n\n\nGenreModule\n\nGenreModule\n\nAppModule -->\n\nGenreModule->AppModule\n\n\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nAppModule -->\n\nLanguagesModule->AppModule\n\n\n\n\n\nSongModule\n\nSongModule\n\nAppModule -->\n\nSongModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CommentModule\n                        \n                        \n                            ComposerModule\n                        \n                        \n                            CountriesModule\n                        \n                        \n                            GenreModule\n                        \n                        \n                            LanguagesModule\n                        \n                        \n                            SongModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CommentModule } from './modules/comment/comment.module';\nimport { UserModule } from './modules/user/user.module';\nimport { SongModule } from './modules/song/song.module';\nimport { ComposerModule } from './modules/composer/composer.module';\nimport { CountriesModule } from './modules/countries/countries.module';\nimport { LanguagesModule } from './modules/languages/languages.module';\nimport { GenreModule } from './modules/genre/genre.module';\n\nimport 'dotenv/config';\n\nconst env = process.env;\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(\n      `mongodb+srv://${env.MONGO_USER_NAME}:${env.MONGO_PASSWORD}@theopaeanceserverless.sauq3qs.mongodb.net/`,\n      {\n        retryWrites: true,\n        dbName: 'AppDb',\n        writeConcern: {\n          w: 'majority',\n        },\n      },\n    ),\n    CommentModule,\n    UserModule,\n    SongModule,\n    ComposerModule,\n    CountriesModule,\n    LanguagesModule,\n    GenreModule,\n  ],\n  exports: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPaginatedResponse.html":{"url":"classes/AppPaginatedResponse.html","title":"class - AppPaginatedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPaginatedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/schemas/response.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AppResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                    Optional\n                                next\n                            \n                            \n                                page\n                            \n                            \n                                pages\n                            \n                            \n                                    Optional\n                                previous\n                            \n                            \n                                    Optional\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(page: number, pages: number, previous?: number, next?: number, data?: T[])\n                    \n                \n                        \n                            \n                                Defined in src/components/schemas/response.schema.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        page\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pages\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        previous\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        next\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        previous\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                        \n                            \n                                Inherited from         AppResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         AppResponse:19\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport { ApiHideProperty, getSchemaPath } from '@nestjs/swagger';\n\nexport class PostResponse {\n  message: string;\n}\n\nexport class PageData {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n  data: T[];\n}\n\nexport class AppResponse {\n  // @ApiHideProperty()\n  data?: T;\n\n  constructor(data?: T) {\n    this.data = data;\n  }\n}\n\nexport class AppPaginatedResponse extends AppResponse {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n\n  constructor(\n    page: number,\n    pages: number,\n    previous?: number,\n    next?: number,\n    data?: T[],\n  ) {\n    super(data);\n    this.page = page;\n    this.pages = pages;\n    this.previous = previous;\n    this.next = next;\n  }\n}\n\n// export function appResponseSchema(\n//   base: Type,\n//   array: Type,\n// ) {\n//   return {\n//     allOf: [\n//       { $ref: getSchemaPath(base) },\n//       {\n//         properties: {\n//           results: {\n//             type: 'array',\n//             items: { $ref: getSchemaPath(array) },\n//           },\n//         },\n//       },\n//     ],\n//   };\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppResponse.html":{"url":"classes/AppResponse.html","title":"class - AppResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/schemas/response.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data?: T)\n                    \n                \n                        \n                            \n                                Defined in src/components/schemas/response.schema.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport { ApiHideProperty, getSchemaPath } from '@nestjs/swagger';\n\nexport class PostResponse {\n  message: string;\n}\n\nexport class PageData {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n  data: T[];\n}\n\nexport class AppResponse {\n  // @ApiHideProperty()\n  data?: T;\n\n  constructor(data?: T) {\n    this.data = data;\n  }\n}\n\nexport class AppPaginatedResponse extends AppResponse {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n\n  constructor(\n    page: number,\n    pages: number,\n    previous?: number,\n    next?: number,\n    data?: T[],\n  ) {\n    super(data);\n    this.page = page;\n    this.pages = pages;\n    this.previous = previous;\n    this.next = next;\n  }\n}\n\n// export function appResponseSchema(\n//   base: Type,\n//   array: Type,\n// ) {\n//   return {\n//     allOf: [\n//       { $ref: getSchemaPath(base) },\n//       {\n//         properties: {\n//           results: {\n//             type: 'array',\n//             items: { $ref: getSchemaPath(array) },\n//           },\n//         },\n//       },\n//     ],\n//   };\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                replies\n                            \n                            \n                                    \n                                song\n                            \n                            \n                                    \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/entities/comment.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/entities/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Song\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Song', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/entities/comment.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Song } from 'src/modules/song/entities/song.entity';\nimport { User } from 'src/modules/user/entities/user.entity';\n\n@Schema({ collection: 'Comment' })\nexport class Comment {\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  author: User;\n\n  @Prop({ required: true })\n  text: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'Song', required: true })\n  song: Song;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], required: false })\n  replies: Comment[];\n}\n\nexport type CommentDocument = HydratedDocument;\n\nexport const CommentSchema = SchemaFactory.createForClass(Comment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentController.html":{"url":"controllers/CommentController.html","title":"controller - CommentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCommentDto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCommentDto: UpdateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCommentDto\n                                            \n                                                            UpdateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { CommentService } from './comment.service';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { UpdateCommentDto } from './dto/update-comment.dto';\n\n@Controller('comment')\nexport class CommentController {\n  constructor(private readonly commentService: CommentService) {}\n\n  @Post()\n  create(@Body() createCommentDto: CreateCommentDto) {\n    return this.commentService.create(createCommentDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.commentService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.commentService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateCommentDto: UpdateCommentDto) {\n    return this.commentService.update(+id, updateCommentDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.commentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentModule.html":{"url":"modules/CommentModule.html","title":"module - CommentModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\n\nCommentService\n\nCommentService\n\n\n\nCommentModule\n\nCommentModule\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/comment/comment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommentService } from './comment.service';\nimport { CommentController } from './comment.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Comment, CommentSchema } from './entities/comment.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Comment.name,\n        schema: CommentSchema,\n      },\n    ]),\n  ],\n  controllers: [CommentController],\n  providers: [CommentService],\n})\nexport class CommentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createCommentDto: CreateCommentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateCommentDto: UpdateCommentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCommentDto\n                                            \n                                                            UpdateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { UpdateCommentDto } from './dto/update-comment.dto';\n\n@Injectable()\nexport class CommentService {\n  create(createCommentDto: CreateCommentDto) {\n    return 'This action adds a new comment';\n  }\n\n  findAll() {\n    return `This action returns all comment`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} comment`;\n  }\n\n  update(id: number, updateCommentDto: UpdateCommentDto) {\n    return `This action updates a #${id} comment`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} comment`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Composer.html":{"url":"classes/Composer.html","title":"class - Composer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Composer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/entities/composer.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                city\n                            \n                            \n                                    \n                                country\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                province\n                            \n                            \n                                    \n                                songs\n                            \n                            \n                                    \n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, match: /\\b[\\w\\d\\W\\D]+(?:@(?:[\\w\\d\\W\\D]+(?:\\.(?:[\\w\\d\\W\\D]+))))\\b/gi, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, match: /^(\\+[0-9]{1,4}\\s)?[0-9]{5,15}$/gi, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        province\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Song[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Song } from 'src/modules/song/entities/song.entity';\n\n@Schema({ collection: 'Composer' })\nexport class Composer {\n  @Prop({ required: true })\n  firstName: string;\n\n  @Prop({ required: true })\n  lastName: string;\n\n  @Prop({ default: false })\n  verified: boolean;\n\n  @Prop({\n    unique: true,\n    match: /\\b[\\w\\d\\W\\D]+(?:@(?:[\\w\\d\\W\\D]+(?:\\.(?:[\\w\\d\\W\\D]+))))\\b/gi,\n    required: true,\n  })\n  email: string;\n\n  @Prop({\n    unique: true,\n    match: /^(\\+[0-9]{1,4}\\s)?[0-9]{5,15}$/gi,\n    required: true,\n  })\n  phone: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ required: true })\n  country: string;\n\n  @Prop({ required: true })\n  address: string;\n\n  @Prop({ required: true })\n  city: string;\n\n  @Prop({ required: true })\n  province: string;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Song' }], required: false })\n  songs: Song[];\n}\n\nexport type ComposerDocument = HydratedDocument;\n\nexport const ComposerSchema = SchemaFactory.createForClass(Composer);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ComposerController.html":{"url":"controllers/ComposerController.html","title":"controller - ComposerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ComposerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/composer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                composer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createComposerDto: CreateComposerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createComposerDto\n                                            \n                                                            CreateComposerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateComposerDto: UpdateComposerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateComposerDto\n                                            \n                                                            UpdateComposerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ComposerService } from './composer.service';\nimport { CreateComposerDto } from './dto/create-composer.dto';\nimport { UpdateComposerDto } from './dto/update-composer.dto';\n\n@Controller('composer')\nexport class ComposerController {\n  constructor(private readonly composerService: ComposerService) {}\n\n  @Post()\n  create(@Body() createComposerDto: CreateComposerDto) {\n    return this.composerService.create(createComposerDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.composerService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.composerService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateComposerDto: UpdateComposerDto,\n  ) {\n    return this.composerService.update(+id, updateComposerDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.composerService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ComposerModule.html":{"url":"modules/ComposerModule.html","title":"module - ComposerModule","body":"\n                   \n\n\n\n\n    Modules\n    ComposerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ComposerModule\n\n\n\ncluster_ComposerModule_providers\n\n\n\n\nComposerService\n\nComposerService\n\n\n\nComposerModule\n\nComposerModule\n\nComposerModule -->\n\nComposerService->ComposerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/composer/composer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ComposerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ComposerController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ComposerService } from './composer.service';\nimport { ComposerController } from './composer.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Composer, ComposerSchema } from './entities/composer.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Composer.name,\n        schema: ComposerSchema,\n      },\n    ]),\n  ],\n  controllers: [ComposerController],\n  providers: [ComposerService],\n})\nexport class ComposerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ComposerService.html":{"url":"injectables/ComposerService.html","title":"injectable - ComposerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ComposerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/composer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createComposerDto: CreateComposerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createComposerDto\n                                            \n                                                            CreateComposerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateComposerDto: UpdateComposerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateComposerDto\n                                            \n                                                            UpdateComposerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateComposerDto } from './dto/create-composer.dto';\nimport { UpdateComposerDto } from './dto/update-composer.dto';\n\n@Injectable()\nexport class ComposerService {\n  create(createComposerDto: CreateComposerDto) {\n    return 'This action adds a new composer';\n  }\n\n  findAll() {\n    return `This action returns all composer`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} composer`;\n  }\n\n  update(id: number, updateComposerDto: UpdateComposerDto) {\n    return `This action updates a #${id} composer`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} composer`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountriesController.html":{"url":"controllers/CountriesController.html","title":"controller - CountriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                countries\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                search\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCountryDto: CreateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCountryDto\n                                            \n                                                            CreateCountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string, page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCountryDto: UpdateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCountryDto\n                                            \n                                                            UpdateCountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  Inject,\n  DefaultValuePipe,\n} from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\nimport {\n  AppPaginatedResponse,\n  AppResponse,\n  PostResponse,\n} from 'src/components/schemas/response.schema';\nimport { Country } from './entities/country.entity';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('countries')\n@ApiTags(\"Countries\")\nexport class CountriesController {\n  constructor(\n    private readonly countriesService: CountriesService,\n    @Inject('CONTROLLER_METHOD_WRAPPER')\n    private readonly methodWrapper,\n  ) {}\n\n  @Post()\n  async create(\n    @Body() createCountryDto: CreateCountryDto,\n  ): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.create(createCountryDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get()\n  async findAll(\n    @Query('page', new DefaultValuePipe(1)) page: number,\n    @Query('limit', new DefaultValuePipe(20)) limit: number,\n  ): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.findAll(page, limit);\n      return {\n        data: response.data,\n        pages: response.pages,\n        previous: response.previous,\n        page: response.page,\n        next: response.next,\n        count: response.count,\n      };\n    });\n  }\n\n  @Get('search')\n  async search(\n    @Query('q') q: string,\n    @Query('page', new DefaultValuePipe(1)) page: number,\n    @Query('limit', new DefaultValuePipe(20)) limit: number,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.countriesService.search(q, page, limit);\n      return {\n        data: response.data,\n        pages: response.pages,\n        previous: response.previous,\n        page: response.page,\n        next: response.next,\n        count: response.count,\n      };\n    });\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.findOne(id);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateCountryDto: UpdateCountryDto,\n  ): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.update(id, updateCountryDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.remove(id);\n      return {\n        data: response,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountriesModule.html":{"url":"modules/CountriesModule.html","title":"module - CountriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CountriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\n\nCountriesService\n\nCountriesService\n\n\n\nCountriesModule\n\nCountriesModule\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/countries/countries.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { CountriesController } from './countries.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Country, CountrySchema } from './entities/country.entity';\n\nimport { ControllerMethodProvider } from '../../components/factory/controller-method.factory';\nimport { PaginatedMethodProvider } from 'src/components/factory/paginated-method.factory';\nimport { IdMethodProvider } from 'src/components/factory/id-method.factory';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Country.name,\n        schema: CountrySchema,\n      },\n    ]),\n  ],\n  controllers: [CountriesController],\n  providers: [\n    CountriesService,\n    ControllerMethodProvider,\n    PaginatedMethodProvider,\n    IdMethodProvider,\n  ],\n})\nexport class CountriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountriesService.html":{"url":"injectables/CountriesService.html","title":"injectable - CountriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(countryModel: Model, paginatedRequest, idRequest)\n                    \n                \n                        \n                            \n                                Defined in src/modules/countries/countries.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        countryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginatedRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        idRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCountryDto: CreateCountryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCountryDto\n                                            \n                                                            CreateCountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCountryDto: UpdateCountryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCountryDto\n                                            \n                                                            UpdateCountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Country } from './entities/country.entity';\nimport { Model } from 'mongoose';\nimport { PageData, PostResponse } from 'src/components/schemas/response.schema';\n\n@Injectable()\nexport class CountriesService {\n  constructor(\n    @InjectModel(Country.name) private readonly countryModel: Model,\n    @Inject('PAGINATED_METHOD_WRAPPER')\n    private readonly paginatedRequest,\n    @Inject('ID_METHOD_WRAPPER')\n    private readonly idRequest,\n  ) {}\n\n  async create(createCountryDto: CreateCountryDto): Promise {\n    const doc = await this.countryModel.create(createCountryDto);\n    await doc.save();\n    return { message: 'Country has been added' };\n  }\n\n  async findAll(page: number, limit: number): Promise> {\n    return await this.paginatedRequest(\n      async () => {\n        const skip = limit * (page - 1);\n        const [countryCount, countries] = await Promise.all([\n          await this.countryModel.countDocuments().exec(),\n          await this.countryModel\n            .find()\n            .limit(limit)\n            .skip(skip)\n            .sort({ name: 1 })\n            .exec(),\n        ]);\n        return {\n          count: countryCount,\n          items: countries,\n        };\n      },\n      page,\n      limit,\n    );\n  }\n\n  async search(\n    q: string,\n    page: number,\n    limit: number,\n  ): Promise> {\n    if (!q) {\n      throw new BadRequestException('Query value not provided');\n    }\n    return await this.paginatedRequest(\n      async () => {\n        const skip = limit * (page - 1);\n        const filter = { $regex: q, $options: 'i' };\n        const conditions = [\n          { name: filter },\n          { code: filter },\n          { emoji: filter },\n          { dial_code: filter },\n        ];\n        const [countryCount, langauages] = await Promise.all([\n          await this.countryModel.count({ $or: conditions }),\n          await this.countryModel\n            .find({ $or: conditions })\n            .limit(limit)\n            .skip(skip)\n            .sort({ name: 1 })\n            .exec(),\n        ]);\n        return {\n          count: countryCount,\n          items: langauages,\n        };\n      },\n      page,\n      limit,\n    );\n  }\n\n  async findOne(id: string): Promise {\n    return this.idRequest(async () => {\n      return await this.countryModel.findById(id);\n    }, id);\n  }\n\n  async update(\n    id: string,\n    updateCountryDto: UpdateCountryDto,\n  ): Promise {\n    return this.idRequest(async () => {\n      return await this.countryModel.findByIdAndUpdate(id, updateCountryDto, {\n        new: true,\n      });\n    }, id);\n  }\n\n  async remove(id: string): Promise {\n    return this.idRequest(async () => {\n      return await this.countryModel.findByIdAndRemove(id);\n    }, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/entities/country.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                emoji\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/entities/country.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/entities/country.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/entities/country.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/entities/country.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\n@Schema({ collection: 'Country' })\nexport class Country {\n  @Prop({ unique: true })\n  code: string;\n\n  @Prop()\n  emoji: string;\n\n  @Prop({ unique: true })\n  name: string;\n\n  @Prop()\n  dial_code: string;\n}\n\nexport type CountryDocument = HydratedDocument;\n\nexport const CountrySchema = SchemaFactory.createForClass(Country);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateCommentDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateComposerDto.html":{"url":"classes/CreateComposerDto.html","title":"class - CreateComposerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateComposerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/dto/create-composer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateComposerDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCountryDto.html":{"url":"classes/CreateCountryDto.html","title":"class - CreateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/create-country.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                    \n                                emoji\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'code should be a string'})@IsNotEmpty({message: 'code should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create-country.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'dial_code should be a string'})@IsNotEmpty({message: 'dial_code should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create-country.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'emoji should be a string'})@IsNotEmpty({message: 'emoji should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create-country.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'name should be a string'})@IsNotEmpty({message: 'name should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create-country.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateCountryDto {\n  @IsString({ message: 'code should be a string' })\n  @IsNotEmpty({ message: 'code should not be empty' })\n  code: string;\n\n  @IsString({ message: 'emoji should be a string' })\n  @IsNotEmpty({ message: 'emoji should not be empty' })\n  emoji: string;\n\n  @IsString({ message: 'name should be a string' })\n  @IsNotEmpty({ message: 'name should not be empty' })\n  name: string;\n\n  @IsString({ message: 'dial_code should be a string' })\n  @IsNotEmpty({ message: 'dial_code should not be empty' })\n  dial_code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGenreDto.html":{"url":"classes/CreateGenreDto.html","title":"class - CreateGenreDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGenreDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/dto/create-genre.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'name must be a string'})@IsNotEmpty({message: 'name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/genre/dto/create-genre.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateGenreDto {\n  @IsString({ message: 'name must be a string' })\n  @IsNotEmpty({ message: 'name is required' })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLanguageDto.html":{"url":"classes/CreateLanguageDto.html","title":"class - CreateLanguageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLanguageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/dto/create-language.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'code should be a string'})@IsNotEmpty({message: 'code should not be empty'})@Length(3, 3, {message: 'code has to be 3 characters in length'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/languages/dto/create-language.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'name should be a string'})@IsNotEmpty({message: 'name should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/languages/dto/create-language.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, Length } from 'class-validator';\n\nexport class CreateLanguageDto {\n  @IsString({ message: 'code should be a string' })\n  @IsNotEmpty({ message: 'code should not be empty' })\n  @Length(3, 3, { message: 'code has to be 3 characters in length' })\n  code: string;\n\n  @IsString({ message: 'name should be a string' })\n  @IsNotEmpty({ message: 'name should not be empty' })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSongDto.html":{"url":"classes/CreateSongDto.html","title":"class - CreateSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/dto/create-song.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSongDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Genre.html":{"url":"classes/Genre.html","title":"class - Genre","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Genre\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/entities/genre.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/genre/entities/genre.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\n@Schema({ collection: 'Genre' })\nexport class Genre {\n  @Prop({ required: true })\n  name: string;\n}\n\nexport type GenreDocument = HydratedDocument;\n\nexport const GenreSchema = SchemaFactory.createForClass(Genre);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GenreController.html":{"url":"controllers/GenreController.html","title":"controller - GenreController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GenreController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/genre.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                genre\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                search\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createGenreDto: CreateGenreDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGenreDto\n                                            \n                                                            CreateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateGenreDto: UpdateGenreDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateGenreDto\n                                            \n                                                            UpdateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  Query,\n} from '@nestjs/common';\nimport { GenreService } from './genre.service';\nimport { CreateGenreDto } from './dto/create-genre.dto';\nimport { UpdateGenreDto } from './dto/update-genre.dto';\nimport { AppResponse, PostResponse } from 'src/components/schemas/response.schema';\nimport { Genre } from './entities/genre.entity';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('genre')\n@ApiTags(\"Genre\")\nexport class GenreController {\n  constructor(\n    private readonly genreService: GenreService,\n    @Inject('CONTROLLER_METHOD_WRAPPER')\n    private readonly methodWrapper,\n  ) {}\n\n  @Post()\n  async create(\n    @Body() createGenreDto: CreateGenreDto,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.create(createGenreDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get()\n  async findAll(): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.findAll();\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get('search')\n  async search(@Query('q') q: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.findAll(q);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.findOne(id);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateGenreDto: UpdateGenreDto,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.update(id, updateGenreDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.remove(id);\n      return {\n        data: response,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GenreModule.html":{"url":"modules/GenreModule.html","title":"module - GenreModule","body":"\n                   \n\n\n\n\n    Modules\n    GenreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GenreModule\n\n\n\ncluster_GenreModule_providers\n\n\n\n\nGenreService\n\nGenreService\n\n\n\nGenreModule\n\nGenreModule\n\nGenreModule -->\n\nGenreService->GenreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/genre/genre.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GenreService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GenreController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GenreService } from './genre.service';\nimport { GenreController } from './genre.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Genre, GenreSchema } from './entities/genre.entity';\nimport { ControllerMethodProvider } from 'src/components/factory/controller-method.factory';\nimport { IdMethodProvider } from 'src/components/factory/id-method.factory';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Genre.name,\n        schema: GenreSchema,\n      },\n    ]),\n  ],\n  controllers: [GenreController],\n  providers: [GenreService, ControllerMethodProvider, IdMethodProvider],\n})\nexport class GenreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenreService.html":{"url":"injectables/GenreService.html","title":"injectable - GenreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/genre.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(genreModel: Model, idRequest)\n                    \n                \n                        \n                            \n                                Defined in src/modules/genre/genre.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        genreModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        idRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createGenreDto: CreateGenreDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGenreDto\n                                            \n                                                            CreateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(q?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateGenreDto: UpdateGenreDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateGenreDto\n                                            \n                                                            UpdateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { CreateGenreDto } from './dto/create-genre.dto';\nimport { UpdateGenreDto } from './dto/update-genre.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Genre } from './entities/genre.entity';\nimport { Model } from 'mongoose';\nimport { PostResponse } from 'src/components/schemas/response.schema';\n\n@Injectable()\nexport class GenreService {\n  constructor(\n    @InjectModel(Genre.name) private readonly genreModel: Model,\n    @Inject('ID_METHOD_WRAPPER')\n    private readonly idRequest,\n  ) {}\n\n  async create(createGenreDto: CreateGenreDto): Promise {\n    const doc = await this.genreModel.create(createGenreDto);\n    await doc.save();\n    return { message: 'Genre has been added' };\n  }\n\n  async findAll(q?: string): Promise {\n    if (q) {\n      return this.genreModel\n        .find({ name: { $regex: `[${q}]`, $options: 'i' } })\n        .exec();\n    }\n    return this.genreModel.find().exec();\n  }\n\n  async findOne(id: string): Promise {\n    return this.idRequest(async () => this.genreModel.findById(id), id);\n  }\n\n  update(id: string, updateGenreDto: UpdateGenreDto) {\n    return this.idRequest(async () => {\n      return await this.genreModel.findByIdAndUpdate(id, updateGenreDto, {\n        new: true,\n      });\n    }, id);\n  }\n\n  remove(id: string) {\n    return this.idRequest(async () => {\n      await this.genreModel.findByIdAndRemove(id);\n      return { message: `Country $id has been deleted` };\n    }, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Language.html":{"url":"classes/Language.html","title":"class - Language","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Language\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/entities/language.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, length: 3, lowercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/languages/entities/language.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/languages/entities/language.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\n@Schema({ collection: 'Language' })\nexport class Language {\n  @Prop({ unique: true, length: 3, lowercase: true })\n  code: string;\n\n  @Prop({ unique: true })\n  name: string;\n}\n\nexport type LanguageDocument = HydratedDocument;\n\nexport const LanguageSchema = SchemaFactory.createForClass(Language);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LanguagesController.html":{"url":"controllers/LanguagesController.html","title":"controller - LanguagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LanguagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/languages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                languages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                search\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLanguageDto: CreateLanguageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCreatedResponse({description: 'Language created and added', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLanguageDto\n                                            \n                                                            CreateLanguageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string, page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@ApiOkResponse({})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateLanguageDto: UpdateLanguageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLanguageDto\n                                            \n                                                            UpdateLanguageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  Query,\n  DefaultValuePipe,\n} from '@nestjs/common';\nimport { LanguagesService } from './languages.service';\nimport { CreateLanguageDto } from './dto/create-language.dto';\nimport { UpdateLanguageDto } from './dto/update-language.dto';\nimport {\n  AppPaginatedResponse,\n  AppResponse,\n  PostResponse,\n} from 'src/components/schemas/response.schema';\nimport { Language } from './entities/language.entity';\nimport { ApiBody, ApiCreatedResponse, ApiExtraModels, ApiOkResponse, ApiTags, getSchemaPath } from '@nestjs/swagger';\nimport { PartialType } from '@nestjs/mapped-types';\n\n@Controller('languages')\n@ApiTags('Languages')\nexport class LanguagesController {\n  constructor(\n    private readonly languagesService: LanguagesService,\n    @Inject('CONTROLLER_METHOD_WRAPPER')\n    private readonly methodWrapper,\n  ) {}\n\n  @Post()\n  @ApiCreatedResponse({ description: \"Language created and added\", schema: {\n    allOf: [\n      {\n        $ref: getSchemaPath(AppResponse)\n      },\n      {\n        properties: {\n          results: {\n            type: 'object',\n            default: getSchemaPath(PostResponse),\n          }\n        }\n      }\n    ]\n  } })\n  async create(\n    @Body() createLanguageDto: CreateLanguageDto,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.create(createLanguageDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get()\n  // @ApiOkResponse({ type: AppPaginatedResponse })\n  async findAll(\n    @Query('page', new DefaultValuePipe(1)) page: number,\n    @Query('limit', new DefaultValuePipe(20)) limit: number,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.findAll(page, limit);\n      return {\n        data: response.data,\n        pages: response.pages,\n        previous: response.previous,\n        page: response.page,\n        next: response.next,\n        count: response.count,\n      };\n    });\n  }\n\n  @Get('search')\n  @ApiOkResponse({  })\n  async search(\n    @Query('q') q: string,\n    @Query('page', new DefaultValuePipe(1)) page: number,\n    @Query('limit', new DefaultValuePipe(20)) limit: number,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.search(q, page, limit);\n      return {\n        data: response.data,\n        pages: response.pages,\n        previous: response.previous,\n        page: response.page,\n        next: response.next,\n        count: response.count,\n      };\n    });\n  }\n\n  @Get(':id')\n  // @ApiOkResponse({ type: AppResponse })\n  async findOne(@Param('id') id: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.findOne(id);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  \n  @Patch(':id')\n  // @ApiOkResponse({ type: AppResponse })\n  // @ApiExtraModels(Language)\n  async update(\n    @Param('id') id: string,\n    @Body() updateLanguageDto: UpdateLanguageDto,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.update(\n        id,\n        updateLanguageDto,\n      );\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Delete(':id')\n  // @ApiOkResponse({ type: AppResponse })\n  async remove(@Param('id') id: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.remove(id);\n      return {\n        data: response,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LanguagesModule.html":{"url":"modules/LanguagesModule.html","title":"module - LanguagesModule","body":"\n                   \n\n\n\n\n    Modules\n    LanguagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LanguagesModule\n\n\n\ncluster_LanguagesModule_providers\n\n\n\n\nLanguagesService\n\nLanguagesService\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nLanguagesModule -->\n\nLanguagesService->LanguagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/languages/languages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LanguagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LanguagesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LanguagesService } from './languages.service';\nimport { LanguagesController } from './languages.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Language, LanguageSchema } from './entities/language.entity';\nimport { ControllerMethodProvider } from 'src/components/factory/controller-method.factory';\nimport { PaginatedMethodProvider } from 'src/components/factory/paginated-method.factory';\nimport { IdMethodProvider } from 'src/components/factory/id-method.factory';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Language.name,\n        schema: LanguageSchema,\n      },\n    ]),\n  ],\n  controllers: [LanguagesController],\n  providers: [\n    LanguagesService,\n    ControllerMethodProvider,\n    PaginatedMethodProvider,\n    IdMethodProvider,\n  ],\n})\nexport class LanguagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LanguagesService.html":{"url":"injectables/LanguagesService.html","title":"injectable - LanguagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LanguagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/languages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(languageModel: Model, paginatedRequest, idRequest)\n                    \n                \n                        \n                            \n                                Defined in src/modules/languages/languages.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        languageModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginatedRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        idRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLanguageDto: CreateLanguageDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLanguageDto\n                                            \n                                                            CreateLanguageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateLanguageDto: UpdateLanguageDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLanguageDto\n                                            \n                                                            UpdateLanguageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { CreateLanguageDto } from './dto/create-language.dto';\nimport { UpdateLanguageDto } from './dto/update-language.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Language } from './entities/language.entity';\nimport { Model } from 'mongoose';\nimport { PageData, PostResponse } from 'src/components/schemas/response.schema';\n\n@Injectable()\nexport class LanguagesService {\n  constructor(\n    @InjectModel(Language.name) private readonly languageModel: Model,\n    @Inject('PAGINATED_METHOD_WRAPPER')\n    private readonly paginatedRequest,\n    @Inject('ID_METHOD_WRAPPER')\n    private readonly idRequest,\n  ) {}\n\n  async create(createLanguageDto: CreateLanguageDto) {\n    const doc = await this.languageModel.create(createLanguageDto);\n    await doc.save();\n    return { message: 'Language has been added' };\n  }\n\n  async findAll(page: number, limit: number): Promise> {\n    return await this.paginatedRequest(\n      async () => {\n        const skip = limit * (page - 1);\n        const [languageCount, langauages] = await Promise.all([\n          await this.languageModel.countDocuments().exec(),\n          await this.languageModel\n            .find()\n            .limit(limit)\n            .skip(skip)\n            .sort({ name: 1 })\n            .exec(),\n        ]);\n        return {\n          count: languageCount,\n          items: langauages,\n        };\n      },\n      page,\n      limit,\n    );\n  }\n\n  async search(\n    q: string,\n    page: number,\n    limit: number,\n  ): Promise> {\n    if (!q) {\n      throw new BadRequestException('Query value not provided');\n    }\n    return await this.paginatedRequest(\n      async () => {\n        const skip = limit * (page - 1);\n        const filter = { $regex: q, $options: 'i' };\n        const [languageCount, langauages] = await Promise.all([\n          await this.languageModel.count({\n            $or: [{ name: filter }, { code: filter }],\n          }),\n          await this.languageModel\n            .find({ $or: [{ name: filter }, { code: filter }] })\n            .limit(limit)\n            .skip(skip)\n            .sort({ name: 1 })\n            .exec(),\n        ]);\n        return {\n          count: languageCount,\n          items: langauages,\n        };\n      },\n      page,\n      limit,\n    );\n  }\n\n  async findOne(id: string): Promise {\n    return this.idRequest(async () => {\n      return await this.languageModel.findById(id);\n    }, id);\n  }\n\n  async update(\n    id: string,\n    updateLanguageDto: UpdateLanguageDto,\n  ): Promise {\n    return this.idRequest(async () => {\n      return await this.languageModel.findByIdAndUpdate(id, updateLanguageDto, {\n        new: true,\n      });\n    }, id);\n  }\n\n  async remove(id: string): Promise {\n    return this.idRequest(async () => {\n      await this.languageModel.findByIdAndRemove(id);\n      return { message: `Country $id has been deleted` };\n    }, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageData.html":{"url":"classes/PageData.html","title":"class - PageData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/schemas/response.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                data\n                            \n                            \n                                    Optional\n                                next\n                            \n                            \n                                page\n                            \n                            \n                                pages\n                            \n                            \n                                    Optional\n                                previous\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        previous\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport { ApiHideProperty, getSchemaPath } from '@nestjs/swagger';\n\nexport class PostResponse {\n  message: string;\n}\n\nexport class PageData {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n  data: T[];\n}\n\nexport class AppResponse {\n  // @ApiHideProperty()\n  data?: T;\n\n  constructor(data?: T) {\n    this.data = data;\n  }\n}\n\nexport class AppPaginatedResponse extends AppResponse {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n\n  constructor(\n    page: number,\n    pages: number,\n    previous?: number,\n    next?: number,\n    data?: T[],\n  ) {\n    super(data);\n    this.page = page;\n    this.pages = pages;\n    this.previous = previous;\n    this.next = next;\n  }\n}\n\n// export function appResponseSchema(\n//   base: Type,\n//   array: Type,\n// ) {\n//   return {\n//     allOf: [\n//       { $ref: getSchemaPath(base) },\n//       {\n//         properties: {\n//           results: {\n//             type: 'array',\n//             items: { $ref: getSchemaPath(array) },\n//           },\n//         },\n//       },\n//     ],\n//   };\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostResponse.html":{"url":"classes/PostResponse.html","title":"class - PostResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/schemas/response.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/schemas/response.schema.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport { ApiHideProperty, getSchemaPath } from '@nestjs/swagger';\n\nexport class PostResponse {\n  message: string;\n}\n\nexport class PageData {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n  data: T[];\n}\n\nexport class AppResponse {\n  // @ApiHideProperty()\n  data?: T;\n\n  constructor(data?: T) {\n    this.data = data;\n  }\n}\n\nexport class AppPaginatedResponse extends AppResponse {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n\n  constructor(\n    page: number,\n    pages: number,\n    previous?: number,\n    next?: number,\n    data?: T[],\n  ) {\n    super(data);\n    this.page = page;\n    this.pages = pages;\n    this.previous = previous;\n    this.next = next;\n  }\n}\n\n// export function appResponseSchema(\n//   base: Type,\n//   array: Type,\n// ) {\n//   return {\n//     allOf: [\n//       { $ref: getSchemaPath(base) },\n//       {\n//         properties: {\n//           results: {\n//             type: 'array',\n//             items: { $ref: getSchemaPath(array) },\n//           },\n//         },\n//       },\n//     ],\n//   };\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Song.html":{"url":"classes/Song.html","title":"class - Song","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Song\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/entities/song.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                approved\n                            \n                            \n                                    \n                                approver\n                            \n                            \n                                    \n                                    Optional\n                                audioFile\n                            \n                            \n                                    \n                                    Optional\n                                comments\n                            \n                            \n                                    \n                                    Optional\n                                composers\n                            \n                            \n                                    \n                                contributor\n                            \n                            \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                genre\n                            \n                            \n                                    \n                                language\n                            \n                            \n                                    \n                                lyrics\n                            \n                            \n                                    \n                                    Optional\n                                srtFile\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                    Optional\n                                tonicSolfa\n                            \n                            \n                                    \n                                    Optional\n                                yearComposed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        approved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        approver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        audioFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        composers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Composer[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        genre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genre[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lyrics\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        srtFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tonicSolfa\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        yearComposed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Composer } from 'src/modules/composer/entities/composer.entity';\nimport { Genre } from 'src/modules/genre/entities/genre.entity';\nimport { User } from 'src/modules/user/entities/user.entity';\n\n@Schema({ collection: 'Song' })\nexport class Song {\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  contributor: User;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], required: false })\n  comments?: Comment[];\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Composer' }], required: false })\n  composers?: Composer[];\n\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: true })\n  lyrics: string;\n\n  @Prop({ required: false })\n  tonicSolfa?: string;\n\n  @Prop({ required: true })\n  approved: boolean;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  approver: User;\n\n  @Prop({ required: true })\n  language: string;\n\n  @Prop({ required: false })\n  country?: string;\n\n  @Prop({ required: false })\n  yearComposed?: number;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Genre' }], required: false })\n  genre: Genre[];\n\n  @Prop({ required: false })\n  srtFile?: string;\n\n  @Prop({ required: false })\n  audioFile?: string;\n}\n\nexport type SongDocument = HydratedDocument;\n\nexport const SongSchema = SchemaFactory.createForClass(Song);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SongController.html":{"url":"controllers/SongController.html","title":"controller - SongController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SongController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/song.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                song\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createSongDto: CreateSongDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSongDto\n                                            \n                                                            CreateSongDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateSongDto: UpdateSongDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateSongDto\n                                            \n                                                            UpdateSongDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { SongService } from './song.service';\nimport { CreateSongDto } from './dto/create-song.dto';\nimport { UpdateSongDto } from './dto/update-song.dto';\n\n@Controller('song')\nexport class SongController {\n  constructor(private readonly songService: SongService) {}\n\n  @Post()\n  create(@Body() createSongDto: CreateSongDto) {\n    return this.songService.create(createSongDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.songService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.songService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateSongDto: UpdateSongDto) {\n    return this.songService.update(+id, updateSongDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.songService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SongModule.html":{"url":"modules/SongModule.html","title":"module - SongModule","body":"\n                   \n\n\n\n\n    Modules\n    SongModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SongModule\n\n\n\ncluster_SongModule_providers\n\n\n\n\nSongService\n\nSongService\n\n\n\nSongModule\n\nSongModule\n\nSongModule -->\n\nSongService->SongModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/song/song.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SongService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SongController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SongService } from './song.service';\nimport { SongController } from './song.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Song, SongSchema } from './entities/song.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Song.name,\n        schema: SongSchema,\n      },\n    ]),\n  ],\n  controllers: [SongController],\n  providers: [SongService],\n})\nexport class SongModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SongService.html":{"url":"injectables/SongService.html","title":"injectable - SongService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SongService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/song.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createSongDto: CreateSongDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSongDto\n                                            \n                                                            CreateSongDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateSongDto: UpdateSongDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateSongDto\n                                            \n                                                            UpdateSongDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateSongDto } from './dto/create-song.dto';\nimport { UpdateSongDto } from './dto/update-song.dto';\n\n@Injectable()\nexport class SongService {\n  create(createSongDto: CreateSongDto) {\n    return 'This action adds a new song';\n  }\n\n  findAll() {\n    return `This action returns all song`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} song`;\n  }\n\n  update(id: number, updateSongDto: UpdateSongDto) {\n    return `This action updates a #${id} song`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} song`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentDto.html":{"url":"classes/UpdateCommentDto.html","title":"class - UpdateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/dto/update-comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCommentDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCommentDto } from './create-comment.dto';\n\nexport class UpdateCommentDto extends PartialType(CreateCommentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateComposerDto.html":{"url":"classes/UpdateComposerDto.html","title":"class - UpdateComposerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateComposerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/dto/update-composer.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateComposerDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateComposerDto } from './create-composer.dto';\n\nexport class UpdateComposerDto extends PartialType(CreateComposerDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCountryDto.html":{"url":"classes/UpdateCountryDto.html","title":"class - UpdateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/update-country.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCountryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCountryDto } from './create-country.dto';\n\nexport class UpdateCountryDto extends PartialType(CreateCountryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateGenreDto.html":{"url":"classes/UpdateGenreDto.html","title":"class - UpdateGenreDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateGenreDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/dto/update-genre.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateGenreDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateGenreDto } from './create-genre.dto';\n\nexport class UpdateGenreDto extends PartialType(CreateGenreDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLanguageDto.html":{"url":"classes/UpdateLanguageDto.html","title":"class - UpdateLanguageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLanguageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/dto/update-language.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateLanguageDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateLanguageDto } from './create-language.dto';\n\nexport class UpdateLanguageDto extends PartialType(CreateLanguageDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSongDto.html":{"url":"classes/UpdateSongDto.html","title":"class - UpdateSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/dto/update-song.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateSongDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateSongDto } from './create-song.dto';\n\nexport class UpdateSongDto extends PartialType(CreateSongDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                admin\n                            \n                            \n                                    \n                                city\n                            \n                            \n                                    \n                                    Optional\n                                comments\n                            \n                            \n                                    \n                                contributions\n                            \n                            \n                                    \n                                country\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                province\n                            \n                            \n                                    \n                                userName\n                            \n                            \n                                    \n                                verified\n                            \n                            \n                                    \n                                vetter\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        admin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contributions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Song[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, match: /\\b[\\w\\d\\W\\D]+(?:@(?:[\\w\\d\\W\\D]+(?:\\.(?:[\\w\\d\\W\\D]+))))\\b/gi, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, match: /^(\\+[0-9]{1,4}\\s)?[0-9]{5,15}$/gi, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        province\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vetter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Song } from 'src/modules/song/entities/song.entity';\n\n@Schema({ collection: 'User' })\nexport class User {\n  @Prop({ required: true })\n  firstName: string;\n\n  @Prop({ required: true })\n  lastName: string;\n\n  @Prop({ unique: true, required: true })\n  userName: string;\n\n  @Prop({ default: false })\n  verified: boolean;\n\n  @Prop({\n    unique: true,\n    match: /\\b[\\w\\d\\W\\D]+(?:@(?:[\\w\\d\\W\\D]+(?:\\.(?:[\\w\\d\\W\\D]+))))\\b/gi,\n    required: true,\n  })\n  email: string;\n\n  @Prop({\n    unique: true,\n    match: /^(\\+[0-9]{1,4}\\s)?[0-9]{5,15}$/gi,\n    required: true,\n  })\n  phone: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ required: true })\n  country: string;\n\n  @Prop({ required: true })\n  address: string;\n\n  @Prop({ required: true })\n  city: string;\n\n  @Prop({ required: true })\n  province: string;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], required: false })\n  comments?: Comment[];\n\n  @Prop({ default: false })\n  vetter: boolean;\n\n  @Prop({ default: false })\n  admin: boolean;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Song' }], required: false })\n  contributions: Song[];\n}\n\nexport type UserDocument = HydratedDocument;\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './entities/user.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UserService {\n  create(createUserDto: CreateUserDto) {\n    return 'This action adds a new user';\n  }\n\n  findAll() {\n    return `This action returns all user`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} user`;\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            env\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/factory/controller-method.factory.ts\n            \n            function\n            controllerMethodwrapper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/factory/controller-method.factory.ts\n            \n            variable\n            ControllerMethodProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/factory/id-method.factory.ts\n            \n            function\n            idMethodwrapper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/factory/id-method.factory.ts\n            \n            variable\n            IdMethodProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/factory/paginated-method.factory.ts\n            \n            function\n            paginatedMethodwrapper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/factory/paginated-method.factory.ts\n            \n            variable\n            PaginatedMethodProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/schemas/response.schema.ts\n            \n            class\n            AppPaginatedResponse\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/components/schemas/response.schema.ts\n            \n            class\n            AppResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/schemas/response.schema.ts\n            \n            class\n            PageData\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/schemas/response.schema.ts\n            \n            class\n            PostResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/comment/comment.controller.ts\n            \n            controller\n            CommentController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/comment/comment.service.ts\n            \n            injectable\n            CommentService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/comment/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/comment/dto/update-comment.dto.ts\n            \n            class\n            UpdateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/comment/entities/comment.entity.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/comment/entities/comment.entity.ts\n            \n            variable\n            CommentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/composer/composer.controller.ts\n            \n            controller\n            ComposerController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/composer/composer.service.ts\n            \n            injectable\n            ComposerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/composer/dto/create-composer.dto.ts\n            \n            class\n            CreateComposerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/composer/dto/update-composer.dto.ts\n            \n            class\n            UpdateComposerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/composer/entities/composer.entity.ts\n            \n            class\n            Composer\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/composer/entities/composer.entity.ts\n            \n            variable\n            ComposerSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.controller.ts\n            \n            controller\n            CountriesController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.service.ts\n            \n            injectable\n            CountriesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/create-country.dto.ts\n            \n            class\n            CreateCountryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/update-country.dto.ts\n            \n            class\n            UpdateCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/entities/country.entity.ts\n            \n            class\n            Country\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/countries/entities/country.entity.ts\n            \n            variable\n            CountrySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/genre/dto/create-genre.dto.ts\n            \n            class\n            CreateGenreDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/genre/dto/update-genre.dto.ts\n            \n            class\n            UpdateGenreDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/genre/entities/genre.entity.ts\n            \n            class\n            Genre\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/genre/entities/genre.entity.ts\n            \n            variable\n            GenreSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/genre/genre.controller.ts\n            \n            controller\n            GenreController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/genre/genre.service.ts\n            \n            injectable\n            GenreService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/languages/dto/create-language.dto.ts\n            \n            class\n            CreateLanguageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/languages/dto/update-language.dto.ts\n            \n            class\n            UpdateLanguageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/languages/entities/language.entity.ts\n            \n            class\n            Language\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/languages/entities/language.entity.ts\n            \n            variable\n            LanguageSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/languages/languages.controller.ts\n            \n            controller\n            LanguagesController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/languages/languages.service.ts\n            \n            injectable\n            LanguagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/song/dto/create-song.dto.ts\n            \n            class\n            CreateSongDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/song/dto/update-song.dto.ts\n            \n            class\n            UpdateSongDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/song/entities/song.entity.ts\n            \n            class\n            Song\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/modules/song/entities/song.entity.ts\n            \n            variable\n            SongSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/song/song.controller.ts\n            \n            controller\n            SongController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/song/song.service.ts\n            \n            injectable\n            SongService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^10.0.1\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.14\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            dotenv : ^16.3.1\n        \n            mongodb : ^5.9.1\n        \n            mongoose : ^7.6.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            controllerMethodwrapper   (src/.../controller-method.factory.ts)\n                        \n                        \n                            idMethodwrapper   (src/.../id-method.factory.ts)\n                        \n                        \n                            paginatedMethodwrapper   (src/.../paginated-method.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/components/factory/controller-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        controllerMethodwrapper\n                        \n                    \n                \n            \n            \n                \ncontrollerMethodwrapper(method, errorMessage?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                method\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                errorMessage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/components/factory/id-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        idMethodwrapper\n                        \n                    \n                \n            \n            \n                \nidMethodwrapper(method, id)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                method\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/components/factory/paginated-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        paginatedMethodwrapper\n                        \n                    \n                \n            \n            \n                \npaginatedMethodwrapper(method, page: number, limit: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                method\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ComposerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GenreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LanguagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SongModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\ncluster_ComposerModule\n\n\n\ncluster_ComposerModule_providers\n\n\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_GenreModule\n\n\n\ncluster_GenreModule_providers\n\n\n\ncluster_LanguagesModule\n\n\n\ncluster_LanguagesModule_providers\n\n\n\ncluster_SongModule\n\n\n\ncluster_SongModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCommentModule\n\nCommentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nComposerModule\n\nComposerModule\n\nAppModule -->\n\nComposerModule->AppModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nAppModule -->\n\nCountriesModule->AppModule\n\n\n\n\n\nGenreModule\n\nGenreModule\n\nAppModule -->\n\nGenreModule->AppModule\n\n\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nAppModule -->\n\nLanguagesModule->AppModule\n\n\n\n\n\nSongModule\n\nSongModule\n\nAppModule -->\n\nSongModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\nComposerService\n\nComposerService\n\nComposerModule -->\n\nComposerService->ComposerModule\n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\nGenreService\n\nGenreService\n\nGenreModule -->\n\nGenreService->GenreModule\n\n\n\n\n\nLanguagesService\n\nLanguagesService\n\nLanguagesModule -->\n\nLanguagesService->LanguagesModule\n\n\n\n\n\nSongService\n\nSongService\n\nSongModule -->\n\nSongService->SongModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    25 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentDocument   (src/.../comment.entity.ts)\n                        \n                        \n                            ComposerDocument   (src/.../composer.entity.ts)\n                        \n                        \n                            CountryDocument   (src/.../country.entity.ts)\n                        \n                        \n                            GenreDocument   (src/.../genre.entity.ts)\n                        \n                        \n                            LanguageDocument   (src/.../language.entity.ts)\n                        \n                        \n                            SongDocument   (src/.../song.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/comment/entities/comment.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CommentDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/composer/entities/composer.entity.ts\n    \n    \n        \n            \n                \n                    \n                    ComposerDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/countries/entities/country.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CountryDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/genre/entities/genre.entity.ts\n    \n    \n        \n            \n                \n                    \n                    GenreDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/languages/entities/language.entity.ts\n    \n    \n        \n            \n                \n                    \n                    LanguageDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/song/entities/song.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SongDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/user/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentSchema   (src/.../comment.entity.ts)\n                        \n                        \n                            ComposerSchema   (src/.../composer.entity.ts)\n                        \n                        \n                            ControllerMethodProvider   (src/.../controller-method.factory.ts)\n                        \n                        \n                            CountrySchema   (src/.../country.entity.ts)\n                        \n                        \n                            env   (src/.../app.module.ts)\n                        \n                        \n                            GenreSchema   (src/.../genre.entity.ts)\n                        \n                        \n                            IdMethodProvider   (src/.../id-method.factory.ts)\n                        \n                        \n                            LanguageSchema   (src/.../language.entity.ts)\n                        \n                        \n                            PaginatedMethodProvider   (src/.../paginated-method.factory.ts)\n                        \n                        \n                            SongSchema   (src/.../song.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/comment/entities/comment.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Comment)\n                    \n                \n\n\n        \n    \n\n    src/modules/composer/entities/composer.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ComposerSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Composer)\n                    \n                \n\n\n        \n    \n\n    src/components/factory/controller-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ControllerMethodProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: 'CONTROLLER_METHOD_WRAPPER',\n  useValue: controllerMethodwrapper,\n  scope: Scope.REQUEST,\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/countries/entities/country.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CountrySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Country)\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        env\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env\n                    \n                \n\n\n        \n    \n\n    src/modules/genre/entities/genre.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GenreSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Genre)\n                    \n                \n\n\n        \n    \n\n    src/components/factory/id-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IdMethodProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: 'ID_METHOD_WRAPPER',\n  useValue: idMethodwrapper,\n  scope: Scope.REQUEST,\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/languages/entities/language.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LanguageSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Language)\n                    \n                \n\n\n        \n    \n\n    src/components/factory/paginated-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginatedMethodProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: 'PAGINATED_METHOD_WRAPPER',\n  useValue: paginatedMethodwrapper,\n  scope: Scope.REQUEST,\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/song/entities/song.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SongSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Song)\n                    \n                \n\n\n        \n    \n\n    src/modules/user/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
