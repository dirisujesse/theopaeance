var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.206,1,2.593]],["body/modules/AppModule.html",[0,1.808,1,5.206,2,1.523,3,1.523,4,1.705,5,1.705,6,1.523,7,1.705,8,2.381,9,2.976,10,2.976,11,4.221,12,0.019,13,4.221,14,4.221,15,4.221,16,4.221,17,4.221,18,4.221,19,2.381,20,1.705,21,1.705,22,0.174,23,0.154,24,0.154,25,2.656,26,2.528,27,0.713,28,0.843,29,1.811,30,1.021,31,3.462,32,3.462,33,3.462,34,3.462,35,3.462,36,3.462,37,3.462,38,3.462,39,1.303,40,2.656,41,2.976,42,3.462,43,3.462,44,3.462,45,1.523,46,3.462,47,3.462,48,3.462,49,3.462,50,3.462,51,0.174,52,0.184,53,0.012,54,0.012]],["title/classes/AppPaginatedResponse.html",[52,0.198,55,1.943]],["body/classes/AppPaginatedResponse.html",[12,0.018,22,0.165,23,0.146,24,0.146,51,0.295,52,0.248,53,0.011,54,0.011,55,2.435,56,0.762,57,2.11,58,2.049,59,2.899,60,0.507,61,1.587,62,3.079,63,1.866,64,4.049,65,3.27,66,4.049,67,4.049,68,3.782,69,2.165,70,3.282,71,2.859,72,4.634,73,1.398,74,4.655,75,1.066,76,0.564,77,1.025,78,3.776,79,3.282,80,3.282,81,3.282,82,3.282,83,3.282,84,3.282,85,2.596,86,1.369,87,1.526,88,0.594,89,1.717,90,2.291,91,2.291,92,2.291,93,2.291,94,2.291,95,2.291,96,2.291]],["title/classes/AppResponse.html",[52,0.198,59,1.83]],["body/classes/AppResponse.html",[12,0.018,22,0.195,23,0.173,24,0.173,51,0.318,52,0.279,53,0.013,54,0.013,55,2.04,56,0.905,57,2.506,58,1.716,59,2.918,60,0.602,61,1.787,62,2.743,63,1.666,64,3.782,65,3.121,66,3.782,67,3.782,68,3.879,69,2.439,71,2.801,72,4.856,73,1.104,75,1.266,76,0.67,77,0.81,78,2.722,85,2.924,86,1.626,87,1.813,88,0.706,89,2.04,90,3.66,91,2.722,92,2.722,93,2.722,94,2.722,95,2.722,96,2.722,97,5.243]],["title/classes/Comment.html",[52,0.198,98,1.943]],["body/classes/Comment.html",[12,0.019,22,0.178,23,0.158,24,0.158,27,0.615,30,1.05,39,1.339,45,2.915,51,0.283,52,0.19,53,0.012,54,0.012,56,0.826,60,0.55,61,1.679,73,1.284,77,1.085,88,0.892,98,3.465,99,2.484,100,4.335,101,5.651,102,3.41,103,5.651,104,3.35,105,1.98,106,3.944,107,3.944,108,4.47,109,4.054,110,3.559,111,3.439,112,3.559,113,3.559,114,2.288,115,3.559,116,1.854,117,3.57,118,1.984,119,2.578,120,1.485,121,1.566,122,2.73,123,3.059,124,1.984,125,3.944,126,3.059,127,2.484,128,3.059]],["title/controllers/CommentController.html",[129,1.33,130,2.593]],["body/controllers/CommentController.html",[12,0.019,22,0.164,23,0.145,24,0.145,27,0.593,28,0.797,51,0.164,52,0.174,53,0.011,54,0.011,60,0.506,63,1.653,73,1.307,75,1.909,76,1.011,77,0.908,88,1.249,98,1.713,105,2.016,129,1.172,130,3.243,131,1.172,132,2.814,133,1.825,134,1.749,135,1.245,136,2.213,137,1.749,138,1.749,139,1.749,140,2.814,141,3.85,142,3.012,143,3.274,144,2.223,145,3.274,146,1.232,147,2.591,148,3.274,149,2.309,150,1.232,151,2.591,152,3.274,153,1.232,154,4.357,155,2.591,156,3.274,157,2.591,158,1.825,159,1.825,160,1.825,161,3.224,162,2.814,163,1.232,164,3.564,165,1.232,166,3.274,167,2.285,168,1.523,169,2.285,170,2.337,171,3.274,172,3.274,173,1.825,174,3.274,175,2.511,176,3.274,177,1.825,178,3.274]],["title/modules/CommentModule.html",[0,1.206,11,2.388]],["body/modules/CommentModule.html",[0,2.034,2,1.923,3,1.923,4,2.153,5,2.153,6,1.923,7,3.087,8,2.153,11,4.518,12,0.019,19,2.785,20,2.153,21,2.153,22,0.219,23,0.194,24,0.194,26,2.286,27,0.692,28,1.065,29,2.286,30,1.289,51,0.219,52,0.233,53,0.014,54,0.014,76,0.751,98,2.286,116,1.645,127,3.946,130,4.374,131,2.024,161,4.196,162,3.757,179,3.757,180,3.757,181,4.37,182,4.37,183,4.37,184,2.437,185,4.37]],["title/injectables/CommentService.html",[161,2.217,186,1.33]],["body/injectables/CommentService.html",[12,0.019,22,0.174,23,0.154,24,0.154,27,0.562,28,0.846,51,0.174,52,0.185,53,0.012,54,0.012,60,0.536,63,1.696,71,2.63,73,1.336,75,1.959,76,1.037,77,0.932,88,1.149,98,3.32,134,1.822,135,1.298,136,2.271,137,1.822,138,1.822,139,1.822,140,4.162,141,3.788,144,2.415,146,1.822,149,2.353,150,1.822,153,1.822,154,4.336,161,2.89,163,1.306,164,3.714,165,1.306,170,2.388,186,1.733,187,1.816,188,2.984,189,3.471,190,3.471,191,3.471,192,3.471,193,3.471,194,4.429,195,2.423,196,1.614,197,2.423,198,2.423]],["title/classes/Composer.html",[52,0.198,199,2.071]],["body/classes/Composer.html",[12,0.019,22,0.134,23,0.119,24,0.119,27,0.485,30,0.788,39,1.006,45,3.229,51,0.241,52,0.142,53,0.01,54,0.01,56,0.62,60,0.413,61,1.366,73,1.426,77,1.082,88,1.305,102,2.63,105,2.199,106,1.865,107,1.865,108,1.865,109,4.141,111,3.727,114,4.004,116,1.508,117,3.826,118,1.49,119,2.096,120,1.115,121,1.176,122,2.05,124,1.49,125,1.865,199,2.68,200,1.865,201,4.132,202,4.132,203,2.115,204,4.132,205,4.132,206,4.132,207,4.132,208,4.132,209,4.132,210,4.807,211,4.132,212,2.672,213,2.672,214,2.672,215,2.797,216,4.59,217,3.444,218,2.672,219,2.672,220,2.672,221,2.672,222,3.074,223,3.444,224,3.444,225,2.672,226,2.672,227,2.672,228,3.074,229,2.297,230,2.672,231,2.05,232,2.797,233,2.297,234,1.865,235,2.297]],["title/controllers/ComposerController.html",[129,1.33,236,2.593]],["body/controllers/ComposerController.html",[12,0.019,22,0.163,23,0.145,24,0.145,27,0.591,28,0.793,51,0.163,52,0.173,53,0.011,54,0.011,60,0.503,63,1.649,73,1.305,75,1.904,76,1.008,77,0.906,88,1.247,105,2.012,129,1.166,131,1.166,133,1.816,134,1.742,135,1.241,136,2.207,137,1.742,138,1.742,139,2.027,142,3.003,144,2.218,146,1.226,147,2.581,149,2.305,150,1.226,151,2.581,153,1.226,155,2.581,157,2.581,158,1.816,159,1.816,160,1.816,163,1.226,165,1.226,167,2.273,168,1.515,169,2.273,170,2.332,173,1.816,177,1.816,199,1.816,236,3.231,237,2.8,238,2.8,239,3.843,240,3.257,241,3.257,242,3.257,243,3.257,244,4.352,245,3.257,246,3.215,247,2.8,248,3.551,249,3.257,250,3.257,251,3.257,252,3.257,253,2.273,254,3.257,255,3.257]],["title/modules/ComposerModule.html",[0,1.206,13,2.388]],["body/modules/ComposerModule.html",[0,2.034,2,1.923,3,1.923,4,2.153,5,2.153,6,1.923,7,3.087,8,2.153,12,0.019,13,4.518,19,2.785,20,2.153,21,2.153,22,0.219,23,0.194,24,0.194,26,2.286,27,0.692,28,1.065,29,2.286,30,1.289,51,0.219,52,0.233,53,0.014,54,0.014,76,0.751,116,1.645,131,2.024,184,2.437,199,2.437,234,3.946,236,4.374,246,4.196,247,3.757,256,3.757,257,3.757,258,4.37,259,4.37,260,4.37,261,4.37]],["title/injectables/ComposerService.html",[186,1.33,246,2.217]],["body/injectables/ComposerService.html",[12,0.019,22,0.174,23,0.154,24,0.154,27,0.562,28,0.846,51,0.174,52,0.185,53,0.012,54,0.012,60,0.536,63,1.696,71,2.63,73,1.336,75,1.959,76,1.037,77,0.932,88,1.149,134,1.822,135,1.298,136,2.271,137,1.822,138,1.822,139,1.822,144,2.415,146,1.822,149,2.353,150,1.822,153,1.822,163,1.306,165,1.306,170,2.388,186,1.733,187,1.816,194,4.429,195,2.423,196,1.614,197,2.423,198,2.423,199,3.538,238,4.162,239,3.788,244,4.336,246,2.89,248,3.714,262,2.984,263,3.471,264,3.471,265,3.471,266,3.471,267,3.471]],["title/controllers/CountriesController.html",[129,1.33,268,2.593]],["body/controllers/CountriesController.html",[12,0.019,22,0.102,23,0.09,24,0.09,27,0.542,28,0.495,39,2.022,51,0.102,52,0.108,53,0.008,54,0.008,55,1.063,59,1.001,60,0.314,62,1.696,63,1.51,64,1.935,65,2.883,66,1.935,67,1.935,68,2.996,69,0.945,71,2.419,73,1.131,75,1.744,76,0.924,77,0.83,86,0.848,88,1.164,105,1.744,129,0.728,131,0.728,133,1.133,134,1.22,135,1.084,136,1.522,137,1.22,138,1.22,139,1.522,142,2.255,144,1.923,146,0.765,147,1.808,149,1.923,150,0.765,151,1.808,153,0.765,155,1.808,157,2.255,158,1.133,159,1.133,160,1.133,163,0.765,165,0.765,168,1.508,170,2.419,173,1.133,177,1.133,196,2.146,203,0.895,253,1.419,268,2.263,269,1.747,270,1.747,271,4.107,272,2.6,273,1.747,274,3.207,275,2.033,276,3.585,277,1.419,278,3.763,279,2.033,280,2.033,281,2.033,282,1.307,283,2.487,284,2.033,285,1.935,286,3.763,287,2.033,288,1.559,289,1.213,290,1.747,291,2.414,292,1.747,293,2.487,294,1.213,295,1.559,296,2.033,297,1.935,298,1.559,299,1.559,300,3.77,301,4.121,302,4.745,303,2.033,304,2.787,305,2.787,306,2.787,307,2.787,308,2.033,309,2.787,310,2.787,311,2.787,312,2.787,313,2.787,314,2.787,315,1.747,316,2.033,317,2.033,318,2.033,319,2.033]],["title/modules/CountriesModule.html",[0,1.206,14,2.388]],["body/modules/CountriesModule.html",[0,1.96,2,1.782,3,1.782,4,1.994,5,1.994,6,1.782,7,2.974,8,1.994,12,0.019,14,4.424,19,2.649,20,1.994,21,1.994,22,0.203,23,0.18,24,0.18,26,2.118,27,0.719,28,0.986,29,2.118,30,1.194,51,0.203,52,0.216,53,0.013,54,0.013,76,0.696,116,1.524,131,1.925,184,2.257,203,1.782,268,4.214,291,4.108,292,3.48,295,3.106,320,3.48,321,3.48,322,4.049,323,4.049,324,3.753,325,3.457,326,4.049,327,4.631,328,3.753,329,2.603,330,3.457,331,2.417,332,4.049]],["title/injectables/CountriesService.html",[186,1.33,291,2.217]],["body/injectables/CountriesService.html",[12,0.019,22,0.098,23,0.087,24,0.087,27,0.559,28,0.476,30,0.576,39,2.088,45,0.86,51,0.098,52,0.104,53,0.008,54,0.008,60,0.302,62,1.643,63,1.56,65,2.842,69,1.461,71,2.394,73,1.168,75,1.801,76,1.051,77,0.857,86,0.815,87,0.909,88,1.152,89,1.022,121,0.86,134,1.182,135,0.842,136,1.182,137,1.182,138,1.182,139,1.482,144,1.89,146,1.182,149,1.987,150,1.182,153,0.735,163,0.735,165,0.735,168,1.832,170,2.35,186,1.125,187,1.022,196,1.461,203,1.382,270,2.7,271,4.137,272,2.532,273,2.7,274,2.951,276,3.547,277,2.193,278,3.929,282,1.256,285,2.693,286,3.709,289,1.167,291,1.875,293,2.41,294,1.167,295,1.499,297,2.351,300,3.858,333,1.68,334,1.954,335,3.461,336,3.386,337,3.022,338,1.954,339,3.142,340,1.954,341,1.954,342,1.954,343,1.954,344,1.954,345,1.954,346,1.68,347,1.499,348,1.954,349,1.68,350,1.499,351,1.499,352,1.954,353,1.499,354,1.499,355,2.7,356,2.7,357,3.878,358,4.512,359,2.7,360,1.954,361,3.142,362,2.41,363,2.7,364,2.7,365,2.7,366,2.41,367,2.7,368,1.68,369,1.68,370,1.499,371,1.68,372,4.249,373,1.499,374,1.499,375,3.939,376,1.167,377,1.499,378,1.499,379,2.7,380,1.954,381,3.022,382,1.954,383,1.954,384,1.954]],["title/classes/Country.html",[52,0.198,203,1.635]],["body/classes/Country.html",[12,0.019,22,0.204,23,0.18,24,0.18,27,0.543,30,1.198,39,1.529,45,2.834,51,0.303,52,0.216,53,0.013,54,0.013,56,0.943,60,0.627,61,1.836,73,1.356,76,1.04,77,1.035,88,1.292,105,2.091,116,2.028,117,3.919,118,2.265,119,2.819,121,1.787,124,2.265,203,2.661,215,3.761,232,3.761,324,2.835,376,3.609,377,4.638,378,4.638,385,2.835,386,4.062,387,4.062,388,4.062,389,4.062,390,3.491,391,3.491]],["title/classes/CreateCommentDto.html",[52,0.198,141,2.217]],["body/classes/CreateCommentDto.html",[12,0.017,22,0.285,23,0.252,24,0.252,51,0.285,52,0.303,53,0.016,54,0.016,56,1.32,141,3.968,392,4.887,393,4.361]],["title/classes/CreateComposerDto.html",[52,0.198,239,2.217]],["body/classes/CreateComposerDto.html",[12,0.017,22,0.285,23,0.252,24,0.252,51,0.285,52,0.303,53,0.016,54,0.016,56,1.32,239,3.968,394,4.887,395,4.361]],["title/classes/CreateCountryDto.html",[52,0.198,274,2.217]],["body/classes/CreateCountryDto.html",[12,0.018,22,0.186,23,0.164,24,0.164,27,0.374,51,0.186,52,0.27,53,0.012,54,0.012,56,0.86,60,0.572,61,1.726,73,1.306,76,1.18,77,0.958,87,3.25,88,1.321,105,2.014,274,3.023,376,4.098,377,5.266,378,5.266,396,5.584,397,2.842,398,4.759,399,4.759,400,6.008,401,3.705,402,3.705,403,3.705,404,3.705,405,4.983,406,4.983,407,2.586]],["title/classes/CreateGenreDto.html",[52,0.198,408,2.217]],["body/classes/CreateGenreDto.html",[12,0.018,22,0.243,23,0.216,24,0.216,27,0.49,51,0.243,52,0.322,53,0.015,54,0.015,56,1.127,60,0.75,61,2.06,73,1.023,76,1.259,77,0.75,87,2.811,88,1.192,105,1.577,109,3.608,398,3.725,399,3.725,405,4.637,406,4.637,407,3.39,408,3.608,409,5.196,410,3.725,411,4.857]],["title/classes/CreateLanguageDto.html",[52,0.198,412,2.217]],["body/classes/CreateLanguageDto.html",[12,0.018,22,0.209,23,0.185,24,0.185,27,0.42,51,0.209,52,0.292,53,0.013,54,0.013,56,0.968,60,0.644,61,1.868,73,1.154,76,1.216,77,0.847,87,3.227,88,1.256,105,1.78,376,4.334,398,4.205,399,4.205,400,5.265,405,4.698,406,4.698,407,2.91,412,3.272,413,5.265,414,3.198,415,4.169,416,5.593,417,5.482,418,5.265,419,4.169,420,4.169,421,4.169]],["title/classes/CreateSongDto.html",[52,0.198,422,2.217]],["body/classes/CreateSongDto.html",[12,0.017,22,0.285,23,0.252,24,0.252,51,0.285,52,0.303,53,0.016,54,0.016,56,1.32,422,3.968,423,4.887,424,4.361]],["title/classes/CreateUserDto.html",[52,0.198,425,2.217]],["body/classes/CreateUserDto.html",[12,0.017,22,0.285,23,0.252,24,0.252,51,0.285,52,0.303,53,0.016,54,0.016,56,1.32,425,3.968,426,4.887,427,4.361]],["title/classes/Genre.html",[52,0.198,428,2.071]],["body/classes/Genre.html",[12,0.018,22,0.236,23,0.209,24,0.209,27,0.598,30,1.389,39,1.773,45,2.61,51,0.325,52,0.251,53,0.014,54,0.014,56,1.094,60,0.728,61,2.021,73,0.992,76,1.116,77,0.916,88,1.074,105,1.53,109,2.813,114,3.029,116,2.232,117,3.307,118,2.627,119,3.103,121,2.074,124,2.627,428,3.619,429,3.289,430,4.712,431,4.05,432,3.289,433,4.05]],["title/controllers/GenreController.html",[129,1.33,434,2.593]],["body/controllers/GenreController.html",[12,0.019,22,0.116,23,0.103,24,0.103,27,0.572,28,0.564,39,2.137,51,0.116,52,0.123,53,0.009,54,0.009,59,1.141,60,0.358,63,1.509,68,3.166,69,1.077,73,1.196,75,1.742,76,0.923,77,0.829,86,0.966,88,1.203,105,1.843,129,0.829,131,0.829,133,1.291,134,1.352,135,1.179,136,1.866,137,1.352,138,1.352,139,1.656,142,2.453,144,2.033,146,0.871,147,2.003,149,2.033,150,0.871,151,2.003,153,0.871,155,2.003,157,2.453,158,1.291,159,1.291,160,1.291,163,0.871,165,0.871,168,1.67,170,2.5,173,1.291,177,1.291,253,1.616,271,4.105,272,2.309,276,3.704,282,1.488,283,2.755,285,2.144,288,1.776,289,1.382,294,1.382,297,2.144,298,1.776,299,1.776,300,3.389,301,4.356,302,5.096,408,3.389,428,2.003,434,2.507,435,1.99,436,1.99,437,2.316,438,2.316,439,2.316,440,2.316,441,2.316,442,3.936,443,2.316,444,2.626,445,1.99,446,2.755,447,1.776,448,2.316,449,2.316,450,2.316,451,2.316,452,2.316,453,2.316,454,2.316,455,2.316]],["title/modules/GenreModule.html",[0,1.206,15,2.388]],["body/modules/GenreModule.html",[0,1.988,2,1.834,3,1.834,4,2.053,5,2.053,6,1.834,7,3.017,8,2.053,12,0.019,15,4.461,19,2.7,20,2.053,21,2.053,22,0.209,23,0.185,24,0.185,26,2.181,27,0.713,28,1.015,29,2.181,30,1.229,51,0.209,52,0.222,53,0.013,54,0.013,76,0.717,116,1.569,131,1.962,184,2.324,325,3.524,327,4.205,330,3.524,331,2.488,428,2.324,432,3.826,434,4.275,444,4.142,445,3.583,447,3.198,456,3.583,457,3.583,458,4.169,459,4.169,460,2.68,461,4.169]],["title/injectables/GenreService.html",[186,1.33,444,2.217]],["body/injectables/GenreService.html",[12,0.019,22,0.134,23,0.119,24,0.119,27,0.628,28,0.651,30,0.788,39,1.006,45,1.176,51,0.134,52,0.142,53,0.01,54,0.01,60,0.413,63,1.688,69,1.863,73,1.265,75,1.95,76,1.071,77,0.928,78,1.865,86,1.115,87,1.863,88,1.243,121,1.176,134,1.508,135,1.074,136,1.508,137,1.508,138,1.508,139,1.508,144,2.048,146,1.508,149,2.23,150,1.508,153,1.508,163,1.006,165,1.006,168,1.863,170,2.411,186,1.434,187,1.398,196,1.243,203,1.176,271,3.91,276,3.349,285,2.869,289,1.595,294,1.595,297,2.392,300,3.187,335,4.096,337,3.687,347,2.05,350,2.05,351,2.05,353,2.05,354,2.05,362,2.05,366,2.05,373,2.05,374,2.05,381,3.687,408,3.415,428,2.234,436,3.444,442,4.118,444,2.392,446,3.074,447,2.05,462,2.297,463,2.672,464,2.672,465,4.007,466,2.672,467,4.007,468,2.672,469,2.672,470,2.672,471,2.672,472,2.672,473,2.672,474,2.672,475,2.672,476,2.672,477,2.672,478,2.672,479,2.297]],["title/classes/Language.html",[52,0.198,480,2.071]],["body/classes/Language.html",[12,0.018,22,0.216,23,0.191,24,0.191,27,0.565,30,1.271,39,1.622,45,3.082,51,0.312,52,0.23,53,0.014,54,0.014,56,1.001,60,0.666,61,1.91,73,1.18,76,1.07,77,0.962,88,1.194,105,1.819,116,2.109,117,3.471,118,2.404,119,2.931,121,1.897,124,2.404,215,3.911,232,3.911,376,3.716,416,4.816,418,4.816,480,3.471,481,3.009,482,5.603,483,4.311,484,4.311,485,3.705,486,3.009,487,3.705]],["title/controllers/LanguagesController.html",[129,1.33,488,2.593]],["body/controllers/LanguagesController.html",[12,0.019,22,0.102,23,0.091,24,0.091,27,0.543,28,0.498,39,2.026,51,0.102,52,0.109,53,0.008,54,0.008,55,1.069,59,1.006,60,0.315,62,1.703,63,1.514,64,1.943,65,2.888,66,1.943,67,1.943,68,3.002,69,0.95,71,2.423,73,1.134,75,1.748,76,0.926,77,0.832,86,0.852,88,1.166,105,1.748,129,0.731,131,0.731,133,1.139,134,1.225,135,1.087,136,1.527,137,1.225,138,1.225,139,1.527,142,2.262,144,1.928,146,0.769,147,1.815,149,2.022,150,0.769,151,1.815,153,0.769,155,1.815,157,2.262,158,1.139,159,1.139,160,1.139,163,0.769,165,0.769,168,1.514,170,2.423,173,1.139,177,1.139,196,2.152,253,1.426,271,4.11,272,2.608,276,3.589,277,1.426,278,3.769,282,1.313,283,2.497,285,1.943,288,1.567,289,1.219,290,1.756,294,1.219,297,1.943,298,1.567,299,1.567,300,3.214,301,4.13,302,4.752,304,2.798,305,2.798,306,2.798,307,2.798,309,2.798,310,2.798,311,2.798,312,2.798,313,2.798,314,2.798,315,1.756,412,3.214,480,1.139,488,2.272,489,1.756,490,2.043,491,1.756,492,2.043,493,2.043,494,2.043,495,2.043,496,2.043,497,3.769,498,2.043,499,2.422,500,1.756,501,2.497,502,1.567,503,2.043,504,2.043,505,2.043,506,2.043,507,2.043,508,2.043,509,2.043]],["title/modules/LanguagesModule.html",[0,1.206,16,2.388]],["body/modules/LanguagesModule.html",[0,1.96,2,1.782,3,1.782,4,1.994,5,1.994,6,1.782,7,2.974,8,1.994,12,0.019,16,4.424,19,2.649,20,1.994,21,1.994,22,0.203,23,0.18,24,0.18,26,2.118,27,0.719,28,0.986,29,2.118,30,1.194,51,0.203,52,0.216,53,0.013,54,0.013,76,0.696,116,1.524,131,1.925,184,2.257,325,3.457,327,4.631,328,3.753,329,2.603,330,3.457,331,2.417,460,2.603,480,2.257,486,3.753,488,4.214,499,4.108,500,3.48,502,3.106,510,3.48,511,3.48,512,4.049,513,4.049,514,4.049]],["title/injectables/LanguagesService.html",[186,1.33,499,2.217]],["body/injectables/LanguagesService.html",[12,0.019,22,0.098,23,0.087,24,0.087,27,0.56,28,0.478,30,0.578,39,1.99,45,0.863,51,0.098,52,0.104,53,0.008,54,0.008,60,0.303,62,1.648,63,1.562,65,2.846,69,1.465,71,2.396,73,1.17,75,1.804,76,1.075,77,0.858,86,0.818,87,1.465,88,1.153,89,1.026,121,0.863,134,1.185,135,0.844,136,1.185,137,1.185,138,1.185,139,1.485,144,1.893,146,1.185,149,2.068,150,1.185,153,0.738,163,0.738,165,0.738,168,1.836,170,2.352,186,1.127,187,1.026,196,1.465,203,0.863,271,4.139,272,2.537,276,3.411,277,2.198,278,3.932,282,1.26,285,2.698,289,1.17,294,1.17,297,2.356,300,3.861,335,3.467,336,3.393,337,3.028,346,1.685,347,1.504,349,1.685,350,1.504,351,1.504,353,1.504,354,1.504,355,2.707,356,2.707,357,3.885,359,2.707,362,2.416,363,2.707,364,2.707,365,2.707,366,2.416,367,2.707,368,1.685,369,1.685,370,1.504,371,1.685,372,4.256,373,1.504,374,1.504,376,1.88,379,3.885,381,3.028,412,2.955,479,1.685,480,1.756,491,2.707,497,3.714,499,1.88,501,2.416,502,1.504,515,1.685,516,1.96,517,1.96,518,3.149,519,1.96,520,1.96,521,1.96,522,1.96,523,1.96,524,1.96,525,1.96,526,1.96,527,1.96,528,4.52,529,1.96,530,3.149,531,1.96,532,1.96,533,1.96,534,1.96]],["title/interfaces/PageData.html",[85,2.071,89,1.943]],["body/interfaces/PageData.html",[12,0.019,22,0.182,23,0.161,24,0.161,51,0.308,52,0.266,53,0.012,54,0.012,55,1.899,57,2.334,58,1.598,59,2.46,60,0.561,61,1.702,62,3.374,63,1.729,64,4.076,65,3.363,66,4.076,67,4.076,68,3.807,69,1.688,71,2.868,72,4.652,77,1.029,85,2.785,86,1.514,87,1.688,88,0.657,89,2.613,90,2.534,91,2.534,92,2.534,93,2.534,94,2.534,95,2.534,96,2.534,535,2.785]],["title/interfaces/PostResponse.html",[85,2.071,86,1.55]],["body/interfaces/PostResponse.html",[12,0.019,22,0.205,23,0.181,24,0.181,51,0.324,52,0.288,53,0.013,54,0.013,55,2.139,57,2.628,58,1.799,59,2.666,60,0.631,61,1.844,62,2.831,64,3.854,65,3.18,66,3.854,67,3.854,68,3.6,69,1.901,71,2.819,72,4.507,77,0.631,85,3.017,86,2.257,87,3.003,88,1.098,89,2.139,90,2.853,91,2.853,92,2.853,93,2.853,94,2.853,95,2.853,96,2.853,535,3.136]],["title/classes/Song.html",[52,0.198,102,1.83]],["body/classes/Song.html",[12,0.019,22,0.113,23,0.1,24,0.1,27,0.534,30,0.663,39,0.847,45,2.903,51,0.217,52,0.12,53,0.009,54,0.009,56,0.522,60,0.347,61,1.197,63,1.902,71,1.322,73,1.425,77,1.112,88,1.225,98,2.26,102,2.128,104,3.26,105,2.197,106,3.696,107,3.696,108,4.091,109,4.21,111,4.816,114,4.006,116,1.322,117,3.812,118,1.254,119,1.837,120,0.938,121,0.99,123,1.934,124,1.254,125,3.696,199,2.722,203,1.901,228,2.694,428,3.268,480,2.409,536,1.57,537,4.32,538,4.32,539,4.32,540,3.713,541,4.32,542,4.32,543,4.32,544,4.32,545,4.32,546,4.32,547,4.32,548,2.25,549,2.25,550,2.25,551,2.25,552,2.25,553,2.25,554,2.25,555,2.25,556,2.25,557,2.25,558,2.25,559,2.25,560,2.25,561,2.25,562,2.25,563,2.25,564,1.934,565,1.57,566,1.934]],["title/controllers/SongController.html",[129,1.33,567,2.593]],["body/controllers/SongController.html",[12,0.019,22,0.164,23,0.145,24,0.145,27,0.593,28,0.797,51,0.164,52,0.174,53,0.011,54,0.011,60,0.506,63,1.653,73,1.307,75,1.909,76,1.011,77,0.908,88,1.249,102,1.613,105,2.016,129,1.172,131,1.172,133,1.825,134,1.749,135,1.245,136,2.213,137,1.749,138,1.749,139,1.749,142,3.012,144,2.223,146,1.232,147,2.591,149,2.309,150,1.232,151,2.591,153,1.232,155,2.591,157,2.591,158,1.825,159,1.825,160,1.825,163,1.232,165,1.232,167,2.285,168,1.523,169,2.285,170,2.337,173,1.825,175,2.511,177,1.825,422,3.85,567,3.243,568,2.814,569,2.814,570,3.274,571,3.274,572,3.274,573,3.274,574,4.357,575,3.274,576,3.224,577,2.814,578,3.564,579,3.274,580,3.274,581,3.274,582,3.274,583,3.274,584,3.274]],["title/modules/SongModule.html",[0,1.206,17,2.388]],["body/modules/SongModule.html",[0,2.034,2,1.923,3,1.923,4,2.153,5,2.153,6,1.923,7,3.087,8,2.153,12,0.019,17,4.518,19,2.785,20,2.153,21,2.153,22,0.219,23,0.194,24,0.194,26,2.286,27,0.692,28,1.065,29,2.286,30,1.289,51,0.219,52,0.233,53,0.014,54,0.014,76,0.751,102,2.153,116,1.645,131,2.024,184,2.437,565,3.946,567,4.374,576,4.196,577,3.757,585,3.757,586,3.757,587,4.37,588,4.37,589,4.37,590,4.37]],["title/injectables/SongService.html",[186,1.33,576,2.217]],["body/injectables/SongService.html",[12,0.019,22,0.174,23,0.154,24,0.154,27,0.562,28,0.846,51,0.174,52,0.185,53,0.012,54,0.012,60,0.536,63,1.696,71,2.63,73,1.336,75,1.959,76,1.037,77,0.932,88,1.149,102,3.126,134,1.822,135,1.298,136,2.271,137,1.822,138,1.822,139,1.822,144,2.415,146,1.822,149,2.353,150,1.822,153,1.822,163,1.306,165,1.306,170,2.388,186,1.733,187,1.816,194,4.429,195,2.423,196,1.614,197,2.423,198,2.423,422,3.788,569,4.162,574,4.336,576,2.89,578,3.714,591,2.984,592,3.471,593,3.471,594,3.471,595,3.471,596,3.471]],["title/classes/UpdateCommentDto.html",[52,0.198,154,2.388]],["body/classes/UpdateCommentDto.html",[12,0.018,22,0.266,23,0.235,24,0.235,27,0.643,51,0.266,52,0.283,53,0.015,54,0.015,56,1.231,58,2.808,120,2.213,135,1.422,141,3.166,154,4.101,164,4.069,393,4.069,597,4.56,598,6.38,599,2.958,600,2.775]],["title/classes/UpdateComposerDto.html",[52,0.198,244,2.388]],["body/classes/UpdateComposerDto.html",[12,0.018,22,0.266,23,0.235,24,0.235,27,0.643,51,0.266,52,0.283,53,0.015,54,0.015,56,1.231,58,2.808,120,2.213,135,1.422,239,3.166,244,4.101,248,4.069,395,4.069,599,2.958,600,2.775,601,4.56,602,6.38]],["title/classes/UpdateCountryDto.html",[52,0.198,286,2.388]],["body/classes/UpdateCountryDto.html",[12,0.018,22,0.266,23,0.235,24,0.235,27,0.643,51,0.266,52,0.283,53,0.015,54,0.015,56,1.231,58,2.808,120,2.213,135,1.422,274,3.166,286,4.101,293,4.069,397,4.069,599,2.958,600,2.775,603,4.56,604,6.38]],["title/classes/UpdateGenreDto.html",[52,0.198,442,2.388]],["body/classes/UpdateGenreDto.html",[12,0.018,22,0.266,23,0.235,24,0.235,27,0.643,51,0.266,52,0.283,53,0.015,54,0.015,56,1.231,58,2.808,120,2.213,135,1.422,408,3.166,410,4.069,442,4.101,446,4.069,599,2.958,600,2.775,605,4.56,606,6.38]],["title/classes/UpdateLanguageDto.html",[52,0.198,497,2.388]],["body/classes/UpdateLanguageDto.html",[12,0.018,22,0.266,23,0.235,24,0.235,27,0.643,51,0.266,52,0.283,53,0.015,54,0.015,56,1.231,58,2.808,120,2.213,135,1.422,412,3.166,414,4.069,497,4.101,501,4.069,599,2.958,600,2.775,607,4.56,608,6.38]],["title/classes/UpdateSongDto.html",[52,0.198,574,2.388]],["body/classes/UpdateSongDto.html",[12,0.018,22,0.266,23,0.235,24,0.235,27,0.643,51,0.266,52,0.283,53,0.015,54,0.015,56,1.231,58,2.808,120,2.213,135,1.422,422,3.166,424,4.069,574,4.101,578,4.069,599,2.958,600,2.775,609,4.56,610,6.38]],["title/classes/UpdateUserDto.html",[52,0.198,611,2.388]],["body/classes/UpdateUserDto.html",[12,0.018,22,0.266,23,0.235,24,0.235,27,0.643,51,0.266,52,0.283,53,0.015,54,0.015,56,1.231,58,2.808,120,2.213,135,1.422,425,3.166,427,4.069,599,2.958,600,2.775,611,4.101,612,4.56,613,6.38,614,4.069]],["title/classes/User.html",[52,0.198,104,1.943]],["body/classes/User.html",[12,0.019,22,0.114,23,0.101,24,0.101,27,0.439,30,0.671,39,0.856,45,3.21,51,0.218,52,0.121,53,0.009,54,0.009,56,0.528,60,0.351,61,1.207,63,0.996,73,1.443,77,1.098,88,1.287,98,2.276,102,2.419,104,2.276,105,2.224,106,2.472,107,2.472,108,2.472,109,4.16,111,4.462,114,3.783,116,1.333,117,3.855,118,1.268,119,1.853,120,0.949,121,1.001,122,1.744,124,1.268,125,2.472,201,3.739,202,3.739,203,1.914,204,3.739,205,3.739,206,3.739,207,3.739,208,3.739,209,3.739,211,3.739,215,3.036,216,4.221,217,3.044,222,2.717,223,3.044,224,3.044,228,4.323,229,3.739,231,3.337,232,3.036,540,3.739,615,1.587,616,4.35,617,4.35,618,4.35,619,4.35,620,2.274,621,2.274,622,2.274,623,2.274,624,2.274,625,2.274,626,2.274,627,2.274,628,2.274,629,2.274,630,2.274,631,2.274,632,2.274,633,2.274,634,2.274,635,1.955,636,1.587,637,1.955]],["title/controllers/UserController.html",[129,1.33,638,2.593]],["body/controllers/UserController.html",[12,0.019,22,0.164,23,0.145,24,0.145,27,0.593,28,0.797,51,0.164,52,0.174,53,0.011,54,0.011,60,0.506,63,1.653,73,1.307,75,1.909,76,1.011,77,0.908,88,1.249,104,1.713,105,2.016,129,1.172,131,1.172,133,1.825,134,1.749,135,1.245,136,2.213,137,1.749,138,1.749,139,1.749,142,3.012,144,2.223,146,1.232,147,2.591,149,2.309,150,1.232,151,2.591,153,1.232,155,2.591,157,2.591,158,1.825,159,1.825,160,1.825,163,1.232,165,1.232,167,2.285,168,1.523,169,2.285,170,2.337,173,1.825,175,2.511,177,1.825,425,3.85,611,4.357,614,3.564,638,3.243,639,2.814,640,2.814,641,3.274,642,3.274,643,3.274,644,3.274,645,3.274,646,3.224,647,2.814,648,3.274,649,3.274,650,3.274,651,3.274,652,3.274,653,3.274]],["title/modules/UserModule.html",[0,1.206,18,2.388]],["body/modules/UserModule.html",[0,2.034,2,1.923,3,1.923,4,2.153,5,2.153,6,1.923,7,3.087,8,2.153,12,0.019,18,4.518,19,2.785,20,2.153,21,2.153,22,0.219,23,0.194,24,0.194,26,2.286,27,0.692,28,1.065,29,2.286,30,1.289,51,0.219,52,0.233,53,0.014,54,0.014,76,0.751,104,2.286,116,1.645,131,2.024,184,2.437,636,3.946,638,4.374,646,4.196,647,3.757,654,3.757,655,3.757,656,4.37,657,4.37,658,4.37,659,4.37]],["title/injectables/UserService.html",[186,1.33,646,2.217]],["body/injectables/UserService.html",[12,0.019,22,0.174,23,0.154,24,0.154,27,0.562,28,0.846,51,0.174,52,0.185,53,0.012,54,0.012,60,0.536,63,1.696,71,2.63,73,1.336,75,1.959,76,1.037,77,0.932,88,1.149,104,3.32,134,1.822,135,1.298,136,2.271,137,1.822,138,1.822,139,1.822,144,2.415,146,1.822,149,2.353,150,1.822,153,1.822,163,1.306,165,1.306,170,2.388,186,1.733,187,1.816,194,4.429,195,2.423,196,1.614,197,2.423,198,2.423,425,3.788,611,4.336,614,3.714,640,4.162,646,2.89,660,2.984,661,3.471,662,3.471,663,3.471,664,3.471,665,3.471]],["title/coverage.html",[666,3.892]],["body/coverage.html",[6,0.986,12,0.019,24,0.1,25,1.72,40,1.72,52,0.383,53,0.008,54,0.008,55,1.173,57,3.132,59,1.104,77,0.346,85,1.953,86,0.935,89,1.173,98,1.173,99,2.445,102,1.104,104,1.173,127,1.565,129,2.096,130,1.565,132,1.927,141,1.338,154,1.441,161,1.338,186,2.096,188,1.927,196,1.043,199,1.25,200,2.445,203,0.986,222,5.86,234,1.565,236,1.565,237,1.927,239,1.338,244,1.441,246,1.338,262,1.927,268,1.565,269,1.927,274,1.338,286,1.441,291,1.338,324,1.565,325,1.441,328,1.565,329,2.251,330,1.441,331,2.091,333,1.927,385,2.445,392,1.927,393,2.687,394,1.927,395,2.687,396,1.927,397,2.687,408,1.338,409,1.927,410,2.687,412,1.338,413,1.927,414,2.687,422,1.338,423,1.927,424,2.687,425,1.338,426,1.927,427,2.687,428,1.25,429,2.445,432,1.565,434,1.565,435,1.927,442,1.441,444,1.338,460,2.251,462,1.927,480,1.25,481,2.445,486,1.565,488,1.565,489,1.927,497,1.441,499,1.338,515,1.927,536,2.445,565,1.565,567,1.565,568,1.927,574,1.441,576,1.338,591,1.927,597,1.927,601,1.927,603,1.927,605,1.927,607,1.927,609,1.927,611,1.441,612,1.927,615,2.445,636,1.565,638,1.565,639,1.927,646,1.338,660,1.927,666,1.72,667,2.242,668,2.242,669,2.242,670,6.487,671,7.283,672,4.31,673,4.31,674,5.286,675,4.31,676,4.298,677,4.872,678,1.72,679,1.72,680,1.72,681,1.927,682,6.057,683,4.31,684,2.242,685,2.242,686,2.242,687,2.242,688,2.242]],["title/dependencies.html",[3,1.967,689,2.665]],["body/dependencies.html",[3,2.145,12,0.019,28,1.188,30,1.438,52,0.323,53,0.015,54,0.015,120,2.034,121,2.145,407,3.403,600,2.551,690,6.593,691,4.875,692,4.875,693,4.875,694,4.875,695,4.875,696,4.875,697,4.875,698,4.875,699,4.875,700,4.875,701,4.875,702,4.875,703,4.875,704,4.875,705,4.875,706,4.875,707,4.875,708,4.875,709,4.875,710,4.875,711,4.875]],["title/miscellaneous/functions.html",[712,1.85,713,3.841]],["body/miscellaneous/functions.html",[6,2.794,12,0.018,53,0.014,54,0.014,60,0.694,63,1.785,65,2.835,71,2.52,75,2.062,76,1.092,77,0.889,78,3.137,88,1.042,144,2.273,149,2.061,276,3.541,278,3.7,329,2.889,331,2.683,460,2.889,676,5.432,678,4.415,679,4.415,680,4.415,681,3.863,712,2.683,713,3.863,714,4.495,715,3.863,716,3.863,717,3.863,718,4.495,719,5.756,720,6.35,721,4.495,722,4.495]],["title/index.html",[60,0.479,723,3.1,724,3.1]],["body/index.html",[12,0.018,23,0.183,53,0.013,54,0.013,100,3.167,666,3.167,725,4.128,726,4.128,727,5.447,728,4.128,729,4.128,730,4.128,731,4.128,732,4.128,733,4.128,734,3.548,735,6.096,736,4.128,737,4.128,738,4.128,739,4.128,740,6.096,741,7.056,742,4.128,743,4.128,744,4.128,745,6.92,746,4.128,747,4.128,748,5.447,749,4.128,750,4.128,751,4.128,752,4.128,753,5.447,754,5.447,755,4.128,756,4.128,757,4.128,758,5.447,759,5.447,760,4.128,761,4.128,762,4.128,763,4.128,764,4.128,765,3.548,766,4.128,767,4.128,768,4.128,769,4.128,770,4.128,771,4.128,772,4.128,773,4.128,774,4.128,775,4.128,776,4.128,777,4.128,778,4.128,779,4.128,780,4.128,781,4.128,782,3.548]],["title/modules.html",[2,2.233]],["body/modules.html",[1,3.497,2,2.205,11,3.221,12,0.015,13,3.221,14,3.221,15,3.221,16,3.221,17,3.221,18,3.221,53,0.015,54,0.015,765,6.401,783,7.447,784,7.447,785,7.447]],["title/overview.html",[786,4.362]],["body/overview.html",[0,1.224,1,5.22,2,1.66,3,1.66,4,1.858,5,1.858,6,1.66,7,1.858,8,1.858,9,3.242,10,3.242,11,4.201,12,0.018,13,4.201,14,4.201,15,4.201,16,4.201,17,4.201,18,4.201,19,2.525,20,1.858,21,1.858,53,0.012,54,0.012,56,0.875,131,1.35,161,3.477,179,3.242,180,3.242,187,1.973,246,3.477,256,3.242,257,3.242,291,3.477,320,3.242,321,3.242,444,3.477,456,3.242,457,3.242,499,3.477,510,3.242,511,3.242,535,2.893,576,3.477,585,3.242,586,3.242,646,3.477,654,3.242,655,3.242,786,3.242,787,3.771,788,5.127,789,3.771,790,3.771]],["title/properties.html",[61,1.523,689,2.665]],["body/properties.html",[12,0.018,53,0.016,54,0.016,61,1.938,100,4.361,734,4.887,782,4.887,791,5.686,792,5.686,793,5.686]],["title/miscellaneous/typealiases.html",[712,1.85,794,4.469]],["body/miscellaneous/typealiases.html",[12,0.015,53,0.015,54,0.015,60,0.78,77,0.78,99,3.525,119,3.864,126,5.323,200,3.525,233,5.323,385,3.525,390,5.323,429,3.525,431,5.323,481,3.525,485,5.323,536,3.525,564,5.323,615,3.525,635,5.323,712,3.015,795,5.051,796,4.341,797,4.341,798,4.341,799,4.341,800,4.341,801,4.341,802,4.341]],["title/miscellaneous/variables.html",[712,1.85,803,3.841]],["body/miscellaneous/variables.html",[12,0.018,25,2.867,40,3.909,41,3.213,53,0.012,54,0.012,60,0.577,77,0.895,99,2.609,127,3.557,128,3.213,200,2.609,231,5.562,234,3.557,235,3.213,324,3.557,325,3.276,328,3.557,329,2.403,330,3.276,331,2.231,370,5.562,385,2.609,391,3.213,429,2.609,432,3.557,433,3.213,460,2.403,481,2.609,486,3.557,487,3.213,536,2.609,565,3.557,566,3.213,615,2.609,636,3.557,637,3.213,676,5.158,678,2.867,679,2.867,680,2.867,712,2.231,715,3.213,716,3.213,717,3.213,796,3.213,797,3.213,798,3.213,799,3.213,800,3.213,801,3.213,802,3.213,803,3.213,804,3.738,805,5.798,806,5.798,807,3.738,808,5.798,809,5.798,810,5.798,811,3.738,812,3.738]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":222,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{},"coverage.html":{}}}],["0.0.1",{"_index":792,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":357,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["10.0.0",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["16.3.1",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":790,"title":{},"body":{"overview.html":{}}}],["23",{"_index":789,"title":{},"body":{"overview.html":{}}}],["3",{"_index":416,"title":{},"body":{"classes/CreateLanguageDto.html":{},"classes/Language.html":{}}}],["5.9.1",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":788,"title":{},"body":{"overview.html":{}}}],["7.1.14",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["7.6.4",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":787,"title":{},"body":{"overview.html":{}}}],["9]{1,4}\\s)?[0",{"_index":223,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["9]{5,15}$/gi",{"_index":224,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["action",{"_index":194,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["added",{"_index":354,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["address",{"_index":201,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["adds",{"_index":195,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["admin",{"_index":616,"title":{},"body":{"classes/User.html":{}}}],["aliases",{"_index":795,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":766,"title":{},"body":{"index.html":{}}}],["app",{"_index":743,"title":{},"body":{"index.html":{}}}],["appdb",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":733,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apppaginatedresponse",{"_index":55,"title":{"classes/AppPaginatedResponse.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"coverage.html":{}}}],["appresponse",{"_index":59,"title":{"classes/AppResponse.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"coverage.html":{}}}],["appresponse:15",{"_index":84,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["approved",{"_index":537,"title":{},"body":{"classes/Song.html":{}}}],["approver",{"_index":538,"title":{},"body":{"classes/Song.html":{}}}],["async",{"_index":271,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["audiofile",{"_index":539,"title":{},"body":{"classes/Song.html":{}}}],["author",{"_index":100,"title":{},"body":{"classes/Comment.html":{},"index.html":{},"properties.html":{}}}],["await",{"_index":300,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["b[\\w\\d\\w\\d]+(?:@(?:[\\w\\d\\w\\d]+(?:\\.(?:[\\w\\d\\w\\d]+))))\\b/gi",{"_index":217,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["backers",{"_index":767,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":346,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["badrequestexception('query",{"_index":369,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["body",{"_index":157,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":228,"title":{},"body":{"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":785,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":783,"title":{},"body":{"modules.html":{}}}],["building",{"_index":728,"title":{},"body":{"index.html":{}}}],["characters",{"_index":417,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["city",{"_index":202,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["class",{"_index":52,"title":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":56,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_commentmodule",{"_index":179,"title":{},"body":{"modules/CommentModule.html":{},"overview.html":{}}}],["cluster_commentmodule_providers",{"_index":180,"title":{},"body":{"modules/CommentModule.html":{},"overview.html":{}}}],["cluster_composermodule",{"_index":256,"title":{},"body":{"modules/ComposerModule.html":{},"overview.html":{}}}],["cluster_composermodule_providers",{"_index":257,"title":{},"body":{"modules/ComposerModule.html":{},"overview.html":{}}}],["cluster_countriesmodule",{"_index":320,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_providers",{"_index":321,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_genremodule",{"_index":456,"title":{},"body":{"modules/GenreModule.html":{},"overview.html":{}}}],["cluster_genremodule_providers",{"_index":457,"title":{},"body":{"modules/GenreModule.html":{},"overview.html":{}}}],["cluster_languagesmodule",{"_index":510,"title":{},"body":{"modules/LanguagesModule.html":{},"overview.html":{}}}],["cluster_languagesmodule_providers",{"_index":511,"title":{},"body":{"modules/LanguagesModule.html":{},"overview.html":{}}}],["cluster_songmodule",{"_index":585,"title":{},"body":{"modules/SongModule.html":{},"overview.html":{}}}],["cluster_songmodule_providers",{"_index":586,"title":{},"body":{"modules/SongModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":654,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":655,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":376,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Language.html":{},"injectables/LanguagesService.html":{}}}],["collection",{"_index":124,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["comment",{"_index":98,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Song.html":{},"classes/User.html":{},"coverage.html":{}}}],["comment.controller",{"_index":182,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.dto",{"_index":164,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/UpdateCommentDto.html":{}}}],["comment.dto.ts",{"_index":393,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["comment.name",{"_index":185,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.service",{"_index":162,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{}}}],["commentcontroller",{"_index":130,"title":{"controllers/CommentController.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"coverage.html":{}}}],["commentdocument",{"_index":126,"title":{},"body":{"classes/Comment.html":{},"miscellaneous/typealiases.html":{}}}],["commentmodule",{"_index":11,"title":{"modules/CommentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules.html":{},"overview.html":{}}}],["comments",{"_index":540,"title":{},"body":{"classes/Song.html":{},"classes/User.html":{}}}],["commentschema",{"_index":127,"title":{},"body":{"classes/Comment.html":{},"modules/CommentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commentservice",{"_index":161,"title":{"injectables/CommentService.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"coverage.html":{},"overview.html":{}}}],["composer",{"_index":199,"title":{"classes/Composer.html":{}},"body":{"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"classes/Song.html":{},"coverage.html":{}}}],["composer.controller",{"_index":259,"title":{},"body":{"modules/ComposerModule.html":{}}}],["composer.dto",{"_index":248,"title":{},"body":{"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"classes/UpdateComposerDto.html":{}}}],["composer.dto.ts",{"_index":395,"title":{},"body":{"classes/CreateComposerDto.html":{},"classes/UpdateComposerDto.html":{},"coverage.html":{}}}],["composer.name",{"_index":261,"title":{},"body":{"modules/ComposerModule.html":{}}}],["composer.service",{"_index":247,"title":{},"body":{"controllers/ComposerController.html":{},"modules/ComposerModule.html":{}}}],["composercontroller",{"_index":236,"title":{"controllers/ComposerController.html":{}},"body":{"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"coverage.html":{}}}],["composerdocument",{"_index":233,"title":{},"body":{"classes/Composer.html":{},"miscellaneous/typealiases.html":{}}}],["composermodule",{"_index":13,"title":{"modules/ComposerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ComposerModule.html":{},"modules.html":{},"overview.html":{}}}],["composers",{"_index":541,"title":{},"body":{"classes/Song.html":{}}}],["composerschema",{"_index":234,"title":{},"body":{"classes/Composer.html":{},"modules/ComposerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["composerservice",{"_index":246,"title":{"injectables/ComposerService.html":{}},"body":{"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"coverage.html":{},"overview.html":{}}}],["conditions",{"_index":375,"title":{},"body":{"injectables/CountriesService.html":{}}}],["const",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["constructor",{"_index":69,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["constructor(countrymodel",{"_index":334,"title":{},"body":{"injectables/CountriesService.html":{}}}],["constructor(data",{"_index":90,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["constructor(genremodel",{"_index":463,"title":{},"body":{"injectables/GenreService.html":{}}}],["constructor(languagemodel",{"_index":516,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["constructor(page",{"_index":70,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["constructor(private",{"_index":167,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["contributions",{"_index":617,"title":{},"body":{"classes/User.html":{}}}],["contributor",{"_index":542,"title":{},"body":{"classes/Song.html":{}}}],["controller",{"_index":129,"title":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('comment",{"_index":166,"title":{},"body":{"controllers/CommentController.html":{}}}],["controller('composer",{"_index":249,"title":{},"body":{"controllers/ComposerController.html":{}}}],["controller('countries",{"_index":296,"title":{},"body":{"controllers/CountriesController.html":{}}}],["controller('genre",{"_index":448,"title":{},"body":{"controllers/GenreController.html":{}}}],["controller('languages",{"_index":503,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["controller('song",{"_index":579,"title":{},"body":{"controllers/SongController.html":{}}}],["controller('user",{"_index":648,"title":{},"body":{"controllers/UserController.html":{}}}],["controller_method_wrapper",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controllermethodprovider",{"_index":325,"title":{},"body":{"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controllermethodwrapper",{"_index":678,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["controllermethodwrapper(method",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controllers",{"_index":131,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["count",{"_index":62,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["countries",{"_index":270,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["countries.controller",{"_index":323,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countries.service",{"_index":292,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["countriescontroller",{"_index":268,"title":{"controllers/CountriesController.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{}}}],["countriesmodule",{"_index":14,"title":{"modules/CountriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules.html":{},"overview.html":{}}}],["countriesservice",{"_index":291,"title":{"injectables/CountriesService.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"coverage.html":{},"overview.html":{}}}],["country",{"_index":203,"title":{"classes/Country.html":{}},"body":{"classes/Composer.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"classes/User.html":{},"coverage.html":{}}}],["country.dto",{"_index":293,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/UpdateCountryDto.html":{}}}],["country.dto.ts",{"_index":397,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["country.dto.ts:10",{"_index":403,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:14",{"_index":404,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:18",{"_index":402,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:6",{"_index":401,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.name",{"_index":332,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countrycount",{"_index":358,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countrydocument",{"_index":390,"title":{},"body":{"classes/Country.html":{},"miscellaneous/typealiases.html":{}}}],["countrymodel",{"_index":339,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countryschema",{"_index":324,"title":{},"body":{"modules/CountriesModule.html":{},"classes/Country.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":666,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":135,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":169,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["create(createcommentdto",{"_index":140,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["create(createcomposerdto",{"_index":238,"title":{},"body":{"controllers/ComposerController.html":{},"injectables/ComposerService.html":{}}}],["create(createcountrydto",{"_index":273,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["create(creategenredto",{"_index":436,"title":{},"body":{"controllers/GenreController.html":{},"injectables/GenreService.html":{}}}],["create(createlanguagedto",{"_index":491,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["create(createsongdto",{"_index":569,"title":{},"body":{"controllers/SongController.html":{},"injectables/SongService.html":{}}}],["create(createuserdto",{"_index":640,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createcommentdto",{"_index":141,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["createcomposerdto",{"_index":239,"title":{"classes/CreateComposerDto.html":{}},"body":{"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"classes/CreateComposerDto.html":{},"classes/UpdateComposerDto.html":{},"coverage.html":{}}}],["createcountrydto",{"_index":274,"title":{"classes/CreateCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["creategenredto",{"_index":408,"title":{"classes/CreateGenreDto.html":{}},"body":{"classes/CreateGenreDto.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/UpdateGenreDto.html":{},"coverage.html":{}}}],["createlanguagedto",{"_index":412,"title":{"classes/CreateLanguageDto.html":{}},"body":{"classes/CreateLanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["createsongdto",{"_index":422,"title":{"classes/CreateSongDto.html":{}},"body":{"classes/CreateSongDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":425,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["data",{"_index":68,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["dbname",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":105,"title":{},"body":{"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":231,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":290,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["defaultvaluepipe(1",{"_index":305,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["defaultvaluepipe(20",{"_index":307,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["defined",{"_index":73,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":160,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":151,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":479,"title":{},"body":{"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":734,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":744,"title":{},"body":{"index.html":{}}}],["dial_code",{"_index":378,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["doc",{"_index":351,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["doc.save",{"_index":353,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["documentation",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["dotenv/config",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/create",{"_index":163,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":165,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":755,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":729,"title":{},"body":{"index.html":{}}}],["email",{"_index":204,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["emoji",{"_index":377,"title":{},"body":{"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["empty",{"_index":400,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{}}}],["empty'})@length(3",{"_index":415,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["entities/comment.entity",{"_index":183,"title":{},"body":{"modules/CommentModule.html":{}}}],["entities/composer.entity",{"_index":260,"title":{},"body":{"modules/ComposerModule.html":{}}}],["entities/country.entity",{"_index":295,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{}}}],["entities/genre.entity",{"_index":447,"title":{},"body":{"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{}}}],["entities/language.entity",{"_index":502,"title":{},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{}}}],["entities/song.entity",{"_index":589,"title":{},"body":{"modules/SongModule.html":{}}}],["entities/user.entity",{"_index":658,"title":{},"body":{"modules/UserModule.html":{}}}],["env",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errormessage",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["example",{"_index":740,"title":{},"body":{"index.html":{}}}],["exec",{"_index":366,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["export",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":58,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{}}}],["factory/controller",{"_index":326,"title":{},"body":{"modules/CountriesModule.html":{}}}],["false",{"_index":111,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["file",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filter",{"_index":372,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["find",{"_index":362,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["findall",{"_index":136,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(page",{"_index":277,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["findall(q",{"_index":467,"title":{},"body":{"injectables/GenreService.html":{}}}],["findone",{"_index":137,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":173,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":146,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["firstname",{"_index":205,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["framework",{"_index":727,"title":{},"body":{"index.html":{}}}],["function",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":713,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["genre",{"_index":428,"title":{"classes/Genre.html":{}},"body":{"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Song.html":{},"coverage.html":{}}}],["genre.controller",{"_index":459,"title":{},"body":{"modules/GenreModule.html":{}}}],["genre.dto",{"_index":446,"title":{},"body":{"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/UpdateGenreDto.html":{}}}],["genre.dto.ts",{"_index":410,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/UpdateGenreDto.html":{},"coverage.html":{}}}],["genre.dto.ts:6",{"_index":411,"title":{},"body":{"classes/CreateGenreDto.html":{}}}],["genre.name",{"_index":461,"title":{},"body":{"modules/GenreModule.html":{}}}],["genre.service",{"_index":445,"title":{},"body":{"controllers/GenreController.html":{},"modules/GenreModule.html":{}}}],["genrecontroller",{"_index":434,"title":{"controllers/GenreController.html":{}},"body":{"controllers/GenreController.html":{},"modules/GenreModule.html":{},"coverage.html":{}}}],["genredocument",{"_index":431,"title":{},"body":{"classes/Genre.html":{},"miscellaneous/typealiases.html":{}}}],["genremodel",{"_index":465,"title":{},"body":{"injectables/GenreService.html":{}}}],["genremodule",{"_index":15,"title":{"modules/GenreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GenreModule.html":{},"modules.html":{},"overview.html":{}}}],["genreschema",{"_index":432,"title":{},"body":{"classes/Genre.html":{},"modules/GenreModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["genreservice",{"_index":444,"title":{"injectables/GenreService.html":{}},"body":{"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"coverage.html":{},"overview.html":{}}}],["get(':id",{"_index":147,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["get('search",{"_index":283,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["getting",{"_index":723,"title":{"index.html":{}},"body":{}}],["grow",{"_index":762,"title":{},"body":{"index.html":{}}}],["here",{"_index":773,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":779,"title":{},"body":{"index.html":{}}}],["hydrateddocument",{"_index":119,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":149,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["id_method_wrapper",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["idmethodprovider",{"_index":330,"title":{},"body":{"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["idmethodwrapper",{"_index":679,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["idmethodwrapper(method",{"_index":721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["idrequest",{"_index":337,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["import",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":60,"title":{"index.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":83,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["inject",{"_index":289,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["inject('controller_method_wrapper",{"_index":298,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["inject('id_method_wrapper",{"_index":350,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["inject('paginated_method_wrapper",{"_index":349,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["injectable",{"_index":186,"title":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":187,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":347,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["injectmodel(country.name",{"_index":348,"title":{},"body":{"injectables/CountriesService.html":{}}}],["injectmodel(genre.name",{"_index":472,"title":{},"body":{"injectables/GenreService.html":{}}}],["injectmodel(language.name",{"_index":526,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["installation",{"_index":739,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":742,"title":{},"body":{"index.html":{}}}],["interface",{"_index":85,"title":{"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":535,"title":{},"body":{"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"overview.html":{}}}],["isnotempty",{"_index":406,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{}}}],["isstring",{"_index":405,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{}}}],["isstring({message",{"_index":398,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{}}}],["items",{"_index":367,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["join",{"_index":769,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":776,"title":{},"body":{"index.html":{}}}],["langauages",{"_index":379,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["language",{"_index":480,"title":{"classes/Language.html":{}},"body":{"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"coverage.html":{}}}],["language.dto",{"_index":501,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{}}}],["language.dto.ts",{"_index":414,"title":{},"body":{"classes/CreateLanguageDto.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["language.dto.ts:11",{"_index":420,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["language.dto.ts:7",{"_index":419,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["language.name",{"_index":514,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["languagecount",{"_index":528,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["languagedocument",{"_index":485,"title":{},"body":{"classes/Language.html":{},"miscellaneous/typealiases.html":{}}}],["languagemodel",{"_index":518,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["languages",{"_index":490,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["languages.controller",{"_index":513,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["languages.service",{"_index":500,"title":{},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{}}}],["languageschema",{"_index":486,"title":{},"body":{"classes/Language.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["languagescontroller",{"_index":488,"title":{"controllers/LanguagesController.html":{}},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"coverage.html":{}}}],["languagesmodule",{"_index":16,"title":{"modules/LanguagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LanguagesModule.html":{},"modules.html":{},"overview.html":{}}}],["languagesservice",{"_index":499,"title":{"injectables/LanguagesService.html":{}},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"coverage.html":{},"overview.html":{}}}],["lastname",{"_index":206,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":418,"title":{},"body":{"classes/CreateLanguageDto.html":{},"classes/Language.html":{}}}],["length(3",{"_index":421,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["license",{"_index":782,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":759,"title":{},"body":{"index.html":{}}}],["limit",{"_index":278,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"miscellaneous/functions.html":{}}}],["limit(limit",{"_index":363,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["lowercase",{"_index":482,"title":{},"body":{"classes/Language.html":{}}}],["lyrics",{"_index":543,"title":{},"body":{"classes/Song.html":{}}}],["majority",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["match",{"_index":216,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["matching",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":87,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"injectables/CountriesService.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["metadata",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["method.factory",{"_index":327,"title":{},"body":{"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{}}}],["method.factory.ts",{"_index":676,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":134,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["methodwrapper",{"_index":299,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["miscellaneous",{"_index":712,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":758,"title":{},"body":{"index.html":{}}}],["mode",{"_index":748,"title":{},"body":{"index.html":{}}}],["model",{"_index":335,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/comment/comment.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/composer/composer.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/countries/countries.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/genre/genre.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/languages/languages.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/song/song.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["mongodb",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["mongodb+srv://${env.mongo_user_name}:${env.mongo_password}@theopaeanceserverless.sauq3qs.mongodb.net",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":121,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/Genre.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"classes/User.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":184,"title":{},"body":{"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":772,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":777,"title":{},"body":{"index.html":{}}}],["name",{"_index":76,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":735,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":781,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":600,"title":{},"body":{"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"modules/CommentModule.html":{},"classes/Composer.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/Genre.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"modules/SongModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":196,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":64,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["node.js",{"_index":726,"title":{},"body":{"index.html":{}}}],["npm",{"_index":741,"title":{},"body":{"index.html":{}}}],["number",{"_index":71,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["open",{"_index":760,"title":{},"body":{"index.html":{}}}],["optional",{"_index":63,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":374,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["out",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":786,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":689,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":65,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"miscellaneous/functions.html":{}}}],["pagedata",{"_index":89,"title":{"interfaces/PageData.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"coverage.html":{}}}],["pages",{"_index":66,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["paginated_method_wrapper",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paginatedmethodprovider",{"_index":328,"title":{},"body":{"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginatedmethodwrapper",{"_index":680,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["paginatedmethodwrapper(method",{"_index":722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginatedrequest",{"_index":336,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["param",{"_index":159,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":253,"title":{},"body":{"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["parameters",{"_index":75,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["partialtype",{"_index":599,"title":{},"body":{"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcommentdto",{"_index":598,"title":{},"body":{"classes/UpdateCommentDto.html":{}}}],["partialtype(createcomposerdto",{"_index":602,"title":{},"body":{"classes/UpdateComposerDto.html":{}}}],["partialtype(createcountrydto",{"_index":604,"title":{},"body":{"classes/UpdateCountryDto.html":{}}}],["partialtype(creategenredto",{"_index":606,"title":{},"body":{"classes/UpdateGenreDto.html":{}}}],["partialtype(createlanguagedto",{"_index":608,"title":{},"body":{"classes/UpdateLanguageDto.html":{}}}],["partialtype(createsongdto",{"_index":610,"title":{},"body":{"classes/UpdateSongDto.html":{}}}],["partialtype(createuserdto",{"_index":613,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":207,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["patch",{"_index":158,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":155,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["phone",{"_index":208,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["please",{"_index":770,"title":{},"body":{"index.html":{}}}],["post",{"_index":142,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["postresponse",{"_index":86,"title":{"interfaces/PostResponse.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"coverage.html":{}}}],["prefix",{"_index":133,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["previous",{"_index":67,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["private",{"_index":297,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["process.env",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":750,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":725,"title":{},"body":{"index.html":{}}}],["project",{"_index":761,"title":{},"body":{"index.html":{}}}],["promise",{"_index":276,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":359,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["prop",{"_index":117,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["prop({default",{"_index":229,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["prop({required",{"_index":114,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Genre.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["prop({type",{"_index":106,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["prop({unique",{"_index":215,"title":{},"body":{"classes/Composer.html":{},"classes/Country.html":{},"classes/Language.html":{},"classes/User.html":{}}}],["properties",{"_index":61,"title":{"properties.html":{}},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"classes/Language.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":371,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["provider",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["province",{"_index":209,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["q",{"_index":285,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["query",{"_index":288,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["query('limit",{"_index":306,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["query('page",{"_index":304,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["query('q",{"_index":315,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["read",{"_index":771,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":168,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["ref",{"_index":108,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["reflect",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":373,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["remove",{"_index":138,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":177,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ComposerController.html":{},"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":150,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removes",{"_index":198,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["replies",{"_index":101,"title":{},"body":{"classes/Comment.html":{}}}],["repository",{"_index":738,"title":{},"body":{"index.html":{}}}],["required",{"_index":109,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/CreateGenreDto.html":{},"classes/Genre.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["reset",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":302,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["response.count",{"_index":314,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.data",{"_index":309,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.next",{"_index":313,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.page",{"_index":312,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.pages",{"_index":310,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["response.previous",{"_index":311,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["results",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrywrites",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["return",{"_index":170,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":144,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["run",{"_index":745,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":730,"title":{},"body":{"index.html":{}}}],["schema",{"_index":116,"title":{},"body":{"classes/Comment.html":{},"modules/CommentModule.html":{},"classes/Composer.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"classes/Country.html":{},"classes/Genre.html":{},"modules/GenreModule.html":{},"classes/Language.html":{},"modules/LanguagesModule.html":{},"classes/Song.html":{},"modules/SongModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":118,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Country.html":{},"classes/Genre.html":{},"classes/Language.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(comment",{"_index":128,"title":{},"body":{"classes/Comment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(composer",{"_index":235,"title":{},"body":{"classes/Composer.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(country",{"_index":391,"title":{},"body":{"classes/Country.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(genre",{"_index":433,"title":{},"body":{"classes/Genre.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(language",{"_index":487,"title":{},"body":{"classes/Language.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(song",{"_index":566,"title":{},"body":{"classes/Song.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":637,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope.request",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":272,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["search(@query('q",{"_index":451,"title":{},"body":{"controllers/GenreController.html":{}}}],["search(q",{"_index":282,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["server",{"_index":731,"title":{},"body":{"index.html":{}}}],["side",{"_index":732,"title":{},"body":{"index.html":{}}}],["skip",{"_index":356,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["skip(skip",{"_index":364,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["song",{"_index":102,"title":{"classes/Song.html":{}},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/User.html":{},"coverage.html":{}}}],["song.controller",{"_index":588,"title":{},"body":{"modules/SongModule.html":{}}}],["song.dto",{"_index":578,"title":{},"body":{"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{}}}],["song.dto.ts",{"_index":424,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["song.name",{"_index":590,"title":{},"body":{"modules/SongModule.html":{}}}],["song.service",{"_index":577,"title":{},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{}}}],["songcontroller",{"_index":567,"title":{"controllers/SongController.html":{}},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{},"coverage.html":{}}}],["songdocument",{"_index":564,"title":{},"body":{"classes/Song.html":{},"miscellaneous/typealiases.html":{}}}],["songmodule",{"_index":17,"title":{"modules/SongModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SongModule.html":{},"modules.html":{},"overview.html":{}}}],["songs",{"_index":210,"title":{},"body":{"classes/Composer.html":{}}}],["songschema",{"_index":565,"title":{},"body":{"classes/Song.html":{},"modules/SongModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["songservice",{"_index":576,"title":{"injectables/SongService.html":{}},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"coverage.html":{},"overview.html":{}}}],["sort",{"_index":365,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["source",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"modules/ComposerModule.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCommentDto.html":{},"classes/CreateComposerDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"modules/GenreModule.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":764,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../comment.entity.ts",{"_index":796,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../composer.entity.ts",{"_index":797,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../controller",{"_index":715,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../country.entity.ts",{"_index":798,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../genre.entity.ts",{"_index":799,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../id",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../language.entity.ts",{"_index":800,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../paginated",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../song.entity.ts",{"_index":801,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":802,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/response.entity",{"_index":294,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["src/entities/response.entity.ts",{"_index":57,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"coverage.html":{}}}],["src/entities/response.entity.ts:15",{"_index":97,"title":{},"body":{"classes/AppResponse.html":{}}}],["src/entities/response.entity.ts:23",{"_index":80,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/entities/response.entity.ts:24",{"_index":81,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/entities/response.entity.ts:25",{"_index":79,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/entities/response.entity.ts:26",{"_index":82,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/entities/response.entity.ts:27",{"_index":74,"title":{},"body":{"classes/AppPaginatedResponse.html":{}}}],["src/factory/controller",{"_index":460,"title":{},"body":{"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/factory/id",{"_index":331,"title":{},"body":{"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/factory/paginated",{"_index":329,"title":{},"body":{"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":681,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/comment/comment.controller.ts",{"_index":132,"title":{},"body":{"controllers/CommentController.html":{},"coverage.html":{}}}],["src/modules/comment/comment.controller.ts:19",{"_index":143,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:24",{"_index":145,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:29",{"_index":148,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:34",{"_index":156,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:39",{"_index":152,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.module.ts",{"_index":181,"title":{},"body":{"modules/CommentModule.html":{}}}],["src/modules/comment/comment.service.ts",{"_index":188,"title":{},"body":{"injectables/CommentService.html":{},"coverage.html":{}}}],["src/modules/comment/comment.service.ts:11",{"_index":190,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:15",{"_index":191,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:19",{"_index":193,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:23",{"_index":192,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:7",{"_index":189,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/dto/create",{"_index":392,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/modules/comment/dto/update",{"_index":597,"title":{},"body":{"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["src/modules/comment/entities/comment.entity.ts",{"_index":99,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/comment/entities/comment.entity.ts:12",{"_index":115,"title":{},"body":{"classes/Comment.html":{}}}],["src/modules/comment/entities/comment.entity.ts:15",{"_index":113,"title":{},"body":{"classes/Comment.html":{}}}],["src/modules/comment/entities/comment.entity.ts:18",{"_index":112,"title":{},"body":{"classes/Comment.html":{}}}],["src/modules/comment/entities/comment.entity.ts:9",{"_index":110,"title":{},"body":{"classes/Comment.html":{}}}],["src/modules/composer/composer.controller.ts",{"_index":237,"title":{},"body":{"controllers/ComposerController.html":{},"coverage.html":{}}}],["src/modules/composer/composer.controller.ts:19",{"_index":240,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.controller.ts:24",{"_index":241,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.controller.ts:29",{"_index":242,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.controller.ts:34",{"_index":245,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.controller.ts:42",{"_index":243,"title":{},"body":{"controllers/ComposerController.html":{}}}],["src/modules/composer/composer.module.ts",{"_index":258,"title":{},"body":{"modules/ComposerModule.html":{}}}],["src/modules/composer/composer.service.ts",{"_index":262,"title":{},"body":{"injectables/ComposerService.html":{},"coverage.html":{}}}],["src/modules/composer/composer.service.ts:11",{"_index":264,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/composer.service.ts:15",{"_index":265,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/composer.service.ts:19",{"_index":267,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/composer.service.ts:23",{"_index":266,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/composer.service.ts:7",{"_index":263,"title":{},"body":{"injectables/ComposerService.html":{}}}],["src/modules/composer/dto/create",{"_index":394,"title":{},"body":{"classes/CreateComposerDto.html":{},"coverage.html":{}}}],["src/modules/composer/dto/update",{"_index":601,"title":{},"body":{"classes/UpdateComposerDto.html":{},"coverage.html":{}}}],["src/modules/composer/entities/composer.entity",{"_index":562,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/composer/entities/composer.entity.ts",{"_index":200,"title":{},"body":{"classes/Composer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/composer/entities/composer.entity.ts:11",{"_index":220,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:14",{"_index":230,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:21",{"_index":218,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:28",{"_index":225,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:31",{"_index":221,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:34",{"_index":214,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:37",{"_index":212,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:40",{"_index":213,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:43",{"_index":226,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:46",{"_index":227,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/composer/entities/composer.entity.ts:8",{"_index":219,"title":{},"body":{"classes/Composer.html":{}}}],["src/modules/countries/countries.controller.ts",{"_index":269,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["src/modules/countries/countries.controller.ts:104",{"_index":281,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:32",{"_index":275,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:44",{"_index":279,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:62",{"_index":284,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:81",{"_index":280,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.controller.ts:91",{"_index":287,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/modules/countries/countries.module.ts",{"_index":322,"title":{},"body":{"modules/CountriesModule.html":{}}}],["src/modules/countries/countries.service.ts",{"_index":333,"title":{},"body":{"injectables/CountriesService.html":{},"coverage.html":{}}}],["src/modules/countries/countries.service.ts:10",{"_index":338,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:102",{"_index":343,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:19",{"_index":340,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:25",{"_index":341,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:48",{"_index":344,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:85",{"_index":342,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/countries.service.ts:91",{"_index":345,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/modules/countries/dto/create",{"_index":396,"title":{},"body":{"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/dto/update",{"_index":603,"title":{},"body":{"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["src/modules/countries/entities/country.entity.ts",{"_index":385,"title":{},"body":{"classes/Country.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/countries/entities/country.entity.ts:10",{"_index":388,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/entities/country.entity.ts:13",{"_index":389,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/entities/country.entity.ts:16",{"_index":387,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/countries/entities/country.entity.ts:7",{"_index":386,"title":{},"body":{"classes/Country.html":{}}}],["src/modules/genre/dto/create",{"_index":409,"title":{},"body":{"classes/CreateGenreDto.html":{},"coverage.html":{}}}],["src/modules/genre/dto/update",{"_index":605,"title":{},"body":{"classes/UpdateGenreDto.html":{},"coverage.html":{}}}],["src/modules/genre/entities/genre.entity",{"_index":563,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/genre/entities/genre.entity.ts",{"_index":429,"title":{},"body":{"classes/Genre.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/genre/entities/genre.entity.ts:7",{"_index":430,"title":{},"body":{"classes/Genre.html":{}}}],["src/modules/genre/genre.controller.ts",{"_index":435,"title":{},"body":{"controllers/GenreController.html":{},"coverage.html":{}}}],["src/modules/genre/genre.controller.ts:27",{"_index":437,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:39",{"_index":438,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:49",{"_index":441,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:59",{"_index":439,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:69",{"_index":443,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.controller.ts:82",{"_index":440,"title":{},"body":{"controllers/GenreController.html":{}}}],["src/modules/genre/genre.module.ts",{"_index":458,"title":{},"body":{"modules/GenreModule.html":{}}}],["src/modules/genre/genre.service.ts",{"_index":462,"title":{},"body":{"injectables/GenreService.html":{},"coverage.html":{}}}],["src/modules/genre/genre.service.ts:10",{"_index":464,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:17",{"_index":466,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:23",{"_index":468,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:32",{"_index":469,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:36",{"_index":471,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/genre/genre.service.ts:44",{"_index":470,"title":{},"body":{"injectables/GenreService.html":{}}}],["src/modules/languages/dto/create",{"_index":413,"title":{},"body":{"classes/CreateLanguageDto.html":{},"coverage.html":{}}}],["src/modules/languages/dto/update",{"_index":607,"title":{},"body":{"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["src/modules/languages/entities/language.entity.ts",{"_index":481,"title":{},"body":{"classes/Language.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/languages/entities/language.entity.ts:10",{"_index":484,"title":{},"body":{"classes/Language.html":{}}}],["src/modules/languages/entities/language.entity.ts:7",{"_index":483,"title":{},"body":{"classes/Language.html":{}}}],["src/modules/languages/languages.controller.ts",{"_index":489,"title":{},"body":{"controllers/LanguagesController.html":{},"coverage.html":{}}}],["src/modules/languages/languages.controller.ts:107",{"_index":495,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:32",{"_index":492,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:44",{"_index":493,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:62",{"_index":496,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:81",{"_index":494,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.controller.ts:91",{"_index":498,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/modules/languages/languages.module.ts",{"_index":512,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["src/modules/languages/languages.service.ts",{"_index":515,"title":{},"body":{"injectables/LanguagesService.html":{},"coverage.html":{}}}],["src/modules/languages/languages.service.ts:10",{"_index":517,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:19",{"_index":519,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:25",{"_index":521,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:48",{"_index":524,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:81",{"_index":522,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:87",{"_index":525,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/languages/languages.service.ts:98",{"_index":523,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/modules/song/dto/create",{"_index":423,"title":{},"body":{"classes/CreateSongDto.html":{},"coverage.html":{}}}],["src/modules/song/dto/update",{"_index":609,"title":{},"body":{"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["src/modules/song/entities/song.entity",{"_index":122,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/User.html":{}}}],["src/modules/song/entities/song.entity.ts",{"_index":536,"title":{},"body":{"classes/Song.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/song/entities/song.entity.ts:10",{"_index":553,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:13",{"_index":551,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:16",{"_index":552,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:19",{"_index":559,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:22",{"_index":557,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:25",{"_index":560,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:28",{"_index":548,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:31",{"_index":549,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:34",{"_index":556,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:37",{"_index":554,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:40",{"_index":561,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:43",{"_index":555,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:46",{"_index":558,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/entities/song.entity.ts:49",{"_index":550,"title":{},"body":{"classes/Song.html":{}}}],["src/modules/song/song.controller.ts",{"_index":568,"title":{},"body":{"controllers/SongController.html":{},"coverage.html":{}}}],["src/modules/song/song.controller.ts:19",{"_index":570,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.controller.ts:24",{"_index":571,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.controller.ts:29",{"_index":572,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.controller.ts:34",{"_index":575,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.controller.ts:39",{"_index":573,"title":{},"body":{"controllers/SongController.html":{}}}],["src/modules/song/song.module.ts",{"_index":587,"title":{},"body":{"modules/SongModule.html":{}}}],["src/modules/song/song.service.ts",{"_index":591,"title":{},"body":{"injectables/SongService.html":{},"coverage.html":{}}}],["src/modules/song/song.service.ts:11",{"_index":593,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/song/song.service.ts:15",{"_index":594,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/song/song.service.ts:19",{"_index":596,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/song/song.service.ts:23",{"_index":595,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/song/song.service.ts:7",{"_index":592,"title":{},"body":{"injectables/SongService.html":{}}}],["src/modules/user/dto/create",{"_index":426,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/update",{"_index":612,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity",{"_index":123,"title":{},"body":{"classes/Comment.html":{},"classes/Song.html":{}}}],["src/modules/user/entities/user.entity.ts",{"_index":615,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/user/entities/user.entity.ts:11",{"_index":628,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:14",{"_index":632,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:17",{"_index":633,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:24",{"_index":626,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:31",{"_index":630,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:34",{"_index":629,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:37",{"_index":625,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:40",{"_index":620,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:43",{"_index":622,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:46",{"_index":631,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:49",{"_index":623,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:52",{"_index":634,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:55",{"_index":621,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:58",{"_index":624,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/entities/user.entity.ts:8",{"_index":627,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/user.controller.ts",{"_index":639,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:19",{"_index":641,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:24",{"_index":642,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:29",{"_index":643,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:34",{"_index":645,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:39",{"_index":644,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":656,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":660,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:11",{"_index":662,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:15",{"_index":663,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:19",{"_index":665,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:23",{"_index":664,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:7",{"_index":661,"title":{},"body":{"injectables/UserService.html":{}}}],["srtfile",{"_index":544,"title":{},"body":{"classes/Song.html":{}}}],["start",{"_index":746,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":749,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":751,"title":{},"body":{"index.html":{}}}],["started",{"_index":724,"title":{"index.html":{}},"body":{}}],["starter",{"_index":737,"title":{},"body":{"index.html":{}}}],["statements",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":774,"title":{},"body":{"index.html":{}}}],["string",{"_index":88,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["string'})@isnotempty({message",{"_index":399,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{}}}],["super(data",{"_index":92,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["support",{"_index":765,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":784,"title":{},"body":{"modules.html":{}}}],["t",{"_index":72,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["table",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":754,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":757,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":756,"title":{},"body":{"index.html":{}}}],["tests",{"_index":753,"title":{},"body":{"index.html":{}}}],["text",{"_index":103,"title":{},"body":{"classes/Comment.html":{}}}],["thanks",{"_index":763,"title":{},"body":{"index.html":{}}}],["this.commentservice.create(createcommentdto",{"_index":171,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.findall",{"_index":172,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.findone(+id",{"_index":174,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.remove(+id",{"_index":178,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.update(+id",{"_index":176,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.composerservice.create(createcomposerdto",{"_index":250,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.composerservice.findall",{"_index":251,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.composerservice.findone(+id",{"_index":252,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.composerservice.remove(+id",{"_index":255,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.composerservice.update(+id",{"_index":254,"title":{},"body":{"controllers/ComposerController.html":{}}}],["this.countriesservice.create(createcountrydto",{"_index":303,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findall(page",{"_index":308,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findone(id",{"_index":317,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.remove(id",{"_index":319,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.search(q",{"_index":316,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.update(id",{"_index":318,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countrymodel",{"_index":361,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.count",{"_index":380,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.countdocuments().exec",{"_index":360,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.create(createcountrydto",{"_index":352,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.findbyid(id",{"_index":382,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.findbyidandremove(id",{"_index":384,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.findbyidandupdate(id",{"_index":383,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.data",{"_index":91,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["this.genremodel",{"_index":474,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.create(creategenredto",{"_index":473,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.find().exec",{"_index":475,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.findbyid(id",{"_index":476,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.findbyidandremove(id",{"_index":478,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genremodel.findbyidandupdate(id",{"_index":477,"title":{},"body":{"injectables/GenreService.html":{}}}],["this.genreservice.create(creategenredto",{"_index":449,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.findall",{"_index":450,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.findall(q",{"_index":452,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.findone(id",{"_index":453,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.remove(id",{"_index":455,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.genreservice.update(id",{"_index":454,"title":{},"body":{"controllers/GenreController.html":{}}}],["this.idrequest(async",{"_index":381,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/GenreService.html":{},"injectables/LanguagesService.html":{}}}],["this.languagemodel",{"_index":530,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.count",{"_index":531,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.countdocuments().exec",{"_index":529,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.create(createlanguagedto",{"_index":527,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.findbyid(id",{"_index":532,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.findbyidandremove(id",{"_index":534,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagemodel.findbyidandupdate(id",{"_index":533,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagesservice.create(createlanguagedto",{"_index":504,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.findall(page",{"_index":505,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.findone(id",{"_index":507,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.remove(id",{"_index":509,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.search(q",{"_index":506,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.update",{"_index":508,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.methodwrapper(async",{"_index":301,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/GenreController.html":{},"controllers/LanguagesController.html":{}}}],["this.next",{"_index":96,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["this.page",{"_index":93,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["this.pages",{"_index":94,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["this.paginatedrequest",{"_index":355,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["this.previous",{"_index":95,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{}}}],["this.songservice.create(createsongdto",{"_index":580,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.findall",{"_index":581,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.findone(+id",{"_index":582,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.remove(+id",{"_index":584,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.update(+id",{"_index":583,"title":{},"body":{"controllers/SongController.html":{}}}],["this.userservice.create(createuserdto",{"_index":649,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":650,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(+id",{"_index":651,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(+id",{"_index":653,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(+id",{"_index":652,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":368,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{}}}],["title",{"_index":545,"title":{},"body":{"classes/Song.html":{}}}],["tonicsolfa",{"_index":546,"title":{},"body":{"classes/Song.html":{}}}],["touch",{"_index":775,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"classes/Composer.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/Genre.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"injectables/LanguagesService.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["twitter",{"_index":780,"title":{},"body":{"index.html":{}}}],["type",{"_index":77,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Composer.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"classes/Genre.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"interfaces/PageData.html":{},"interfaces/PostResponse.html":{},"classes/Song.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":794,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["types",{"_index":120,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateComposerDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateGenreDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":125,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["typescript",{"_index":736,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":107,"title":{},"body":{"classes/Comment.html":{},"classes/Composer.html":{},"classes/Song.html":{},"classes/User.html":{}}}],["unique",{"_index":232,"title":{},"body":{"classes/Composer.html":{},"classes/Country.html":{},"classes/Language.html":{},"classes/User.html":{}}}],["unit",{"_index":752,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":520,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["unlicensed",{"_index":793,"title":{},"body":{"properties.html":{}}}],["update",{"_index":139,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":175,"title":{},"body":{"controllers/CommentController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":153,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/GenreController.html":{},"injectables/GenreService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatecommentdto",{"_index":154,"title":{"classes/UpdateCommentDto.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["updatecomposerdto",{"_index":244,"title":{"classes/UpdateComposerDto.html":{}},"body":{"controllers/ComposerController.html":{},"injectables/ComposerService.html":{},"classes/UpdateComposerDto.html":{},"coverage.html":{}}}],["updatecountrydto",{"_index":286,"title":{"classes/UpdateCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["updategenredto",{"_index":442,"title":{"classes/UpdateGenreDto.html":{}},"body":{"controllers/GenreController.html":{},"injectables/GenreService.html":{},"classes/UpdateGenreDto.html":{},"coverage.html":{}}}],["updatelanguagedto",{"_index":497,"title":{"classes/UpdateLanguageDto.html":{}},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["updates",{"_index":197,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ComposerService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["updatesongdto",{"_index":574,"title":{"classes/UpdateSongDto.html":{}},"body":{"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":611,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user",{"_index":104,"title":{"classes/User.html":{}},"body":{"classes/Comment.html":{},"classes/Song.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":657,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":614,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.name",{"_index":659,"title":{},"body":{"modules/UserModule.html":{}}}],["user.service",{"_index":647,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercontroller",{"_index":638,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":635,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["usermodule",{"_index":18,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":618,"title":{},"body":{"classes/User.html":{}}}],["userschema",{"_index":636,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":646,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":407,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateGenreDto.html":{},"classes/CreateLanguageDto.html":{},"dependencies.html":{}}}],["value",{"_index":370,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/LanguagesService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":803,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":211,"title":{},"body":{"classes/Composer.html":{},"classes/User.html":{}}}],["version",{"_index":791,"title":{},"body":{"properties.html":{}}}],["vetter",{"_index":619,"title":{},"body":{"classes/User.html":{}}}],["w",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["watch",{"_index":747,"title":{},"body":{"index.html":{}}}],["website",{"_index":778,"title":{},"body":{"index.html":{}}}],["writeconcern",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["yearcomposed",{"_index":547,"title":{},"body":{"classes/Song.html":{}}}],["yes",{"_index":78,"title":{},"body":{"classes/AppPaginatedResponse.html":{},"classes/AppResponse.html":{},"injectables/GenreService.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":768,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/ComposerModule.html":{},"modules/CountriesModule.html":{},"modules/GenreModule.html":{},"modules/LanguagesModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCommentModule\n\nCommentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nComposerModule\n\nComposerModule\n\nAppModule -->\n\nComposerModule->AppModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nAppModule -->\n\nCountriesModule->AppModule\n\n\n\n\n\nGenreModule\n\nGenreModule\n\nAppModule -->\n\nGenreModule->AppModule\n\n\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nAppModule -->\n\nLanguagesModule->AppModule\n\n\n\n\n\nSongModule\n\nSongModule\n\nAppModule -->\n\nSongModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CommentModule\n                        \n                        \n                            ComposerModule\n                        \n                        \n                            CountriesModule\n                        \n                        \n                            GenreModule\n                        \n                        \n                            LanguagesModule\n                        \n                        \n                            SongModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CommentModule } from './modules/comment/comment.module';\nimport { UserModule } from './modules/user/user.module';\nimport { SongModule } from './modules/song/song.module';\nimport { ComposerModule } from './modules/composer/composer.module';\nimport { CountriesModule } from './modules/countries/countries.module';\nimport { LanguagesModule } from './modules/languages/languages.module';\nimport { GenreModule } from './modules/genre/genre.module';\n\nimport 'dotenv/config';\n\nconst env = process.env;\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(\n      `mongodb+srv://${env.MONGO_USER_NAME}:${env.MONGO_PASSWORD}@theopaeanceserverless.sauq3qs.mongodb.net/`,\n      {\n        retryWrites: true,\n        dbName: 'AppDb',\n        writeConcern: {\n          w: 'majority',\n        },\n      },\n    ),\n    CommentModule,\n    UserModule,\n    SongModule,\n    ComposerModule,\n    CountriesModule,\n    LanguagesModule,\n    GenreModule,\n  ],\n  exports: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPaginatedResponse.html":{"url":"classes/AppPaginatedResponse.html","title":"class - AppPaginatedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPaginatedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/response.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AppResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                    Optional\n                                next\n                            \n                            \n                                page\n                            \n                            \n                                pages\n                            \n                            \n                                    Optional\n                                previous\n                            \n                            \n                                    Optional\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(page: number, pages: number, previous?: number, next?: number, data?: T[])\n                    \n                \n                        \n                            \n                                Defined in src/entities/response.entity.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        page\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pages\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        previous\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        next\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/entities/response.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/entities/response.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/entities/response.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/entities/response.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        previous\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/entities/response.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                        \n                            \n                                Inherited from         AppResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         AppResponse:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export interface PostResponse {\n  message: string;\n}\n\nexport interface PageData {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n  data: T[];\n}\n\nexport class AppResponse {\n  data?: T;\n\n  constructor(data?: T) {\n    this.data = data;\n  }\n}\n\nexport class AppPaginatedResponse extends AppResponse {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n\n  constructor(\n    page: number,\n    pages: number,\n    previous?: number,\n    next?: number,\n    data?: T[],\n  ) {\n    super(data);\n    this.page = page;\n    this.pages = pages;\n    this.previous = previous;\n    this.next = next;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppResponse.html":{"url":"classes/AppResponse.html","title":"class - AppResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/response.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data?: T)\n                    \n                \n                        \n                            \n                                Defined in src/entities/response.entity.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/entities/response.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export interface PostResponse {\n  message: string;\n}\n\nexport interface PageData {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n  data: T[];\n}\n\nexport class AppResponse {\n  data?: T;\n\n  constructor(data?: T) {\n    this.data = data;\n  }\n}\n\nexport class AppPaginatedResponse extends AppResponse {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n\n  constructor(\n    page: number,\n    pages: number,\n    previous?: number,\n    next?: number,\n    data?: T[],\n  ) {\n    super(data);\n    this.page = page;\n    this.pages = pages;\n    this.previous = previous;\n    this.next = next;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                replies\n                            \n                            \n                                    \n                                song\n                            \n                            \n                                    \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/entities/comment.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/entities/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Song\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Song', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/entities/comment.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Song } from 'src/modules/song/entities/song.entity';\nimport { User } from 'src/modules/user/entities/user.entity';\n\n@Schema({ collection: 'Comment' })\nexport class Comment {\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  author: User;\n\n  @Prop({ required: true })\n  text: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'Song', required: true })\n  song: Song;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], required: false })\n  replies: Comment[];\n}\n\nexport type CommentDocument = HydratedDocument;\n\nexport const CommentSchema = SchemaFactory.createForClass(Comment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentController.html":{"url":"controllers/CommentController.html","title":"controller - CommentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCommentDto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCommentDto: UpdateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCommentDto\n                                            \n                                                            UpdateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { CommentService } from './comment.service';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { UpdateCommentDto } from './dto/update-comment.dto';\n\n@Controller('comment')\nexport class CommentController {\n  constructor(private readonly commentService: CommentService) {}\n\n  @Post()\n  create(@Body() createCommentDto: CreateCommentDto) {\n    return this.commentService.create(createCommentDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.commentService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.commentService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateCommentDto: UpdateCommentDto) {\n    return this.commentService.update(+id, updateCommentDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.commentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentModule.html":{"url":"modules/CommentModule.html","title":"module - CommentModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\n\nCommentService\n\nCommentService\n\n\n\nCommentModule\n\nCommentModule\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/comment/comment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommentService } from './comment.service';\nimport { CommentController } from './comment.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Comment, CommentSchema } from './entities/comment.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Comment.name,\n        schema: CommentSchema,\n      },\n    ]),\n  ],\n  controllers: [CommentController],\n  providers: [CommentService],\n})\nexport class CommentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createCommentDto: CreateCommentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateCommentDto: UpdateCommentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCommentDto\n                                            \n                                                            UpdateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { UpdateCommentDto } from './dto/update-comment.dto';\n\n@Injectable()\nexport class CommentService {\n  create(createCommentDto: CreateCommentDto) {\n    return 'This action adds a new comment';\n  }\n\n  findAll() {\n    return `This action returns all comment`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} comment`;\n  }\n\n  update(id: number, updateCommentDto: UpdateCommentDto) {\n    return `This action updates a #${id} comment`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} comment`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Composer.html":{"url":"classes/Composer.html","title":"class - Composer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Composer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/entities/composer.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                city\n                            \n                            \n                                    \n                                country\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                province\n                            \n                            \n                                    \n                                songs\n                            \n                            \n                                    \n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, match: /\\b[\\w\\d\\W\\D]+(?:@(?:[\\w\\d\\W\\D]+(?:\\.(?:[\\w\\d\\W\\D]+))))\\b/gi, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, match: /^(\\+[0-9]{1,4}\\s)?[0-9]{5,15}$/gi, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        province\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Song[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/composer/entities/composer.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Song } from 'src/modules/song/entities/song.entity';\n\n@Schema({ collection: 'Composer' })\nexport class Composer {\n  @Prop({ required: true })\n  firstName: string;\n\n  @Prop({ required: true })\n  lastName: string;\n\n  @Prop({ default: false })\n  verified: boolean;\n\n  @Prop({\n    unique: true,\n    match: /\\b[\\w\\d\\W\\D]+(?:@(?:[\\w\\d\\W\\D]+(?:\\.(?:[\\w\\d\\W\\D]+))))\\b/gi,\n    required: true,\n  })\n  email: string;\n\n  @Prop({\n    unique: true,\n    match: /^(\\+[0-9]{1,4}\\s)?[0-9]{5,15}$/gi,\n    required: true,\n  })\n  phone: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ required: true })\n  country: string;\n\n  @Prop({ required: true })\n  address: string;\n\n  @Prop({ required: true })\n  city: string;\n\n  @Prop({ required: true })\n  province: string;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Song' }], required: false })\n  songs: Song[];\n}\n\nexport type ComposerDocument = HydratedDocument;\n\nexport const ComposerSchema = SchemaFactory.createForClass(Composer);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ComposerController.html":{"url":"controllers/ComposerController.html","title":"controller - ComposerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ComposerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/composer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                composer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createComposerDto: CreateComposerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createComposerDto\n                                            \n                                                            CreateComposerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateComposerDto: UpdateComposerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/composer/composer.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateComposerDto\n                                            \n                                                            UpdateComposerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ComposerService } from './composer.service';\nimport { CreateComposerDto } from './dto/create-composer.dto';\nimport { UpdateComposerDto } from './dto/update-composer.dto';\n\n@Controller('composer')\nexport class ComposerController {\n  constructor(private readonly composerService: ComposerService) {}\n\n  @Post()\n  create(@Body() createComposerDto: CreateComposerDto) {\n    return this.composerService.create(createComposerDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.composerService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.composerService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateComposerDto: UpdateComposerDto,\n  ) {\n    return this.composerService.update(+id, updateComposerDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.composerService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ComposerModule.html":{"url":"modules/ComposerModule.html","title":"module - ComposerModule","body":"\n                   \n\n\n\n\n    Modules\n    ComposerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ComposerModule\n\n\n\ncluster_ComposerModule_providers\n\n\n\n\nComposerService\n\nComposerService\n\n\n\nComposerModule\n\nComposerModule\n\nComposerModule -->\n\nComposerService->ComposerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/composer/composer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ComposerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ComposerController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ComposerService } from './composer.service';\nimport { ComposerController } from './composer.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Composer, ComposerSchema } from './entities/composer.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Composer.name,\n        schema: ComposerSchema,\n      },\n    ]),\n  ],\n  controllers: [ComposerController],\n  providers: [ComposerService],\n})\nexport class ComposerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ComposerService.html":{"url":"injectables/ComposerService.html","title":"injectable - ComposerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ComposerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/composer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createComposerDto: CreateComposerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createComposerDto\n                                            \n                                                            CreateComposerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateComposerDto: UpdateComposerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/composer/composer.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateComposerDto\n                                            \n                                                            UpdateComposerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateComposerDto } from './dto/create-composer.dto';\nimport { UpdateComposerDto } from './dto/update-composer.dto';\n\n@Injectable()\nexport class ComposerService {\n  create(createComposerDto: CreateComposerDto) {\n    return 'This action adds a new composer';\n  }\n\n  findAll() {\n    return `This action returns all composer`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} composer`;\n  }\n\n  update(id: number, updateComposerDto: UpdateComposerDto) {\n    return `This action updates a #${id} composer`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} composer`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountriesController.html":{"url":"controllers/CountriesController.html","title":"controller - CountriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                countries\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                search\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCountryDto: CreateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCountryDto\n                                            \n                                                            CreateCountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string, page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCountryDto: UpdateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/countries/countries.controller.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCountryDto\n                                            \n                                                            UpdateCountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  Inject,\n  DefaultValuePipe,\n} from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\nimport {\n  AppPaginatedResponse,\n  AppResponse,\n  PostResponse,\n} from 'src/entities/response.entity';\nimport { Country } from './entities/country.entity';\n\n@Controller('countries')\nexport class CountriesController {\n  constructor(\n    private readonly countriesService: CountriesService,\n    @Inject('CONTROLLER_METHOD_WRAPPER')\n    private readonly methodWrapper,\n  ) {}\n\n  @Post()\n  async create(\n    @Body() createCountryDto: CreateCountryDto,\n  ): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.create(createCountryDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get()\n  async findAll(\n    @Query('page', new DefaultValuePipe(1)) page: number,\n    @Query('limit', new DefaultValuePipe(20)) limit: number,\n  ): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.findAll(page, limit);\n      return {\n        data: response.data,\n        pages: response.pages,\n        previous: response.previous,\n        page: response.page,\n        next: response.next,\n        count: response.count,\n      };\n    });\n  }\n\n  @Get('search')\n  async search(\n    @Query('q') q: string,\n    @Query('page', new DefaultValuePipe(1)) page: number,\n    @Query('limit', new DefaultValuePipe(20)) limit: number,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.countriesService.search(q, page, limit);\n      return {\n        data: response.data,\n        pages: response.pages,\n        previous: response.previous,\n        page: response.page,\n        next: response.next,\n        count: response.count,\n      };\n    });\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.findOne(id);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateCountryDto: UpdateCountryDto,\n  ): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.update(id, updateCountryDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise> {\n    return await this.methodWrapper(async () => {\n      const response = await this.countriesService.remove(id);\n      return {\n        data: response,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountriesModule.html":{"url":"modules/CountriesModule.html","title":"module - CountriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CountriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\n\nCountriesService\n\nCountriesService\n\n\n\nCountriesModule\n\nCountriesModule\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/countries/countries.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { CountriesController } from './countries.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Country, CountrySchema } from './entities/country.entity';\n\nimport { ControllerMethodProvider } from '../../factory/controller-method.factory';\nimport { PaginatedMethodProvider } from 'src/factory/paginated-method.factory';\nimport { IdMethodProvider } from 'src/factory/id-method.factory';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Country.name,\n        schema: CountrySchema,\n      },\n    ]),\n  ],\n  controllers: [CountriesController],\n  providers: [\n    CountriesService,\n    ControllerMethodProvider,\n    PaginatedMethodProvider,\n    IdMethodProvider,\n  ],\n})\nexport class CountriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountriesService.html":{"url":"injectables/CountriesService.html","title":"injectable - CountriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/countries.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(countryModel: Model, paginatedRequest, idRequest)\n                    \n                \n                        \n                            \n                                Defined in src/modules/countries/countries.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        countryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginatedRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        idRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCountryDto: CreateCountryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCountryDto\n                                            \n                                                            CreateCountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCountryDto: UpdateCountryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/countries/countries.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCountryDto\n                                            \n                                                            UpdateCountryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Country } from './entities/country.entity';\nimport { Model } from 'mongoose';\nimport { PageData, PostResponse } from 'src/entities/response.entity';\n\n@Injectable()\nexport class CountriesService {\n  constructor(\n    @InjectModel(Country.name) private readonly countryModel: Model,\n    @Inject('PAGINATED_METHOD_WRAPPER')\n    private readonly paginatedRequest,\n    @Inject('ID_METHOD_WRAPPER')\n    private readonly idRequest,\n  ) {}\n\n  async create(createCountryDto: CreateCountryDto): Promise {\n    const doc = await this.countryModel.create(createCountryDto);\n    await doc.save();\n    return { message: 'Country has been added' };\n  }\n\n  async findAll(page: number, limit: number): Promise> {\n    return await this.paginatedRequest(\n      async () => {\n        const skip = limit * (page - 1);\n        const [countryCount, countries] = await Promise.all([\n          await this.countryModel.countDocuments().exec(),\n          await this.countryModel\n            .find()\n            .limit(limit)\n            .skip(skip)\n            .sort({ name: 1 })\n            .exec(),\n        ]);\n        return {\n          count: countryCount,\n          items: countries,\n        };\n      },\n      page,\n      limit,\n    );\n  }\n\n  async search(\n    q: string,\n    page: number,\n    limit: number,\n  ): Promise> {\n    if (!q) {\n      throw new BadRequestException('Query value not provided');\n    }\n    return await this.paginatedRequest(\n      async () => {\n        const skip = limit * (page - 1);\n        const filter = { $regex: q, $options: 'i' };\n        const conditions = [\n          { name: filter },\n          { code: filter },\n          { emoji: filter },\n          { dial_code: filter },\n        ];\n        const [countryCount, langauages] = await Promise.all([\n          await this.countryModel.count({ $or: conditions }),\n          await this.countryModel\n            .find({ $or: conditions })\n            .limit(limit)\n            .skip(skip)\n            .sort({ name: 1 })\n            .exec(),\n        ]);\n        return {\n          count: countryCount,\n          items: langauages,\n        };\n      },\n      page,\n      limit,\n    );\n  }\n\n  async findOne(id: string): Promise {\n    return this.idRequest(async () => {\n      return await this.countryModel.findById(id);\n    }, id);\n  }\n\n  async update(\n    id: string,\n    updateCountryDto: UpdateCountryDto,\n  ): Promise {\n    return this.idRequest(async () => {\n      return await this.countryModel.findByIdAndUpdate(id, updateCountryDto, {\n        new: true,\n      });\n    }, id);\n  }\n\n  async remove(id: string): Promise {\n    return this.idRequest(async () => {\n      return await this.countryModel.findByIdAndRemove(id);\n    }, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/entities/country.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                emoji\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/entities/country.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/entities/country.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/entities/country.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/entities/country.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\n@Schema({ collection: 'Country' })\nexport class Country {\n  @Prop({ unique: true })\n  code: string;\n\n  @Prop()\n  emoji: string;\n\n  @Prop({ unique: true })\n  name: string;\n\n  @Prop()\n  dial_code: string;\n}\n\nexport type CountryDocument = HydratedDocument;\n\nexport const CountrySchema = SchemaFactory.createForClass(Country);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateCommentDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateComposerDto.html":{"url":"classes/CreateComposerDto.html","title":"class - CreateComposerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateComposerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/dto/create-composer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateComposerDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCountryDto.html":{"url":"classes/CreateCountryDto.html","title":"class - CreateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/create-country.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                dial_code\n                            \n                            \n                                    \n                                    \n                                emoji\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'code should be a string'})@IsNotEmpty({message: 'code should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create-country.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dial_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'dial_code should be a string'})@IsNotEmpty({message: 'dial_code should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create-country.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'emoji should be a string'})@IsNotEmpty({message: 'emoji should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create-country.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'name should be a string'})@IsNotEmpty({message: 'name should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/countries/dto/create-country.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateCountryDto {\n  @IsString({ message: 'code should be a string' })\n  @IsNotEmpty({ message: 'code should not be empty' })\n  code: string;\n\n  @IsString({ message: 'emoji should be a string' })\n  @IsNotEmpty({ message: 'emoji should not be empty' })\n  emoji: string;\n\n  @IsString({ message: 'name should be a string' })\n  @IsNotEmpty({ message: 'name should not be empty' })\n  name: string;\n\n  @IsString({ message: 'dial_code should be a string' })\n  @IsNotEmpty({ message: 'dial_code should not be empty' })\n  dial_code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGenreDto.html":{"url":"classes/CreateGenreDto.html","title":"class - CreateGenreDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGenreDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/dto/create-genre.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'name must be a string'})@IsNotEmpty({message: 'name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/genre/dto/create-genre.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateGenreDto {\n  @IsString({ message: 'name must be a string' })\n  @IsNotEmpty({ message: 'name is required' })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLanguageDto.html":{"url":"classes/CreateLanguageDto.html","title":"class - CreateLanguageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLanguageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/dto/create-language.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'code should be a string'})@IsNotEmpty({message: 'code should not be empty'})@Length(3, 3, {message: 'code has to be 3 characters in length'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/languages/dto/create-language.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'name should be a string'})@IsNotEmpty({message: 'name should not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/languages/dto/create-language.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, Length } from 'class-validator';\n\nexport class CreateLanguageDto {\n  @IsString({ message: 'code should be a string' })\n  @IsNotEmpty({ message: 'code should not be empty' })\n  @Length(3, 3, { message: 'code has to be 3 characters in length' })\n  code: string;\n\n  @IsString({ message: 'name should be a string' })\n  @IsNotEmpty({ message: 'name should not be empty' })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSongDto.html":{"url":"classes/CreateSongDto.html","title":"class - CreateSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/dto/create-song.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSongDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Genre.html":{"url":"classes/Genre.html","title":"class - Genre","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Genre\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/entities/genre.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/genre/entities/genre.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\n@Schema({ collection: 'Genre' })\nexport class Genre {\n  @Prop({ required: true })\n  name: string;\n}\n\nexport type GenreDocument = HydratedDocument;\n\nexport const GenreSchema = SchemaFactory.createForClass(Genre);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GenreController.html":{"url":"controllers/GenreController.html","title":"controller - GenreController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GenreController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/genre.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                genre\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                search\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createGenreDto: CreateGenreDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGenreDto\n                                            \n                                                            CreateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateGenreDto: UpdateGenreDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genre/genre.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateGenreDto\n                                            \n                                                            UpdateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  Query,\n} from '@nestjs/common';\nimport { GenreService } from './genre.service';\nimport { CreateGenreDto } from './dto/create-genre.dto';\nimport { UpdateGenreDto } from './dto/update-genre.dto';\nimport { AppResponse, PostResponse } from 'src/entities/response.entity';\nimport { Genre } from './entities/genre.entity';\n\n@Controller('genre')\nexport class GenreController {\n  constructor(\n    private readonly genreService: GenreService,\n    @Inject('CONTROLLER_METHOD_WRAPPER')\n    private readonly methodWrapper,\n  ) {}\n\n  @Post()\n  async create(\n    @Body() createGenreDto: CreateGenreDto,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.create(createGenreDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get()\n  async findAll(): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.findAll();\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get('search')\n  async search(@Query('q') q: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.findAll(q);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.findOne(id);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateGenreDto: UpdateGenreDto,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.update(id, updateGenreDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.genreService.remove(id);\n      return {\n        data: response,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GenreModule.html":{"url":"modules/GenreModule.html","title":"module - GenreModule","body":"\n                   \n\n\n\n\n    Modules\n    GenreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GenreModule\n\n\n\ncluster_GenreModule_providers\n\n\n\n\nGenreService\n\nGenreService\n\n\n\nGenreModule\n\nGenreModule\n\nGenreModule -->\n\nGenreService->GenreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/genre/genre.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GenreService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GenreController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GenreService } from './genre.service';\nimport { GenreController } from './genre.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Genre, GenreSchema } from './entities/genre.entity';\nimport { ControllerMethodProvider } from 'src/factory/controller-method.factory';\nimport { IdMethodProvider } from 'src/factory/id-method.factory';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Genre.name,\n        schema: GenreSchema,\n      },\n    ]),\n  ],\n  controllers: [GenreController],\n  providers: [GenreService, ControllerMethodProvider, IdMethodProvider],\n})\nexport class GenreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenreService.html":{"url":"injectables/GenreService.html","title":"injectable - GenreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/genre.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(genreModel: Model, idRequest)\n                    \n                \n                        \n                            \n                                Defined in src/modules/genre/genre.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        genreModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        idRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createGenreDto: CreateGenreDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGenreDto\n                                            \n                                                            CreateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(q?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateGenreDto: UpdateGenreDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genre/genre.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateGenreDto\n                                            \n                                                            UpdateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { CreateGenreDto } from './dto/create-genre.dto';\nimport { UpdateGenreDto } from './dto/update-genre.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Genre } from './entities/genre.entity';\nimport { Model } from 'mongoose';\nimport { PostResponse } from 'src/entities/response.entity';\n\n@Injectable()\nexport class GenreService {\n  constructor(\n    @InjectModel(Genre.name) private readonly genreModel: Model,\n    @Inject('ID_METHOD_WRAPPER')\n    private readonly idRequest,\n  ) {}\n\n  async create(createGenreDto: CreateGenreDto): Promise {\n    const doc = await this.genreModel.create(createGenreDto);\n    await doc.save();\n    return { message: 'Genre has been added' };\n  }\n\n  async findAll(q?: string): Promise {\n    if (q) {\n      return this.genreModel\n        .find({ name: { $regex: `[${q}]`, $options: 'i' } })\n        .exec();\n    }\n    return this.genreModel.find().exec();\n  }\n\n  async findOne(id: string): Promise {\n    return this.idRequest(async () => this.genreModel.findById(id), id);\n  }\n\n  update(id: string, updateGenreDto: UpdateGenreDto) {\n    return this.idRequest(async () => {\n      return await this.genreModel.findByIdAndUpdate(id, updateGenreDto, {\n        new: true,\n      });\n    }, id);\n  }\n\n  remove(id: string) {\n    return this.idRequest(async () => {\n      await this.genreModel.findByIdAndRemove(id);\n      return { message: `Country $id has been deleted` };\n    }, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Language.html":{"url":"classes/Language.html","title":"class - Language","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Language\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/entities/language.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, length: 3, lowercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/languages/entities/language.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/languages/entities/language.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\n@Schema({ collection: 'Language' })\nexport class Language {\n  @Prop({ unique: true, length: 3, lowercase: true })\n  code: string;\n\n  @Prop({ unique: true })\n  name: string;\n}\n\nexport type LanguageDocument = HydratedDocument;\n\nexport const LanguageSchema = SchemaFactory.createForClass(Language);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LanguagesController.html":{"url":"controllers/LanguagesController.html","title":"controller - LanguagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LanguagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/languages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                languages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                search\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLanguageDto: CreateLanguageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLanguageDto\n                                            \n                                                            CreateLanguageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string, page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateLanguageDto: UpdateLanguageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/languages/languages.controller.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLanguageDto\n                                            \n                                                            UpdateLanguageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  Query,\n  DefaultValuePipe,\n} from '@nestjs/common';\nimport { LanguagesService } from './languages.service';\nimport { CreateLanguageDto } from './dto/create-language.dto';\nimport { UpdateLanguageDto } from './dto/update-language.dto';\nimport {\n  AppPaginatedResponse,\n  AppResponse,\n  PostResponse,\n} from 'src/entities/response.entity';\nimport { Language } from './entities/language.entity';\n\n@Controller('languages')\nexport class LanguagesController {\n  constructor(\n    private readonly languagesService: LanguagesService,\n    @Inject('CONTROLLER_METHOD_WRAPPER')\n    private readonly methodWrapper,\n  ) {}\n\n  @Post()\n  async create(\n    @Body() createLanguageDto: CreateLanguageDto,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.create(createLanguageDto);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Get()\n  async findAll(\n    @Query('page', new DefaultValuePipe(1)) page: number,\n    @Query('limit', new DefaultValuePipe(20)) limit: number,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.findAll(page, limit);\n      return {\n        data: response.data,\n        pages: response.pages,\n        previous: response.previous,\n        page: response.page,\n        next: response.next,\n        count: response.count,\n      };\n    });\n  }\n\n  @Get('search')\n  async search(\n    @Query('q') q: string,\n    @Query('page', new DefaultValuePipe(1)) page: number,\n    @Query('limit', new DefaultValuePipe(20)) limit: number,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.search(q, page, limit);\n      return {\n        data: response.data,\n        pages: response.pages,\n        previous: response.previous,\n        page: response.page,\n        next: response.next,\n        count: response.count,\n      };\n    });\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.findOne(id);\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateLanguageDto: UpdateLanguageDto,\n  ): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.update(\n        id,\n        updateLanguageDto,\n      );\n      return {\n        data: response,\n      };\n    });\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise> {\n    return this.methodWrapper(async () => {\n      const response = await this.languagesService.remove(id);\n      return {\n        data: response,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LanguagesModule.html":{"url":"modules/LanguagesModule.html","title":"module - LanguagesModule","body":"\n                   \n\n\n\n\n    Modules\n    LanguagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LanguagesModule\n\n\n\ncluster_LanguagesModule_providers\n\n\n\n\nLanguagesService\n\nLanguagesService\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nLanguagesModule -->\n\nLanguagesService->LanguagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/languages/languages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LanguagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LanguagesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LanguagesService } from './languages.service';\nimport { LanguagesController } from './languages.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Language, LanguageSchema } from './entities/language.entity';\nimport { ControllerMethodProvider } from 'src/factory/controller-method.factory';\nimport { PaginatedMethodProvider } from 'src/factory/paginated-method.factory';\nimport { IdMethodProvider } from 'src/factory/id-method.factory';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Language.name,\n        schema: LanguageSchema,\n      },\n    ]),\n  ],\n  controllers: [LanguagesController],\n  providers: [\n    LanguagesService,\n    ControllerMethodProvider,\n    PaginatedMethodProvider,\n    IdMethodProvider,\n  ],\n})\nexport class LanguagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LanguagesService.html":{"url":"injectables/LanguagesService.html","title":"injectable - LanguagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LanguagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/languages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(languageModel: Model, paginatedRequest, idRequest)\n                    \n                \n                        \n                            \n                                Defined in src/modules/languages/languages.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        languageModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginatedRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        idRequest\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLanguageDto: CreateLanguageDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLanguageDto\n                                            \n                                                            CreateLanguageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(q: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateLanguageDto: UpdateLanguageDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/languages/languages.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLanguageDto\n                                            \n                                                            UpdateLanguageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { CreateLanguageDto } from './dto/create-language.dto';\nimport { UpdateLanguageDto } from './dto/update-language.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Language } from './entities/language.entity';\nimport { Model } from 'mongoose';\nimport { PageData, PostResponse } from 'src/entities/response.entity';\n\n@Injectable()\nexport class LanguagesService {\n  constructor(\n    @InjectModel(Language.name) private readonly languageModel: Model,\n    @Inject('PAGINATED_METHOD_WRAPPER')\n    private readonly paginatedRequest,\n    @Inject('ID_METHOD_WRAPPER')\n    private readonly idRequest,\n  ) {}\n\n  async create(createLanguageDto: CreateLanguageDto) {\n    const doc = await this.languageModel.create(createLanguageDto);\n    await doc.save();\n    return { message: 'Language has been added' };\n  }\n\n  async findAll(page: number, limit: number): Promise> {\n    return await this.paginatedRequest(\n      async () => {\n        const skip = limit * (page - 1);\n        const [languageCount, langauages] = await Promise.all([\n          await this.languageModel.countDocuments().exec(),\n          await this.languageModel\n            .find()\n            .limit(limit)\n            .skip(skip)\n            .sort({ name: 1 })\n            .exec(),\n        ]);\n        return {\n          count: languageCount,\n          items: langauages,\n        };\n      },\n      page,\n      limit,\n    );\n  }\n\n  async search(\n    q: string,\n    page: number,\n    limit: number,\n  ): Promise> {\n    if (!q) {\n      throw new BadRequestException('Query value not provided');\n    }\n    return await this.paginatedRequest(\n      async () => {\n        const skip = limit * (page - 1);\n        const filter = { $regex: q, $options: 'i' };\n        const [languageCount, langauages] = await Promise.all([\n          await this.languageModel.count({\n            $or: [{ name: filter }, { code: filter }],\n          }),\n          await this.languageModel\n            .find({ $or: [{ name: filter }, { code: filter }] })\n            .limit(limit)\n            .skip(skip)\n            .sort({ name: 1 })\n            .exec(),\n        ]);\n        return {\n          count: languageCount,\n          items: langauages,\n        };\n      },\n      page,\n      limit,\n    );\n  }\n\n  async findOne(id: string): Promise {\n    return this.idRequest(async () => {\n      return await this.languageModel.findById(id);\n    }, id);\n  }\n\n  async update(\n    id: string,\n    updateLanguageDto: UpdateLanguageDto,\n  ): Promise {\n    return this.idRequest(async () => {\n      return await this.languageModel.findByIdAndUpdate(id, updateLanguageDto, {\n        new: true,\n      });\n    }, id);\n  }\n\n  async remove(id: string): Promise {\n    return this.idRequest(async () => {\n      await this.languageModel.findByIdAndRemove(id);\n      return { message: `Country $id has been deleted` };\n    }, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageData.html":{"url":"interfaces/PageData.html","title":"interface - PageData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/response.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            next\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                        \n                                            pages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            previous\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        next\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        next:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previous\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previous:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PostResponse {\n  message: string;\n}\n\nexport interface PageData {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n  data: T[];\n}\n\nexport class AppResponse {\n  data?: T;\n\n  constructor(data?: T) {\n    this.data = data;\n  }\n}\n\nexport class AppPaginatedResponse extends AppResponse {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n\n  constructor(\n    page: number,\n    pages: number,\n    previous?: number,\n    next?: number,\n    data?: T[],\n  ) {\n    super(data);\n    this.page = page;\n    this.pages = pages;\n    this.previous = previous;\n    this.next = next;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostResponse.html":{"url":"interfaces/PostResponse.html","title":"interface - PostResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/response.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PostResponse {\n  message: string;\n}\n\nexport interface PageData {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n  data: T[];\n}\n\nexport class AppResponse {\n  data?: T;\n\n  constructor(data?: T) {\n    this.data = data;\n  }\n}\n\nexport class AppPaginatedResponse extends AppResponse {\n  page: number;\n  pages: number;\n  count: number;\n  previous?: number;\n  next?: number;\n\n  constructor(\n    page: number,\n    pages: number,\n    previous?: number,\n    next?: number,\n    data?: T[],\n  ) {\n    super(data);\n    this.page = page;\n    this.pages = pages;\n    this.previous = previous;\n    this.next = next;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Song.html":{"url":"classes/Song.html","title":"class - Song","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Song\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/entities/song.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                approved\n                            \n                            \n                                    \n                                approver\n                            \n                            \n                                    \n                                    Optional\n                                audioFile\n                            \n                            \n                                    \n                                    Optional\n                                comments\n                            \n                            \n                                    \n                                    Optional\n                                composers\n                            \n                            \n                                    \n                                contributor\n                            \n                            \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                genre\n                            \n                            \n                                    \n                                language\n                            \n                            \n                                    \n                                lyrics\n                            \n                            \n                                    \n                                    Optional\n                                srtFile\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                    Optional\n                                tonicSolfa\n                            \n                            \n                                    \n                                    Optional\n                                yearComposed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        approved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        approver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        audioFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        composers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Composer[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        genre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genre[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lyrics\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        srtFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tonicSolfa\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        yearComposed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/song/entities/song.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Composer } from 'src/modules/composer/entities/composer.entity';\nimport { Genre } from 'src/modules/genre/entities/genre.entity';\nimport { User } from 'src/modules/user/entities/user.entity';\n\n@Schema({ collection: 'Song' })\nexport class Song {\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  contributor: User;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], required: false })\n  comments?: Comment[];\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Composer' }], required: false })\n  composers?: Composer[];\n\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: true })\n  lyrics: string;\n\n  @Prop({ required: false })\n  tonicSolfa?: string;\n\n  @Prop({ required: true })\n  approved: boolean;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  approver: User;\n\n  @Prop({ required: true })\n  language: string;\n\n  @Prop({ required: false })\n  country?: string;\n\n  @Prop({ required: false })\n  yearComposed?: number;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Genre' }], required: false })\n  genre: Genre[];\n\n  @Prop({ required: false })\n  srtFile?: string;\n\n  @Prop({ required: false })\n  audioFile?: string;\n}\n\nexport type SongDocument = HydratedDocument;\n\nexport const SongSchema = SchemaFactory.createForClass(Song);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SongController.html":{"url":"controllers/SongController.html","title":"controller - SongController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SongController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/song.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                song\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createSongDto: CreateSongDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSongDto\n                                            \n                                                            CreateSongDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateSongDto: UpdateSongDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/song/song.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateSongDto\n                                            \n                                                            UpdateSongDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { SongService } from './song.service';\nimport { CreateSongDto } from './dto/create-song.dto';\nimport { UpdateSongDto } from './dto/update-song.dto';\n\n@Controller('song')\nexport class SongController {\n  constructor(private readonly songService: SongService) {}\n\n  @Post()\n  create(@Body() createSongDto: CreateSongDto) {\n    return this.songService.create(createSongDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.songService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.songService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateSongDto: UpdateSongDto) {\n    return this.songService.update(+id, updateSongDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.songService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SongModule.html":{"url":"modules/SongModule.html","title":"module - SongModule","body":"\n                   \n\n\n\n\n    Modules\n    SongModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SongModule\n\n\n\ncluster_SongModule_providers\n\n\n\n\nSongService\n\nSongService\n\n\n\nSongModule\n\nSongModule\n\nSongModule -->\n\nSongService->SongModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/song/song.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SongService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SongController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SongService } from './song.service';\nimport { SongController } from './song.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Song, SongSchema } from './entities/song.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Song.name,\n        schema: SongSchema,\n      },\n    ]),\n  ],\n  controllers: [SongController],\n  providers: [SongService],\n})\nexport class SongModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SongService.html":{"url":"injectables/SongService.html","title":"injectable - SongService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SongService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/song.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createSongDto: CreateSongDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSongDto\n                                            \n                                                            CreateSongDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateSongDto: UpdateSongDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/song/song.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateSongDto\n                                            \n                                                            UpdateSongDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateSongDto } from './dto/create-song.dto';\nimport { UpdateSongDto } from './dto/update-song.dto';\n\n@Injectable()\nexport class SongService {\n  create(createSongDto: CreateSongDto) {\n    return 'This action adds a new song';\n  }\n\n  findAll() {\n    return `This action returns all song`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} song`;\n  }\n\n  update(id: number, updateSongDto: UpdateSongDto) {\n    return `This action updates a #${id} song`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} song`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentDto.html":{"url":"classes/UpdateCommentDto.html","title":"class - UpdateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/dto/update-comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCommentDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCommentDto } from './create-comment.dto';\n\nexport class UpdateCommentDto extends PartialType(CreateCommentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateComposerDto.html":{"url":"classes/UpdateComposerDto.html","title":"class - UpdateComposerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateComposerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/composer/dto/update-composer.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateComposerDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateComposerDto } from './create-composer.dto';\n\nexport class UpdateComposerDto extends PartialType(CreateComposerDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCountryDto.html":{"url":"classes/UpdateCountryDto.html","title":"class - UpdateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/countries/dto/update-country.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCountryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCountryDto } from './create-country.dto';\n\nexport class UpdateCountryDto extends PartialType(CreateCountryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateGenreDto.html":{"url":"classes/UpdateGenreDto.html","title":"class - UpdateGenreDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateGenreDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genre/dto/update-genre.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateGenreDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateGenreDto } from './create-genre.dto';\n\nexport class UpdateGenreDto extends PartialType(CreateGenreDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLanguageDto.html":{"url":"classes/UpdateLanguageDto.html","title":"class - UpdateLanguageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLanguageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/languages/dto/update-language.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateLanguageDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateLanguageDto } from './create-language.dto';\n\nexport class UpdateLanguageDto extends PartialType(CreateLanguageDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSongDto.html":{"url":"classes/UpdateSongDto.html","title":"class - UpdateSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/song/dto/update-song.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateSongDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateSongDto } from './create-song.dto';\n\nexport class UpdateSongDto extends PartialType(CreateSongDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                admin\n                            \n                            \n                                    \n                                city\n                            \n                            \n                                    \n                                    Optional\n                                comments\n                            \n                            \n                                    \n                                contributions\n                            \n                            \n                                    \n                                country\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                province\n                            \n                            \n                                    \n                                userName\n                            \n                            \n                                    \n                                verified\n                            \n                            \n                                    \n                                vetter\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        admin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contributions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Song[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, match: /\\b[\\w\\d\\W\\D]+(?:@(?:[\\w\\d\\W\\D]+(?:\\.(?:[\\w\\d\\W\\D]+))))\\b/gi, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, match: /^(\\+[0-9]{1,4}\\s)?[0-9]{5,15}$/gi, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        province\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vetter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Song } from 'src/modules/song/entities/song.entity';\n\n@Schema({ collection: 'User' })\nexport class User {\n  @Prop({ required: true })\n  firstName: string;\n\n  @Prop({ required: true })\n  lastName: string;\n\n  @Prop({ unique: true, required: true })\n  userName: string;\n\n  @Prop({ default: false })\n  verified: boolean;\n\n  @Prop({\n    unique: true,\n    match: /\\b[\\w\\d\\W\\D]+(?:@(?:[\\w\\d\\W\\D]+(?:\\.(?:[\\w\\d\\W\\D]+))))\\b/gi,\n    required: true,\n  })\n  email: string;\n\n  @Prop({\n    unique: true,\n    match: /^(\\+[0-9]{1,4}\\s)?[0-9]{5,15}$/gi,\n    required: true,\n  })\n  phone: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ required: true })\n  country: string;\n\n  @Prop({ required: true })\n  address: string;\n\n  @Prop({ required: true })\n  city: string;\n\n  @Prop({ required: true })\n  province: string;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], required: false })\n  comments?: Comment[];\n\n  @Prop({ default: false })\n  vetter: boolean;\n\n  @Prop({ default: false })\n  admin: boolean;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Song' }], required: false })\n  contributions: Song[];\n}\n\nexport type UserDocument = HydratedDocument;\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './entities/user.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UserService {\n  create(createUserDto: CreateUserDto) {\n    return 'This action adds a new user';\n  }\n\n  findAll() {\n    return `This action returns all user`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} user`;\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            env\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/response.entity.ts\n            \n            class\n            AppPaginatedResponse\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/entities/response.entity.ts\n            \n            class\n            AppResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entities/response.entity.ts\n            \n            interface\n            PageData\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/entities/response.entity.ts\n            \n            interface\n            PostResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/factory/controller-method.factory.ts\n            \n            function\n            controllerMethodwrapper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/factory/controller-method.factory.ts\n            \n            variable\n            ControllerMethodProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/factory/id-method.factory.ts\n            \n            function\n            idMethodwrapper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/factory/id-method.factory.ts\n            \n            variable\n            IdMethodProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/factory/paginated-method.factory.ts\n            \n            function\n            paginatedMethodwrapper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/factory/paginated-method.factory.ts\n            \n            variable\n            PaginatedMethodProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/comment/comment.controller.ts\n            \n            controller\n            CommentController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/comment/comment.service.ts\n            \n            injectable\n            CommentService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/comment/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/comment/dto/update-comment.dto.ts\n            \n            class\n            UpdateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/comment/entities/comment.entity.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/comment/entities/comment.entity.ts\n            \n            variable\n            CommentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/composer/composer.controller.ts\n            \n            controller\n            ComposerController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/composer/composer.service.ts\n            \n            injectable\n            ComposerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/composer/dto/create-composer.dto.ts\n            \n            class\n            CreateComposerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/composer/dto/update-composer.dto.ts\n            \n            class\n            UpdateComposerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/composer/entities/composer.entity.ts\n            \n            class\n            Composer\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/composer/entities/composer.entity.ts\n            \n            variable\n            ComposerSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.controller.ts\n            \n            controller\n            CountriesController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/countries/countries.service.ts\n            \n            injectable\n            CountriesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/create-country.dto.ts\n            \n            class\n            CreateCountryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/countries/dto/update-country.dto.ts\n            \n            class\n            UpdateCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/countries/entities/country.entity.ts\n            \n            class\n            Country\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/countries/entities/country.entity.ts\n            \n            variable\n            CountrySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/genre/dto/create-genre.dto.ts\n            \n            class\n            CreateGenreDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/genre/dto/update-genre.dto.ts\n            \n            class\n            UpdateGenreDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/genre/entities/genre.entity.ts\n            \n            class\n            Genre\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/genre/entities/genre.entity.ts\n            \n            variable\n            GenreSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/genre/genre.controller.ts\n            \n            controller\n            GenreController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/genre/genre.service.ts\n            \n            injectable\n            GenreService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/languages/dto/create-language.dto.ts\n            \n            class\n            CreateLanguageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/languages/dto/update-language.dto.ts\n            \n            class\n            UpdateLanguageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/languages/entities/language.entity.ts\n            \n            class\n            Language\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/languages/entities/language.entity.ts\n            \n            variable\n            LanguageSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/languages/languages.controller.ts\n            \n            controller\n            LanguagesController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/languages/languages.service.ts\n            \n            injectable\n            LanguagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/song/dto/create-song.dto.ts\n            \n            class\n            CreateSongDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/song/dto/update-song.dto.ts\n            \n            class\n            UpdateSongDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/song/entities/song.entity.ts\n            \n            class\n            Song\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/modules/song/entities/song.entity.ts\n            \n            variable\n            SongSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/song/song.controller.ts\n            \n            controller\n            SongController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/song/song.service.ts\n            \n            injectable\n            SongService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^10.0.1\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.14\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            dotenv : ^16.3.1\n        \n            mongodb : ^5.9.1\n        \n            mongoose : ^7.6.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            controllerMethodwrapper   (src/.../controller-method.factory.ts)\n                        \n                        \n                            idMethodwrapper   (src/.../id-method.factory.ts)\n                        \n                        \n                            paginatedMethodwrapper   (src/.../paginated-method.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/factory/controller-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        controllerMethodwrapper\n                        \n                    \n                \n            \n            \n                \ncontrollerMethodwrapper(method, errorMessage?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                method\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                errorMessage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/factory/id-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        idMethodwrapper\n                        \n                    \n                \n            \n            \n                \nidMethodwrapper(method, id)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                method\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/factory/paginated-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        paginatedMethodwrapper\n                        \n                    \n                \n            \n            \n                \npaginatedMethodwrapper(method, page: number, limit: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                method\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ComposerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GenreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LanguagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SongModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\ncluster_ComposerModule\n\n\n\ncluster_ComposerModule_providers\n\n\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_GenreModule\n\n\n\ncluster_GenreModule_providers\n\n\n\ncluster_LanguagesModule\n\n\n\ncluster_LanguagesModule_providers\n\n\n\ncluster_SongModule\n\n\n\ncluster_SongModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCommentModule\n\nCommentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nComposerModule\n\nComposerModule\n\nAppModule -->\n\nComposerModule->AppModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nAppModule -->\n\nCountriesModule->AppModule\n\n\n\n\n\nGenreModule\n\nGenreModule\n\nAppModule -->\n\nGenreModule->AppModule\n\n\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nAppModule -->\n\nLanguagesModule->AppModule\n\n\n\n\n\nSongModule\n\nSongModule\n\nAppModule -->\n\nSongModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\nComposerService\n\nComposerService\n\nComposerModule -->\n\nComposerService->ComposerModule\n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\nGenreService\n\nGenreService\n\nGenreModule -->\n\nGenreService->GenreModule\n\n\n\n\n\nLanguagesService\n\nLanguagesService\n\nLanguagesModule -->\n\nLanguagesService->LanguagesModule\n\n\n\n\n\nSongService\n\nSongService\n\nSongModule -->\n\nSongService->SongModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentDocument   (src/.../comment.entity.ts)\n                        \n                        \n                            ComposerDocument   (src/.../composer.entity.ts)\n                        \n                        \n                            CountryDocument   (src/.../country.entity.ts)\n                        \n                        \n                            GenreDocument   (src/.../genre.entity.ts)\n                        \n                        \n                            LanguageDocument   (src/.../language.entity.ts)\n                        \n                        \n                            SongDocument   (src/.../song.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/comment/entities/comment.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CommentDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/composer/entities/composer.entity.ts\n    \n    \n        \n            \n                \n                    \n                    ComposerDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/countries/entities/country.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CountryDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/genre/entities/genre.entity.ts\n    \n    \n        \n            \n                \n                    \n                    GenreDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/languages/entities/language.entity.ts\n    \n    \n        \n            \n                \n                    \n                    LanguageDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/song/entities/song.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SongDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/user/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentSchema   (src/.../comment.entity.ts)\n                        \n                        \n                            ComposerSchema   (src/.../composer.entity.ts)\n                        \n                        \n                            ControllerMethodProvider   (src/.../controller-method.factory.ts)\n                        \n                        \n                            CountrySchema   (src/.../country.entity.ts)\n                        \n                        \n                            env   (src/.../app.module.ts)\n                        \n                        \n                            GenreSchema   (src/.../genre.entity.ts)\n                        \n                        \n                            IdMethodProvider   (src/.../id-method.factory.ts)\n                        \n                        \n                            LanguageSchema   (src/.../language.entity.ts)\n                        \n                        \n                            PaginatedMethodProvider   (src/.../paginated-method.factory.ts)\n                        \n                        \n                            SongSchema   (src/.../song.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/comment/entities/comment.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Comment)\n                    \n                \n\n\n        \n    \n\n    src/modules/composer/entities/composer.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ComposerSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Composer)\n                    \n                \n\n\n        \n    \n\n    src/factory/controller-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ControllerMethodProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: 'CONTROLLER_METHOD_WRAPPER',\n  useValue: controllerMethodwrapper,\n  scope: Scope.REQUEST,\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/countries/entities/country.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CountrySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Country)\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        env\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env\n                    \n                \n\n\n        \n    \n\n    src/modules/genre/entities/genre.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GenreSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Genre)\n                    \n                \n\n\n        \n    \n\n    src/factory/id-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IdMethodProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: 'ID_METHOD_WRAPPER',\n  useValue: idMethodwrapper,\n  scope: Scope.REQUEST,\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/languages/entities/language.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LanguageSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Language)\n                    \n                \n\n\n        \n    \n\n    src/factory/paginated-method.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginatedMethodProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: 'PAGINATED_METHOD_WRAPPER',\n  useValue: paginatedMethodwrapper,\n  scope: Scope.REQUEST,\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/song/entities/song.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SongSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Song)\n                    \n                \n\n\n        \n    \n\n    src/modules/user/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
